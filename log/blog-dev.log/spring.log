2020-04-20 00:06:19.281  INFO 10588 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 10588 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 00:06:19.328 DEBUG 10588 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 00:06:19.329  INFO 10588 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 00:06:19.434  INFO 10588 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 00:06:19.435  INFO 10588 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 00:06:20.137  INFO 10588 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 00:06:20.158  INFO 10588 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 15ms. Found 0 JDBC repository interfaces.
2020-04-20 00:06:20.822  INFO 10588 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 00:06:20.829  INFO 10588 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 00:06:20.830  INFO 10588 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 00:06:20.906  INFO 10588 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 00:06:20.906  INFO 10588 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1471 ms
2020-04-20 00:06:21.545  INFO 10588 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 00:06:21.621  INFO 10588 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 00:06:22.097  INFO 10588 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 00:06:22.144  INFO 10588 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 00:06:22.147  INFO 10588 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.411 seconds (JVM running for 4.336)
2020-04-20 00:06:25.986  INFO 10588 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 00:06:25.986  INFO 10588 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 00:06:25.995  INFO 10588 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-04-20 00:06:26.026  INFO 10588 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 00:06:26.030  INFO 10588 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 00:06:29.185  INFO 10588 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@420b1bf2, {}]}
2020-04-20 00:06:29.214  INFO 10588 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 00:06:29.734  INFO 10588 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 00:06:29.741 DEBUG 10588 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 00:06:29.760 DEBUG 10588 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 00:06:29.777 DEBUG 10588 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 00:06:29.781  INFO 10588 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 00:06:30.923  INFO 10588 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.list', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 00:06:30.954 DEBUG 10588 --- [http-nio-8080-exec-9] c.qin.mapper.TagMapper.selectPage_COUNT  : ==>  Preparing: SELECT count(0) FROM t_tag 
2020-04-20 00:06:30.956 DEBUG 10588 --- [http-nio-8080-exec-9] c.qin.mapper.TagMapper.selectPage_COUNT  : ==> Parameters: 
2020-04-20 00:06:30.958 DEBUG 10588 --- [http-nio-8080-exec-9] c.qin.mapper.TagMapper.selectPage_COUNT  : <==      Total: 1
2020-04-20 00:06:30.959 DEBUG 10588 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.selectPage      : ==>  Preparing: select * from t_tag order by id LIMIT ? 
2020-04-20 00:06:30.959 DEBUG 10588 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.selectPage      : ==> Parameters: 10(Integer)
2020-04-20 00:06:30.960 DEBUG 10588 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.selectPage      : <==      Total: 2
2020-04-20 00:06:30.963  INFO 10588 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/tags
2020-04-20 00:06:32.904  INFO 10588 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.toAddTag', args=[{}]}
2020-04-20 00:06:32.905  INFO 10588 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/tags-input
2020-04-20 00:06:35.055  INFO 10588 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.addTag', args=[Tag{id=null, name='bbb'}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}]}
2020-04-20 00:06:35.059 DEBUG 10588 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTagByName    : ==>  Preparing: select * from t_tag where name = ? 
2020-04-20 00:06:35.060 DEBUG 10588 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTagByName    : ==> Parameters: bbb(String)
2020-04-20 00:06:35.061 DEBUG 10588 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTagByName    : <==      Total: 0
2020-04-20 00:06:35.062 DEBUG 10588 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.addTag          : ==>  Preparing: insert into t_tag(name) values (?) 
2020-04-20 00:06:35.063 DEBUG 10588 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.addTag          : ==> Parameters: bbb(String)
2020-04-20 00:06:35.064 DEBUG 10588 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.addTag          : <==    Updates: 1
2020-04-20 00:06:35.195  INFO 10588 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : redirect:/admin/tags
2020-04-20 00:06:35.215  INFO 10588 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=操作成功!, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 00:06:35.217 DEBUG 10588 --- [http-nio-8080-exec-4] c.qin.mapper.TagMapper.selectPage_COUNT  : ==>  Preparing: SELECT count(0) FROM t_tag 
2020-04-20 00:06:35.217 DEBUG 10588 --- [http-nio-8080-exec-4] c.qin.mapper.TagMapper.selectPage_COUNT  : ==> Parameters: 
2020-04-20 00:06:35.219 DEBUG 10588 --- [http-nio-8080-exec-4] c.qin.mapper.TagMapper.selectPage_COUNT  : <==      Total: 1
2020-04-20 00:06:35.219 DEBUG 10588 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.selectPage      : ==>  Preparing: select * from t_tag order by id LIMIT ? 
2020-04-20 00:06:35.220 DEBUG 10588 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.selectPage      : ==> Parameters: 10(Integer)
2020-04-20 00:06:35.221 DEBUG 10588 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.selectPage      : <==      Total: 3
2020-04-20 00:06:35.222  INFO 10588 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : admin/tags
2020-04-20 00:06:37.759  INFO 10588 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@420b1bf2]}
2020-04-20 00:06:37.771 DEBUG 10588 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 00:06:37.771 DEBUG 10588 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 00:06:37.773 DEBUG 10588 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 00:06:37.820 DEBUG 10588 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id AND b.user_id = ? AND tbtag.blog_id = b.id AND ttag.id = tbtag.tag_id 
2020-04-20 00:06:37.820 DEBUG 10588 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 00:06:37.823 DEBUG 10588 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 00:06:37.824 DEBUG 10588 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t,t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id and b.user_id = ? and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id order by bid LIMIT ? 
2020-04-20 00:06:37.824 DEBUG 10588 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 00:06:37.829 DEBUG 10588 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 00:06:37.831  INFO 10588 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 00:06:39.808  INFO 10588 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 00:06:39.810 DEBUG 10588 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 00:06:39.812 DEBUG 10588 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 00:06:39.816 DEBUG 10588 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 00:06:39.818 DEBUG 10588 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 00:06:39.819 DEBUG 10588 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 00:06:39.821 DEBUG 10588 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 3
2020-04-20 00:06:39.822  INFO 10588 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 00:07:01.851  INFO 10588 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.add', args=[Blog{id=null, title='测试', content='#牛逼', firstPicture='', flag='', views=null, appreciation=false, shareStatement=true, commentAble=false, published=true, recommend=true, creatTime=null, updateTime=null, typeId=33, userId=null, tagIds='4,5', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}, org.apache.catalina.session.StandardSessionFacade@420b1bf2]}
2020-04-20 00:07:01.853 DEBUG 10588 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 00:07:01.853 DEBUG 10588 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 33(Long)
2020-04-20 00:07:01.856 DEBUG 10588 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 00:07:01.860 DEBUG 10588 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.addBlog        : ==>  Preparing: insert into t_blog(title,content,firstPicture,flag,views,appreciation,shareStatement,commentAble,published,recommend,creatTime,updateTime,type_id,user_id) values (?,?,?,?,?,?, ?,?,?,?,?, ?,?,?) 
2020-04-20 00:07:01.861 DEBUG 10588 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.addBlog        : ==> Parameters: 测试(String), #牛逼(String), (String), (String), 0(Integer), false(Boolean), true(Boolean), false(Boolean), true(Boolean), true(Boolean), 2020-04-20 00:07:01.86(Timestamp), 2020-04-20 00:07:01.86(Timestamp), 33(Long), 1(Long)
2020-04-20 00:07:01.975 DEBUG 10588 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.addBlog        : <==    Updates: 1
2020-04-20 00:07:02.378  INFO 10588 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 00:07:02.383  INFO 10588 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@420b1bf2]}
2020-04-20 00:07:02.383 DEBUG 10588 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 00:07:02.384 DEBUG 10588 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 00:07:02.386 DEBUG 10588 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 00:07:02.392 DEBUG 10588 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id AND b.user_id = ? AND tbtag.blog_id = b.id AND ttag.id = tbtag.tag_id 
2020-04-20 00:07:02.393 DEBUG 10588 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 00:07:02.394 DEBUG 10588 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 00:07:02.395 DEBUG 10588 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t,t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id and b.user_id = ? and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id order by bid LIMIT ? 
2020-04-20 00:07:02.396 DEBUG 10588 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 00:07:02.399 DEBUG 10588 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 00:07:02.400  INFO 10588 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 00:10:06.976  INFO 3124 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 3124 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 00:10:06.979 DEBUG 3124 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 00:10:06.979  INFO 3124 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 00:10:07.017  INFO 3124 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 00:10:07.017  INFO 3124 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 00:10:07.682  INFO 3124 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 00:10:07.701  INFO 3124 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 14ms. Found 0 JDBC repository interfaces.
2020-04-20 00:10:08.388  INFO 3124 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 00:10:08.401  INFO 3124 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 00:10:08.401  INFO 3124 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 00:10:08.526  INFO 3124 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 00:10:08.526  INFO 3124 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1509 ms
2020-04-20 00:10:09.580  INFO 3124 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 00:10:09.657  INFO 3124 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 00:10:10.101  INFO 3124 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 00:10:10.145  INFO 3124 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 00:10:10.149  INFO 3124 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.616 seconds (JVM running for 4.413)
2020-04-20 00:10:18.509  INFO 4308 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 4308 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 00:10:18.512 DEBUG 4308 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 00:10:18.516  INFO 4308 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 00:10:18.573  INFO 4308 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 00:10:18.574  INFO 4308 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 00:10:19.249  INFO 4308 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 00:10:19.266  INFO 4308 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 12ms. Found 0 JDBC repository interfaces.
2020-04-20 00:10:19.928  INFO 4308 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 00:10:19.935  INFO 4308 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 00:10:19.936  INFO 4308 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 00:10:20.034  INFO 4308 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 00:10:20.034  INFO 4308 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1460 ms
2020-04-20 00:10:20.651  INFO 4308 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 00:10:20.733  INFO 4308 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 00:10:21.187  INFO 4308 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 00:10:21.233  INFO 4308 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 00:10:21.235  INFO 4308 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.152 seconds (JVM running for 3.952)
2020-04-20 00:10:23.186  INFO 4308 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 00:10:23.187  INFO 4308 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 00:10:23.196  INFO 4308 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-04-20 00:10:23.222  INFO 4308 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 00:10:23.227  INFO 4308 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 00:10:29.165  INFO 4308 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@5989f5c8, {}]}
2020-04-20 00:10:29.193  INFO 4308 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 00:10:29.690  INFO 4308 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 00:10:29.695 DEBUG 4308 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 00:10:29.713 DEBUG 4308 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 00:10:29.732 DEBUG 4308 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 00:10:29.735  INFO 4308 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 00:10:30.745  INFO 4308 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@5989f5c8]}
2020-04-20 00:10:30.753 DEBUG 4308 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 00:10:30.753 DEBUG 4308 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 00:10:30.758 DEBUG 4308 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 00:10:30.809 DEBUG 4308 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id AND b.user_id = ? AND tbtag.blog_id = b.id AND ttag.id = tbtag.tag_id 
2020-04-20 00:10:30.809 DEBUG 4308 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 00:10:30.811 DEBUG 4308 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 00:10:30.813 DEBUG 4308 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t,t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id and b.user_id = ? and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id order by bid LIMIT ? 
2020-04-20 00:10:30.813 DEBUG 4308 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 00:10:30.818 DEBUG 4308 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 00:10:30.821  INFO 4308 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 00:10:32.081  INFO 4308 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 00:10:32.082 DEBUG 4308 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 00:10:32.083 DEBUG 4308 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 00:10:32.085 DEBUG 4308 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 00:10:32.089 DEBUG 4308 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 00:10:32.090 DEBUG 4308 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 00:10:32.094 DEBUG 4308 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 3
2020-04-20 00:10:32.094  INFO 4308 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 00:10:43.762  INFO 4308 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.add', args=[Blog{id=null, title='x', content='x', firstPicture='', flag='', views=null, appreciation=true, shareStatement=true, commentAble=true, published=true, recommend=true, creatTime=null, updateTime=null, typeId=30, userId=null, tagIds='3,5', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}, org.apache.catalina.session.StandardSessionFacade@5989f5c8]}
2020-04-20 00:10:43.767 DEBUG 4308 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 00:10:43.767 DEBUG 4308 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 30(Long)
2020-04-20 00:10:43.770 DEBUG 4308 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 00:10:43.772 DEBUG 4308 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.addBlog        : ==>  Preparing: insert into t_blog(title,content,firstPicture,flag,views,appreciation,shareStatement,commentAble,published,recommend,creatTime,updateTime,type_id,user_id) values (?,?,?,?,?,?, ?,?,?,?,?, ?,?,?) 
2020-04-20 00:10:43.774 DEBUG 4308 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.addBlog        : ==> Parameters: x(String), x(String), (String), (String), 0(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2020-04-20 00:10:43.772(Timestamp), 2020-04-20 00:10:43.772(Timestamp), 30(Long), 1(Long)
2020-04-20 00:10:43.775 DEBUG 4308 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.addBlog        : <==    Updates: 1
2020-04-20 00:10:43.962  INFO 4308 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 00:10:43.982  INFO 4308 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@5989f5c8]}
2020-04-20 00:10:43.983 DEBUG 4308 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 00:10:43.984 DEBUG 4308 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 00:10:43.987 DEBUG 4308 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 00:10:43.993 DEBUG 4308 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id AND b.user_id = ? AND tbtag.blog_id = b.id AND ttag.id = tbtag.tag_id 
2020-04-20 00:10:43.994 DEBUG 4308 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 00:10:43.995 DEBUG 4308 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 00:10:43.996 DEBUG 4308 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t,t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id and b.user_id = ? and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id order by bid LIMIT ? 
2020-04-20 00:10:43.996 DEBUG 4308 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 00:10:44.002 DEBUG 4308 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 00:10:44.004  INFO 4308 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 00:12:51.384  INFO 14252 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 14252 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 00:12:51.387 DEBUG 14252 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 00:12:51.387  INFO 14252 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 00:12:51.444  INFO 14252 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 00:12:51.444  INFO 14252 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 00:12:52.150  INFO 14252 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 00:12:52.167  INFO 14252 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 12ms. Found 0 JDBC repository interfaces.
2020-04-20 00:12:52.863  INFO 14252 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 00:12:52.871  INFO 14252 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 00:12:52.872  INFO 14252 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 00:12:52.957  INFO 14252 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 00:12:52.957  INFO 14252 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1513 ms
2020-04-20 00:12:53.695  INFO 14252 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 00:12:53.788  INFO 14252 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 00:12:54.279  INFO 14252 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 00:12:54.322  INFO 14252 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 00:12:54.325  INFO 14252 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.373 seconds (JVM running for 4.193)
2020-04-20 00:12:55.460  INFO 14252 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 00:12:55.460  INFO 14252 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 00:12:55.469  INFO 14252 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-04-20 00:12:55.496  INFO 14252 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 00:12:55.500  INFO 14252 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 00:12:58.327  INFO 14252 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@3737947, {}]}
2020-04-20 00:12:58.356  INFO 14252 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 00:12:58.864  INFO 14252 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 00:12:58.870 DEBUG 14252 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 00:12:58.888 DEBUG 14252 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 00:12:58.906 DEBUG 14252 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 00:12:58.910  INFO 14252 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 00:12:59.729  INFO 14252 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@3737947]}
2020-04-20 00:12:59.740 DEBUG 14252 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 00:12:59.741 DEBUG 14252 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 00:12:59.743 DEBUG 14252 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 00:12:59.795 DEBUG 14252 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id AND b.user_id = ? AND tbtag.blog_id = b.id AND ttag.id = tbtag.tag_id 
2020-04-20 00:12:59.795 DEBUG 14252 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 00:12:59.797 DEBUG 14252 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 00:12:59.802 DEBUG 14252 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t,t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id and b.user_id = ? and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id order by bid LIMIT ? 
2020-04-20 00:12:59.803 DEBUG 14252 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 00:12:59.808 DEBUG 14252 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 00:12:59.811  INFO 14252 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 00:13:02.566  INFO 14252 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 00:13:02.567 DEBUG 14252 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 00:13:02.568 DEBUG 14252 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 00:13:02.570 DEBUG 14252 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 00:13:02.574 DEBUG 14252 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 00:13:02.574 DEBUG 14252 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 00:13:02.575 DEBUG 14252 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 3
2020-04-20 00:13:02.576  INFO 14252 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 00:13:12.259  INFO 14252 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.add', args=[Blog{id=null, title='x', content='x', firstPicture='', flag='', views=null, appreciation=false, shareStatement=true, commentAble=false, published=true, recommend=false, creatTime=null, updateTime=null, typeId=36, userId=null, tagIds='3,5', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}, org.apache.catalina.session.StandardSessionFacade@3737947]}
2020-04-20 00:13:12.264 DEBUG 14252 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 00:13:12.264 DEBUG 14252 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 36(Long)
2020-04-20 00:13:12.265 DEBUG 14252 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 00:13:12.267 DEBUG 14252 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.addBlog        : ==>  Preparing: insert into t_blog(title,content,firstPicture,flag,views,appreciation,shareStatement,commentAble,published,recommend,creatTime,updateTime,type_id,user_id) values (?,?,?,?,?,?, ?,?,?,?,?, ?,?,?) 
2020-04-20 00:13:12.269 DEBUG 14252 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.addBlog        : ==> Parameters: x(String), x(String), (String), (String), 0(Integer), false(Boolean), true(Boolean), false(Boolean), true(Boolean), false(Boolean), 2020-04-20 00:13:12.267(Timestamp), 2020-04-20 00:13:12.267(Timestamp), 36(Long), 1(Long)
2020-04-20 00:13:12.270 DEBUG 14252 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.addBlog        : <==    Updates: 1
2020-04-20 00:13:12.589  INFO 14252 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 00:13:12.605  INFO 14252 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@3737947]}
2020-04-20 00:13:12.606 DEBUG 14252 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 00:13:12.606 DEBUG 14252 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 00:13:12.607 DEBUG 14252 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 00:13:12.614 DEBUG 14252 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id AND b.user_id = ? AND tbtag.blog_id = b.id AND ttag.id = tbtag.tag_id 
2020-04-20 00:13:12.614 DEBUG 14252 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 00:13:12.616 DEBUG 14252 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 00:13:12.616 DEBUG 14252 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t,t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id and b.user_id = ? and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id order by bid LIMIT ? 
2020-04-20 00:13:12.617 DEBUG 14252 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 00:13:12.703 DEBUG 14252 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 00:13:12.704  INFO 14252 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 00:13:36.705  INFO 9372 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 9372 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 00:13:36.708 DEBUG 9372 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 00:13:36.709  INFO 9372 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 00:13:36.778  INFO 9372 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 00:13:36.778  INFO 9372 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 00:13:37.505  INFO 9372 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 00:13:37.524  INFO 9372 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 14ms. Found 0 JDBC repository interfaces.
2020-04-20 00:13:38.508  INFO 9372 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 00:13:38.518  INFO 9372 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 00:13:38.518  INFO 9372 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 00:13:38.604  INFO 9372 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 00:13:38.604  INFO 9372 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1825 ms
2020-04-20 00:13:39.392  INFO 9372 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 00:13:39.486  INFO 9372 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 00:13:40.012  INFO 9372 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 00:13:40.070  INFO 9372 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 00:13:40.074  INFO 9372 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.853 seconds (JVM running for 5.699)
2020-04-20 00:13:42.781  INFO 9372 --- [http-nio-8080-exec-3] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 00:13:42.781  INFO 9372 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 00:13:42.790  INFO 9372 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-04-20 00:13:42.824  INFO 9372 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 00:13:42.829  INFO 9372 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 00:13:45.708  INFO 9372 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@3b9e4515, {}]}
2020-04-20 00:13:45.749  INFO 9372 --- [http-nio-8080-exec-3] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 00:13:46.304  INFO 9372 --- [http-nio-8080-exec-3] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 00:13:46.311 DEBUG 9372 --- [http-nio-8080-exec-3] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 00:13:46.335 DEBUG 9372 --- [http-nio-8080-exec-3] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 00:13:46.362 DEBUG 9372 --- [http-nio-8080-exec-3] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 00:13:46.367  INFO 9372 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 00:13:47.409  INFO 9372 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@3b9e4515]}
2020-04-20 00:13:47.419 DEBUG 9372 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 00:13:47.420 DEBUG 9372 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 00:13:47.422 DEBUG 9372 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 00:13:47.481 DEBUG 9372 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id AND b.user_id = ? AND tbtag.blog_id = b.id AND ttag.id = tbtag.tag_id 
2020-04-20 00:13:47.481 DEBUG 9372 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 00:13:47.485 DEBUG 9372 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 00:13:47.487 DEBUG 9372 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t,t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id and b.user_id = ? and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id order by bid LIMIT ? 
2020-04-20 00:13:47.487 DEBUG 9372 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 00:13:47.493 DEBUG 9372 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 00:13:47.497  INFO 9372 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 00:13:48.546  INFO 9372 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 00:13:48.547 DEBUG 9372 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 00:13:48.548 DEBUG 9372 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 00:13:48.551 DEBUG 9372 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 00:13:48.555 DEBUG 9372 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 00:13:48.557 DEBUG 9372 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 00:13:48.561 DEBUG 9372 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 3
2020-04-20 00:13:48.562  INFO 9372 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 00:13:58.615  INFO 9372 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.add', args=[Blog{id=null, title='x', content='x', firstPicture='', flag='', views=null, appreciation=false, shareStatement=false, commentAble=true, published=true, recommend=false, creatTime=null, updateTime=null, typeId=30, userId=null, tagIds='3,4', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}, org.apache.catalina.session.StandardSessionFacade@3b9e4515]}
2020-04-20 00:13:58.618 DEBUG 9372 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 00:13:58.618 DEBUG 9372 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 30(Long)
2020-04-20 00:13:58.619 DEBUG 9372 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 00:14:46.704  WARN 9372 --- [HikariPool-1 housekeeper] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m301ms824µs859ns).
2020-04-20 00:14:46.707 DEBUG 9372 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.addBlog        : ==>  Preparing: insert into t_blog(title,content,firstPicture,flag,views,appreciation,shareStatement,commentAble,published,recommend,creatTime,updateTime,type_id,user_id) values (?,?,?,?,?,?, ?,?,?,?,?, ?,?,?) 
2020-04-20 00:14:46.715 DEBUG 9372 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.addBlog        : ==> Parameters: x(String), x(String), (String), (String), 0(Integer), false(Boolean), false(Boolean), true(Boolean), true(Boolean), false(Boolean), 2020-04-20 00:14:46.706(Timestamp), 2020-04-20 00:14:46.706(Timestamp), 30(Long), 1(Long)
2020-04-20 00:14:46.719 DEBUG 9372 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.addBlog        : <==    Updates: 1
2020-04-20 00:14:46.993  INFO 9372 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 00:14:47.010  INFO 9372 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@3b9e4515]}
2020-04-20 00:14:47.010 DEBUG 9372 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 00:14:47.011 DEBUG 9372 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 00:14:47.012 DEBUG 9372 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 00:14:47.020 DEBUG 9372 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id AND b.user_id = ? AND tbtag.blog_id = b.id AND ttag.id = tbtag.tag_id 
2020-04-20 00:14:47.021 DEBUG 9372 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 00:14:47.022 DEBUG 9372 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 00:14:47.023 DEBUG 9372 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t,t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id and b.user_id = ? and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id order by bid LIMIT ? 
2020-04-20 00:14:47.023 DEBUG 9372 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 00:14:47.026 DEBUG 9372 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 00:14:47.027  INFO 9372 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 00:14:47.147  INFO 9372 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-20 00:14:47.148  INFO 9372 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-04-20 00:14:47.160  INFO 9372 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-04-20 00:14:52.459  INFO 14292 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 14292 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 00:14:52.462 DEBUG 14292 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 00:14:52.462  INFO 14292 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 00:14:52.507  INFO 14292 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 00:14:52.507  INFO 14292 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 00:14:53.329  INFO 14292 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 00:14:53.347  INFO 14292 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 12ms. Found 0 JDBC repository interfaces.
2020-04-20 00:14:54.034  INFO 14292 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 00:14:54.053  INFO 14292 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 00:14:54.053  INFO 14292 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 00:14:54.131  INFO 14292 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 00:14:54.132  INFO 14292 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1624 ms
2020-04-20 00:14:54.758  INFO 14292 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 00:14:54.833  INFO 14292 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 00:14:55.312  INFO 14292 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 00:14:55.365  INFO 14292 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 00:14:55.368  INFO 14292 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.355 seconds (JVM running for 4.202)
2020-04-20 00:14:57.419  INFO 14292 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 00:14:57.420  INFO 14292 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 00:14:57.429  INFO 14292 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-04-20 00:14:57.456  INFO 14292 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 00:14:57.461  INFO 14292 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 00:15:01.022  INFO 14292 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@494c70d2, {}]}
2020-04-20 00:15:01.051  INFO 14292 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 00:15:01.560  INFO 14292 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 00:15:01.566 DEBUG 14292 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 00:15:01.586 DEBUG 14292 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 00:15:01.604 DEBUG 14292 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 00:15:01.610  INFO 14292 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 00:15:02.705  INFO 14292 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@494c70d2]}
2020-04-20 00:15:02.715 DEBUG 14292 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 00:15:02.715 DEBUG 14292 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 00:15:02.718 DEBUG 14292 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 00:15:02.769 DEBUG 14292 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id AND b.user_id = ? AND tbtag.blog_id = b.id AND ttag.id = tbtag.tag_id 
2020-04-20 00:15:02.770 DEBUG 14292 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 00:15:02.773 DEBUG 14292 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 00:15:02.775 DEBUG 14292 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t,t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id and b.user_id = ? and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id order by bid LIMIT ? 
2020-04-20 00:15:02.776 DEBUG 14292 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 00:15:02.781 DEBUG 14292 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 00:15:02.784  INFO 14292 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 00:15:06.452  INFO 14292 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 00:15:06.455 DEBUG 14292 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 00:15:06.455 DEBUG 14292 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 00:15:06.458 DEBUG 14292 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 00:15:06.461 DEBUG 14292 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 00:15:06.461 DEBUG 14292 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 00:15:06.464 DEBUG 14292 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 3
2020-04-20 00:15:06.465  INFO 14292 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 00:15:16.615  INFO 14292 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.add', args=[Blog{id=null, title='s', content='s', firstPicture='', flag='', views=null, appreciation=true, shareStatement=false, commentAble=false, published=true, recommend=false, creatTime=null, updateTime=null, typeId=34, userId=null, tagIds='5,4,3', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}, org.apache.catalina.session.StandardSessionFacade@494c70d2]}
2020-04-20 00:15:16.619 DEBUG 14292 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 00:15:16.619 DEBUG 14292 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 34(Long)
2020-04-20 00:15:16.620 DEBUG 14292 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 00:15:16.622 DEBUG 14292 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 00:15:16.622 DEBUG 14292 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 5(Long)
2020-04-20 00:15:16.623 DEBUG 14292 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 00:15:16.624 DEBUG 14292 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 00:15:16.624 DEBUG 14292 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 4(Long)
2020-04-20 00:15:16.625 DEBUG 14292 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 00:15:16.625 DEBUG 14292 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 00:15:16.626 DEBUG 14292 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 3(Long)
2020-04-20 00:15:16.627 DEBUG 14292 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 00:15:16.628 DEBUG 14292 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.addBlog        : ==>  Preparing: insert into t_blog(title,content,firstPicture,flag,views,appreciation,shareStatement,commentAble,published,recommend,creatTime,updateTime,type_id,user_id) values (?,?,?,?,?,?, ?,?,?,?,?, ?,?,?) 
2020-04-20 00:15:16.629 DEBUG 14292 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.addBlog        : ==> Parameters: s(String), s(String), (String), (String), 0(Integer), true(Boolean), false(Boolean), false(Boolean), true(Boolean), false(Boolean), 2020-04-20 00:15:16.628(Timestamp), 2020-04-20 00:15:16.628(Timestamp), 34(Long), 1(Long)
2020-04-20 00:15:16.631 DEBUG 14292 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.addBlog        : <==    Updates: 1
2020-04-20 00:15:17.130 ERROR 14292 --- [http-nio-8080-exec-3] c.q.handler.ControllerExceptionHandler   : Request URL : http://localhost:8080/admin/blogs, Exception : {}

org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.qin.mapper.BlogTagMapper.addBlogTag
	at org.apache.ibatis.binding.MapperMethod$SqlCommand.<init>(MapperMethod.java:235) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperMethod.<init>(MapperMethod.java:53) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperProxy.lambda$cachedInvoker$0(MapperProxy.java:107) ~[mybatis-3.5.4.jar:3.5.4]
	at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660) ~[na:1.8.0_181]
	at org.apache.ibatis.binding.MapperProxy.cachedInvoker(MapperProxy.java:94) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85) ~[mybatis-3.5.4.jar:3.5.4]
	at com.sun.proxy.$Proxy86.addBlogTag(Unknown Source) ~[na:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.sun.proxy.$Proxy87.addBlogTag(Unknown Source) ~[na:na]
	at com.qin.service.BlogServiceImpl.addBlog(BlogServiceImpl.java:76) ~[classes/:na]
	at com.qin.service.BlogServiceImpl$$FastClassBySpringCGLIB$$cb930495.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:99) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.qin.service.BlogServiceImpl$$EnhancerBySpringCGLIB$$7245aa5e.addBlog(<generated>) ~[classes/:na]
	at com.qin.controller.AdminBlogController.add(AdminBlogController.java:109) ~[classes/:na]
	at com.qin.controller.AdminBlogController$$FastClassBySpringCGLIB$$dfdcc7c0.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.qin.controller.AdminBlogController$$EnhancerBySpringCGLIB$$e23df526.add(<generated>) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]

2020-04-20 00:15:17.132  WARN 14292 --- [http-nio-8080-exec-3] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.qin.mapper.BlogTagMapper.addBlogTag]
2020-04-20 00:15:45.256  INFO 1368 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 1368 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 00:15:45.258 DEBUG 1368 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 00:15:45.258  INFO 1368 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 00:15:45.393  INFO 1368 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 00:15:45.393  INFO 1368 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 00:15:46.129  INFO 1368 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 00:15:46.144  INFO 1368 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 12ms. Found 0 JDBC repository interfaces.
2020-04-20 00:15:46.819  INFO 1368 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 00:15:46.828  INFO 1368 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 00:15:46.828  INFO 1368 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 00:15:46.921  INFO 1368 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 00:15:46.921  INFO 1368 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1528 ms
2020-04-20 00:15:47.595  INFO 1368 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 00:15:47.676  INFO 1368 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 00:15:48.137  INFO 1368 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 00:15:48.185  INFO 1368 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 00:15:48.189  INFO 1368 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.426 seconds (JVM running for 4.303)
2020-04-20 00:15:48.261  INFO 1368 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 00:15:48.262  INFO 1368 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 00:15:48.270  INFO 1368 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-04-20 00:15:48.298  INFO 1368 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='127.0.0.1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 00:15:48.302  INFO 1368 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 00:15:50.820  INFO 1368 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='127.0.0.1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 00:15:50.820  INFO 1368 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 00:15:54.161  INFO 1368 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@5fd4e05a, {}]}
2020-04-20 00:15:54.189  INFO 1368 --- [http-nio-8080-exec-10] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 00:15:54.686  INFO 1368 --- [http-nio-8080-exec-10] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 00:15:54.691 DEBUG 1368 --- [http-nio-8080-exec-10] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 00:15:54.709 DEBUG 1368 --- [http-nio-8080-exec-10] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 00:15:54.727 DEBUG 1368 --- [http-nio-8080-exec-10] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 00:15:54.731  INFO 1368 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 00:15:56.202  INFO 1368 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@5fd4e05a]}
2020-04-20 00:15:56.209 DEBUG 1368 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 00:15:56.210 DEBUG 1368 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 00:15:56.212 DEBUG 1368 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 00:15:56.263 DEBUG 1368 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id AND b.user_id = ? AND tbtag.blog_id = b.id AND ttag.id = tbtag.tag_id 
2020-04-20 00:15:56.264 DEBUG 1368 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 00:15:56.267 DEBUG 1368 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 00:15:56.269 DEBUG 1368 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t,t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id and b.user_id = ? and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id order by bid LIMIT ? 
2020-04-20 00:15:56.269 DEBUG 1368 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 00:15:56.275 DEBUG 1368 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 00:15:56.278  INFO 1368 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 00:15:57.111  INFO 1368 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 00:15:57.113 DEBUG 1368 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 00:15:57.113 DEBUG 1368 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 00:15:57.116 DEBUG 1368 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 00:15:57.120 DEBUG 1368 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 00:15:57.120 DEBUG 1368 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 00:15:57.122 DEBUG 1368 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 3
2020-04-20 00:15:57.122  INFO 1368 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 00:16:05.739  INFO 1368 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='127.0.0.1', classMethod='com.qin.controller.AdminBlogController.add', args=[Blog{id=null, title='1', content='1', firstPicture='', flag='', views=null, appreciation=false, shareStatement=false, commentAble=false, published=true, recommend=false, creatTime=null, updateTime=null, typeId=30, userId=null, tagIds='3,4,5', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}, org.apache.catalina.session.StandardSessionFacade@5fd4e05a]}
2020-04-20 00:16:05.745 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 00:16:05.745 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 30(Long)
2020-04-20 00:16:05.746 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 00:16:05.748 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 00:16:05.749 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 3(Long)
2020-04-20 00:16:05.750 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 00:16:05.750 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 00:16:05.751 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 4(Long)
2020-04-20 00:16:05.757 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 00:16:05.758 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 00:16:05.758 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 5(Long)
2020-04-20 00:16:05.759 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 00:16:05.762 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.addBlog        : ==>  Preparing: insert into t_blog(title,content,firstPicture,flag,views,appreciation,shareStatement,commentAble,published,recommend,creatTime,updateTime,type_id,user_id) values (?,?,?,?,?,?, ?,?,?,?,?, ?,?,?) 
2020-04-20 00:16:05.764 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.addBlog        : ==> Parameters: 1(String), 1(String), (String), (String), 0(Integer), false(Boolean), false(Boolean), false(Boolean), true(Boolean), false(Boolean), 2020-04-20 00:16:05.762(Timestamp), 2020-04-20 00:16:05.762(Timestamp), 30(Long), 1(Long)
2020-04-20 00:16:05.765 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.addBlog        : <==    Updates: 1
2020-04-20 00:16:05.768 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 00:16:05.768 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 10(Long), 3(Long)
2020-04-20 00:16:05.770 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 00:16:05.770 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 00:16:05.770 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 10(Long), 4(Long)
2020-04-20 00:16:05.771 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 00:16:05.772 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 00:16:05.772 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 10(Long), 5(Long)
2020-04-20 00:16:06.109 DEBUG 1368 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 00:16:06.235  INFO 1368 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 00:16:06.248  INFO 1368 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='127.0.0.1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@5fd4e05a]}
2020-04-20 00:16:06.248 DEBUG 1368 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 00:16:06.249 DEBUG 1368 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 00:16:06.249 DEBUG 1368 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 00:16:06.255 DEBUG 1368 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id AND b.user_id = ? AND tbtag.blog_id = b.id AND ttag.id = tbtag.tag_id 
2020-04-20 00:16:06.255 DEBUG 1368 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 00:16:06.257 DEBUG 1368 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 00:16:06.258 DEBUG 1368 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t,t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id and b.user_id = ? and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id order by bid LIMIT ? 
2020-04-20 00:16:06.259 DEBUG 1368 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 00:16:06.265 DEBUG 1368 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 00:16:06.266  INFO 1368 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 00:16:25.030  INFO 1368 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/10/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[10, {}]}
2020-04-20 00:16:25.031 DEBUG 1368 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 00:16:25.032 DEBUG 1368 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 00:16:25.034 DEBUG 1368 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 00:16:25.037 DEBUG 1368 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 00:16:25.037 DEBUG 1368 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 00:16:25.039 DEBUG 1368 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 3
2020-04-20 00:16:25.039 DEBUG 1368 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 00:16:25.039 DEBUG 1368 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 10(Long)
2020-04-20 00:16:25.044 DEBUG 1368 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 3
2020-04-20 00:16:25.044  INFO 1368 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 10:42:30.386  INFO 11880 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 11880 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 10:42:30.386 DEBUG 11880 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 10:42:30.386  INFO 11880 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 10:42:30.591  INFO 11880 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 10:42:30.591  INFO 11880 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 10:42:33.154  INFO 11880 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 10:42:33.241  INFO 11880 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 22ms. Found 0 JDBC repository interfaces.
2020-04-20 10:42:34.815  INFO 11880 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 10:42:34.837  INFO 11880 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 10:42:34.838  INFO 11880 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 10:42:34.968  INFO 11880 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 10:42:34.968  INFO 11880 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4377 ms
2020-04-20 10:42:36.241  INFO 11880 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 10:42:36.356  INFO 11880 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 10:42:37.334  INFO 11880 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 10:42:37.464  INFO 11880 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 10:42:37.484  INFO 11880 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 8.554 seconds (JVM running for 11.928)
2020-04-20 10:42:40.263  INFO 11880 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 10:42:40.263  INFO 11880 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 10:42:40.275  INFO 11880 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 12 ms
2020-04-20 10:42:40.354  INFO 11880 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[]}
2020-04-20 10:42:40.359  INFO 11880 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : index
2020-04-20 10:42:47.688  INFO 11880 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 10:42:47.695  INFO 11880 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 10:42:54.734  INFO 11880 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@c3e4985, {}]}
2020-04-20 10:42:54.851  INFO 11880 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 10:42:55.752  INFO 11880 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 10:42:55.758 DEBUG 11880 --- [http-nio-8080-exec-1] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 10:42:55.782 DEBUG 11880 --- [http-nio-8080-exec-1] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 10:42:55.806 DEBUG 11880 --- [http-nio-8080-exec-1] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 10:42:55.810  INFO 11880 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 10:42:58.961  INFO 11880 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs;jsessionid=1B853DC2FD850269292D7BB9154CBEEB', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@c3e4985]}
2020-04-20 10:42:58.969 DEBUG 11880 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 10:42:58.969 DEBUG 11880 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 10:42:58.972 DEBUG 11880 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 10:42:59.051 DEBUG 11880 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id AND b.user_id = ? AND tbtag.blog_id = b.id AND ttag.id = tbtag.tag_id 
2020-04-20 10:42:59.052 DEBUG 11880 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 10:42:59.119 DEBUG 11880 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 10:42:59.121 DEBUG 11880 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t,t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id and b.user_id = ? and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id order by bid LIMIT ? 
2020-04-20 10:42:59.121 DEBUG 11880 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 10:42:59.181 DEBUG 11880 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 10:42:59.184  INFO 11880 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 10:43:13.113  INFO 11880 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/10/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[10, {}]}
2020-04-20 10:43:13.115 DEBUG 11880 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 10:43:13.116 DEBUG 11880 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 10:43:13.118 DEBUG 11880 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 10:43:13.123 DEBUG 11880 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 10:43:13.123 DEBUG 11880 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 10:43:13.125 DEBUG 11880 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 3
2020-04-20 10:43:13.128 DEBUG 11880 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 10:43:13.129 DEBUG 11880 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 10(Long)
2020-04-20 10:43:13.132 DEBUG 11880 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 3
2020-04-20 10:43:13.134  INFO 11880 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 10:43:49.861  INFO 13420 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 13420 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 10:43:49.864 DEBUG 13420 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 10:43:49.864  INFO 13420 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 10:43:49.974  INFO 13420 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 10:43:49.974  INFO 13420 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 10:43:51.208  INFO 13420 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 10:43:51.235  INFO 13420 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 17ms. Found 0 JDBC repository interfaces.
2020-04-20 10:43:52.002  INFO 13420 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 10:43:52.019  INFO 13420 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 10:43:52.020  INFO 13420 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 10:43:52.100  INFO 13420 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 10:43:52.100  INFO 13420 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2126 ms
2020-04-20 10:43:52.738  INFO 13420 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 10:43:52.815  INFO 13420 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 10:43:53.262  INFO 13420 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 10:43:53.308  INFO 13420 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 10:43:53.311  INFO 13420 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.959 seconds (JVM running for 4.931)
2020-04-20 10:43:58.513  INFO 13420 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 10:43:58.513  INFO 13420 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 10:43:58.523  INFO 13420 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-04-20 10:43:58.553  INFO 13420 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 10:43:58.557  INFO 13420 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 10:44:01.911  INFO 13420 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@1ff7ad4e, {}]}
2020-04-20 10:44:01.941  INFO 13420 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 10:44:02.470  INFO 13420 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 10:44:02.475 DEBUG 13420 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 10:44:02.494 DEBUG 13420 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 10:44:02.512 DEBUG 13420 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 10:44:02.519  INFO 13420 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 10:44:03.622  INFO 13420 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@1ff7ad4e]}
2020-04-20 10:44:03.630 DEBUG 13420 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 10:44:03.631 DEBUG 13420 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 10:44:03.636 DEBUG 13420 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 10:44:03.690 DEBUG 13420 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id AND b.user_id = ? AND tbtag.blog_id = b.id AND ttag.id = tbtag.tag_id 
2020-04-20 10:44:03.690 DEBUG 13420 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 10:44:03.693 DEBUG 13420 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 10:44:03.694 DEBUG 13420 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t,t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id and b.user_id = ? and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id order by bid LIMIT ? 
2020-04-20 10:44:03.695 DEBUG 13420 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 10:44:03.705 DEBUG 13420 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 10:44:03.708  INFO 13420 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 10:44:05.471  INFO 13420 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/1/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[1, {}]}
2020-04-20 10:44:05.472 DEBUG 13420 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 10:44:05.473 DEBUG 13420 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 10:44:05.476 DEBUG 13420 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 10:44:05.483 DEBUG 13420 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 10:44:05.484 DEBUG 13420 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 10:44:05.485 DEBUG 13420 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 3
2020-04-20 10:44:05.490 DEBUG 13420 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 10:44:05.491 DEBUG 13420 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 1(Long)
2020-04-20 10:44:05.493 DEBUG 13420 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 10:44:05.495  INFO 13420 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 10:44:52.451  INFO 13140 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 13140 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 10:44:52.453 DEBUG 13140 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 10:44:52.454  INFO 13140 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 10:44:52.541  INFO 13140 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 10:44:52.541  INFO 13140 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 10:44:53.301  INFO 13140 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 10:44:53.321  INFO 13140 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 15ms. Found 0 JDBC repository interfaces.
2020-04-20 10:44:54.012  INFO 13140 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 10:44:54.020  INFO 13140 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 10:44:54.021  INFO 13140 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 10:44:54.111  INFO 13140 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 10:44:54.111  INFO 13140 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1570 ms
2020-04-20 10:44:54.738  INFO 13140 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 10:44:54.836  INFO 13140 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 10:44:55.355  INFO 13140 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 10:44:55.400  INFO 13140 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 10:44:55.403  INFO 13140 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.424 seconds (JVM running for 4.298)
2020-04-20 10:45:05.247  INFO 13140 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 10:45:05.247  INFO 13140 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 10:45:05.267  INFO 13140 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 20 ms
2020-04-20 10:45:05.311  INFO 13140 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 10:45:05.315  INFO 13140 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 10:45:08.711  INFO 13140 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@15f9afeb, {}]}
2020-04-20 10:45:08.740  INFO 13140 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 10:45:09.281  INFO 13140 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 10:45:09.288 DEBUG 13140 --- [http-nio-8080-exec-1] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 10:45:09.307 DEBUG 13140 --- [http-nio-8080-exec-1] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 10:45:09.328 DEBUG 13140 --- [http-nio-8080-exec-1] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 10:45:09.331  INFO 13140 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 10:45:10.282  INFO 13140 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@15f9afeb]}
2020-04-20 10:45:10.294 DEBUG 13140 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 10:45:10.294 DEBUG 13140 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 10:45:10.297 DEBUG 13140 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 10:45:10.348 DEBUG 13140 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id AND b.user_id = ? AND tbtag.blog_id = b.id AND ttag.id = tbtag.tag_id 
2020-04-20 10:45:10.349 DEBUG 13140 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 10:45:10.355 DEBUG 13140 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 10:45:10.357 DEBUG 13140 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t,t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id and b.user_id = ? and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id order by bid LIMIT ? 
2020-04-20 10:45:10.358 DEBUG 13140 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 10:45:10.366 DEBUG 13140 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 10:45:10.370  INFO 13140 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 10:45:11.902  INFO 13140 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/10/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[10, {}]}
2020-04-20 10:45:11.903 DEBUG 13140 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 10:45:11.904 DEBUG 13140 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 10:45:11.907 DEBUG 13140 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 10:45:11.910 DEBUG 13140 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 10:45:11.911 DEBUG 13140 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 10:45:11.912 DEBUG 13140 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 3
2020-04-20 10:45:11.917 DEBUG 13140 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 10:45:11.918 DEBUG 13140 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 10(Long)
2020-04-20 10:45:11.927 DEBUG 13140 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 3
2020-04-20 10:45:11.929  INFO 13140 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 10:46:56.593  INFO 13140 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 10:46:56.595 DEBUG 13140 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 10:46:56.595 DEBUG 13140 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 10:46:56.596 DEBUG 13140 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 10:46:56.597 DEBUG 13140 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 10:46:56.597 DEBUG 13140 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 10:46:56.598 DEBUG 13140 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 3
2020-04-20 10:46:56.599  INFO 13140 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 10:47:07.264  INFO 13140 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.add', args=[Blog{id=null, title='v', content='v', firstPicture='', flag='', views=null, appreciation=false, shareStatement=true, commentAble=false, published=true, recommend=false, creatTime=null, updateTime=null, typeId=36, userId=null, tagIds='4', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}, org.apache.catalina.session.StandardSessionFacade@15f9afeb]}
2020-04-20 10:47:07.267 DEBUG 13140 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 10:47:07.267 DEBUG 13140 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 36(Long)
2020-04-20 10:47:07.269 DEBUG 13140 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 10:47:07.271 DEBUG 13140 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 10:47:07.271 DEBUG 13140 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 4(Long)
2020-04-20 10:47:07.273 DEBUG 13140 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 10:47:07.274 DEBUG 13140 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.addBlog        : ==>  Preparing: insert into t_blog(title,content,firstPicture,flag,views,appreciation,shareStatement,commentAble,published,recommend,creatTime,updateTime,type_id,user_id) values (?,?,?,?,?,?, ?,?,?,?,?, ?,?,?) 
2020-04-20 10:47:07.275 DEBUG 13140 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.addBlog        : ==> Parameters: v(String), v(String), (String), (String), 0(Integer), false(Boolean), true(Boolean), false(Boolean), true(Boolean), false(Boolean), 2020-04-20 10:47:07.274(Timestamp), 2020-04-20 10:47:07.274(Timestamp), 36(Long), 1(Long)
2020-04-20 10:47:07.319 DEBUG 13140 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.addBlog        : <==    Updates: 1
2020-04-20 10:47:07.338 DEBUG 13140 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 10:47:07.339 DEBUG 13140 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 11(Long), 4(Long)
2020-04-20 10:47:07.340 DEBUG 13140 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 10:47:07.491  INFO 13140 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 10:47:07.803  INFO 13140 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@15f9afeb]}
2020-04-20 10:47:07.804 DEBUG 13140 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 10:47:07.804 DEBUG 13140 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 10:47:07.805 DEBUG 13140 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 10:47:07.811 DEBUG 13140 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id AND b.user_id = ? AND tbtag.blog_id = b.id AND ttag.id = tbtag.tag_id 
2020-04-20 10:47:07.811 DEBUG 13140 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 10:47:07.814 DEBUG 13140 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 10:47:07.815 DEBUG 13140 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t,t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id and b.user_id = ? and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id order by bid LIMIT ? 
2020-04-20 10:47:07.815 DEBUG 13140 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 10:47:07.821 DEBUG 13140 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 10:47:07.823  INFO 13140 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 10:47:09.811  INFO 13140 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=2, pageSize=5}, Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=2, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@15f9afeb]}
2020-04-20 10:47:09.818 DEBUG 13140 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id AND b.user_id = ? AND tbtag.blog_id = b.id AND ttag.id = tbtag.tag_id AND b.title LIKE ? 
2020-04-20 10:47:09.818 DEBUG 13140 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %%(String)
2020-04-20 10:47:09.868 DEBUG 13140 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 10:47:09.869 DEBUG 13140 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t,t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id and b.user_id = ? and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id and b.title like ? order by bid LIMIT ?, ? 
2020-04-20 10:47:09.869 DEBUG 13140 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), %%(String), 5(Integer), 5(Integer)
2020-04-20 10:47:09.888 DEBUG 13140 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 10:47:09.890  INFO 13140 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 10:47:10.701  INFO 13140 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=1, pageSize=5}, Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@15f9afeb]}
2020-04-20 10:47:10.705 DEBUG 13140 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id AND b.user_id = ? AND tbtag.blog_id = b.id AND ttag.id = tbtag.tag_id AND b.title LIKE ? 
2020-04-20 10:47:10.705 DEBUG 13140 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %%(String)
2020-04-20 10:47:10.707 DEBUG 13140 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 10:47:10.708 DEBUG 13140 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t,t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id and b.user_id = ? and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id and b.title like ? order by bid LIMIT ? 
2020-04-20 10:47:10.709 DEBUG 13140 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), %%(String), 5(Integer)
2020-04-20 10:47:10.713 DEBUG 13140 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 10:47:10.714  INFO 13140 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 10:47:14.367  INFO 13140 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@15f9afeb]}
2020-04-20 10:47:14.369 DEBUG 13140 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 10:47:14.370 DEBUG 13140 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 10:47:14.371 DEBUG 13140 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 10:47:14.376 DEBUG 13140 --- [http-nio-8080-exec-3] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id AND b.user_id = ? AND tbtag.blog_id = b.id AND ttag.id = tbtag.tag_id 
2020-04-20 10:47:14.377 DEBUG 13140 --- [http-nio-8080-exec-3] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 10:47:14.379 DEBUG 13140 --- [http-nio-8080-exec-3] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 10:47:14.380 DEBUG 13140 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t,t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id and b.user_id = ? and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id order by bid LIMIT ? 
2020-04-20 10:47:14.382 DEBUG 13140 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 10:47:14.386 DEBUG 13140 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 10:47:14.388  INFO 13140 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 10:47:15.542  INFO 13140 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=2, pageSize=5}, Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=2, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@15f9afeb]}
2020-04-20 10:47:15.546 DEBUG 13140 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id AND b.user_id = ? AND tbtag.blog_id = b.id AND ttag.id = tbtag.tag_id AND b.title LIKE ? 
2020-04-20 10:47:15.547 DEBUG 13140 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %%(String)
2020-04-20 10:47:15.548 DEBUG 13140 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 10:47:15.549 DEBUG 13140 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t,t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id and b.user_id = ? and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id and b.title like ? order by bid LIMIT ?, ? 
2020-04-20 10:47:15.549 DEBUG 13140 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), %%(String), 5(Integer), 5(Integer)
2020-04-20 10:47:15.552 DEBUG 13140 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 10:47:15.553  INFO 13140 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 10:47:16.317  INFO 13140 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=1, pageSize=5}, Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@15f9afeb]}
2020-04-20 10:47:16.320 DEBUG 13140 --- [http-nio-8080-exec-3] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id AND b.user_id = ? AND tbtag.blog_id = b.id AND ttag.id = tbtag.tag_id AND b.title LIKE ? 
2020-04-20 10:47:16.320 DEBUG 13140 --- [http-nio-8080-exec-3] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %%(String)
2020-04-20 10:47:16.322 DEBUG 13140 --- [http-nio-8080-exec-3] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 10:47:16.322 DEBUG 13140 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t,t_user u, t_blog_tag tbtag, t_tag ttag WHERE b.type_id = t.id and b.user_id = ? and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id and b.title like ? order by bid LIMIT ? 
2020-04-20 10:47:16.322 DEBUG 13140 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), %%(String), 5(Integer)
2020-04-20 10:47:16.326 DEBUG 13140 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 10:47:16.328  INFO 13140 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 10:52:04.186  INFO 12792 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 12792 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 10:52:04.188 DEBUG 12792 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 10:52:04.189  INFO 12792 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 10:52:04.290  INFO 12792 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 10:52:04.291  INFO 12792 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 10:52:04.875  INFO 12792 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 10:52:04.893  INFO 12792 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 12ms. Found 0 JDBC repository interfaces.
2020-04-20 10:52:05.568  INFO 12792 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 10:52:05.577  INFO 12792 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 10:52:05.578  INFO 12792 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 10:52:05.669  INFO 12792 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 10:52:05.669  INFO 12792 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1378 ms
2020-04-20 10:52:06.328  INFO 12792 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 10:52:06.408  INFO 12792 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 10:52:06.877  INFO 12792 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 10:52:06.926  INFO 12792 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 10:52:06.929  INFO 12792 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.28 seconds (JVM running for 4.365)
2020-04-20 10:52:15.969  INFO 12792 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 10:52:15.970  INFO 12792 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 10:52:15.978  INFO 12792 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-04-20 10:52:16.007  INFO 12792 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 10:52:16.011  INFO 12792 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 10:52:19.053  INFO 12792 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@308b96f5, {}]}
2020-04-20 10:52:19.081  INFO 12792 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 10:52:19.596  INFO 12792 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 10:52:19.602 DEBUG 12792 --- [http-nio-8080-exec-1] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 10:52:19.621 DEBUG 12792 --- [http-nio-8080-exec-1] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 10:52:19.640 DEBUG 12792 --- [http-nio-8080-exec-1] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 10:52:19.645  INFO 12792 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 10:52:20.848  INFO 12792 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@308b96f5]}
2020-04-20 10:52:20.855 DEBUG 12792 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 10:52:20.856 DEBUG 12792 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 10:52:20.858 DEBUG 12792 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 10:52:20.903 DEBUG 12792 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: select count(0) from (select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid) tmp_count 
2020-04-20 10:52:20.904 DEBUG 12792 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 10:52:21.136 ERROR 12792 --- [http-nio-8080-exec-10] c.q.handler.ControllerExceptionHandler   : Request URL : http://localhost:8080/admin/blogs, Exception : {}

org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'from t_blog b,t_type t,t_user u
         WHERE b.type_id = t.id
            and ' at line 20
### The error may exist in file [D:\IdeaProject\my-blog\target\classes\mybatis\config\BlogMapper.xml]
### The error may involve com.qin.mapper.BlogMapper.listBlog-Inline
### The error occurred while setting parameters
### SQL: select count(0) from (select         b.id bid,         b.title btitle,         b.content bcontent,         b.firstPicture bfirstPicture,         b.flag bflag,         b.views bviews,         b.appreciation bappreciation,         b.shareStatement bshareStatement,         b.commentAble bcommentAble,         b.published bpublished,         b.recommend brecommend,         b.creatTime bcreatTime,         b.updateTime bupdateTime,         b.type_id btype_id,         b.user_id buser_id,         t.name tname,         t.id tid,         u.id uid,         from t_blog b,t_type t,t_user u          WHERE b.type_id = t.id             and b.user_id = ?          order by bid) tmp_count
### Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'from t_blog b,t_type t,t_user u
         WHERE b.type_id = t.id
            and ' at line 20
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'from t_blog b,t_type t,t_user u
         WHERE b.type_id = t.id
            and ' at line 20
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:235) ~[spring-jdbc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72) ~[spring-jdbc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:88) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at com.sun.proxy.$Proxy83.selectList(Unknown Source) ~[na:na]
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:144) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85) ~[mybatis-3.5.4.jar:3.5.4]
	at com.sun.proxy.$Proxy84.listBlog(Unknown Source) ~[na:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.sun.proxy.$Proxy85.listBlog(Unknown Source) ~[na:na]
	at com.qin.service.BlogServiceImpl.getPageInfo(BlogServiceImpl.java:47) ~[classes/:na]
	at com.qin.service.BlogServiceImpl.listBlog(BlogServiceImpl.java:41) ~[classes/:na]
	at com.qin.service.BlogServiceImpl$$FastClassBySpringCGLIB$$cb930495.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:99) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.qin.service.BlogServiceImpl$$EnhancerBySpringCGLIB$$e369add5.listBlog(<generated>) ~[classes/:na]
	at com.qin.controller.AdminBlogController.blogs(AdminBlogController.java:60) ~[classes/:na]
	at com.qin.controller.AdminBlogController$$FastClassBySpringCGLIB$$dfdcc7c0.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.qin.controller.AdminBlogController$$EnhancerBySpringCGLIB$$dd2878.blogs(<generated>) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'from t_blog b,t_type t,t_user u
         WHERE b.type_id = t.id
            and ' at line 20
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120) ~[mysql-connector-java-8.0.19.jar:8.0.19]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.19.jar:8.0.19]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-java-8.0.19.jar:8.0.19]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953) ~[mysql-connector-java-8.0.19.jar:8.0.19]
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370) ~[mysql-connector-java-8.0.19.jar:8.0.19]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44) ~[HikariCP-3.4.2.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java) ~[HikariCP-3.4.2.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59) ~[mybatis-3.5.4.jar:3.5.4]
	at com.sun.proxy.$Proxy118.execute(Unknown Source) ~[na:na]
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) ~[mybatis-3.5.4.jar:3.5.4]
	at com.github.pagehelper.util.ExecutorUtil.executeAutoCount(ExecutorUtil.java:138) ~[pagehelper-5.1.11.jar:na]
	at com.github.pagehelper.PageInterceptor.count(PageInterceptor.java:150) ~[pagehelper-5.1.11.jar:na]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:97) ~[pagehelper-5.1.11.jar:na]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.4.jar:3.5.4]
	at com.sun.proxy.$Proxy116.query(Unknown Source) ~[na:na]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.4.jar:3.5.4]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.4.jar:2.0.4]
	... 98 common frames omitted

2020-04-20 10:52:21.138  WARN 12792 --- [http-nio-8080-exec-10] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'from t_blog b,t_type t,t_user u
         WHERE b.type_id = t.id
            and ' at line 20
### The error may exist in file [D:\IdeaProject\my-blog\target\classes\mybatis\config\BlogMapper.xml]
### The error may involve com.qin.mapper.BlogMapper.listBlog-Inline
### The error occurred while setting parameters
### SQL: select count(0) from (select         b.id bid,         b.title btitle,         b.content bcontent,         b.firstPicture bfirstPicture,         b.flag bflag,         b.views bviews,         b.appreciation bappreciation,         b.shareStatement bshareStatement,         b.commentAble bcommentAble,         b.published bpublished,         b.recommend brecommend,         b.creatTime bcreatTime,         b.updateTime bupdateTime,         b.type_id btype_id,         b.user_id buser_id,         t.name tname,         t.id tid,         u.id uid,         from t_blog b,t_type t,t_user u          WHERE b.type_id = t.id             and b.user_id = ?          order by bid) tmp_count
### Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'from t_blog b,t_type t,t_user u
         WHERE b.type_id = t.id
            and ' at line 20
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'from t_blog b,t_type t,t_user u
         WHERE b.type_id = t.id
            and ' at line 20]
2020-04-20 10:53:37.851  INFO 8220 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 8220 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 10:53:37.853 DEBUG 8220 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 10:53:37.853  INFO 8220 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 10:53:37.949  INFO 8220 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 10:53:37.949  INFO 8220 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 10:53:38.618  INFO 8220 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 10:53:38.640  INFO 8220 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 16ms. Found 0 JDBC repository interfaces.
2020-04-20 10:53:39.335  INFO 8220 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 10:53:39.344  INFO 8220 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 10:53:39.344  INFO 8220 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 10:53:39.443  INFO 8220 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 10:53:39.444  INFO 8220 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1495 ms
2020-04-20 10:53:40.089  INFO 8220 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 10:53:40.170  INFO 8220 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 10:53:40.631  INFO 8220 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 10:53:40.677  INFO 8220 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 10:53:40.680  INFO 8220 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.307 seconds (JVM running for 4.39)
2020-04-20 10:53:46.321  INFO 8220 --- [http-nio-8080-exec-6] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 10:53:46.322  INFO 8220 --- [http-nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 10:53:46.333  INFO 8220 --- [http-nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : Completed initialization in 11 ms
2020-04-20 10:53:47.554  INFO 8220 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 10:53:47.561  INFO 8220 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 10:53:50.816  INFO 8220 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@25d6ee84, {}]}
2020-04-20 10:53:50.850  INFO 8220 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 10:53:51.392  INFO 8220 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 10:53:51.397 DEBUG 8220 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 10:53:51.416 DEBUG 8220 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 10:53:51.436 DEBUG 8220 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 10:53:51.443  INFO 8220 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 10:53:52.554  INFO 8220 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@25d6ee84]}
2020-04-20 10:53:52.562 DEBUG 8220 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 10:53:52.562 DEBUG 8220 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 10:53:52.565 DEBUG 8220 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 10:53:52.609 DEBUG 8220 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: select count(0) from (select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid) tmp_count 
2020-04-20 10:53:52.610 DEBUG 8220 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 10:53:52.672 ERROR 8220 --- [http-nio-8080-exec-9] c.q.handler.ControllerExceptionHandler   : Request URL : http://localhost:8080/admin/blogs, Exception : {}

org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'from t_blog b,t_type t,t_user u
         WHERE b.type_id = t.id
            and ' at line 20
### The error may exist in file [D:\IdeaProject\my-blog\target\classes\mybatis\config\BlogMapper.xml]
### The error may involve com.qin.mapper.BlogMapper.listBlog-Inline
### The error occurred while setting parameters
### SQL: select count(0) from (select         b.id bid,         b.title btitle,         b.content bcontent,         b.firstPicture bfirstPicture,         b.flag bflag,         b.views bviews,         b.appreciation bappreciation,         b.shareStatement bshareStatement,         b.commentAble bcommentAble,         b.published bpublished,         b.recommend brecommend,         b.creatTime bcreatTime,         b.updateTime bupdateTime,         b.type_id btype_id,         b.user_id buser_id,         t.name tname,         t.id tid,         u.id uid,         from t_blog b,t_type t,t_user u          WHERE b.type_id = t.id             and b.user_id = ?          order by bid) tmp_count
### Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'from t_blog b,t_type t,t_user u
         WHERE b.type_id = t.id
            and ' at line 20
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'from t_blog b,t_type t,t_user u
         WHERE b.type_id = t.id
            and ' at line 20
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:235) ~[spring-jdbc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72) ~[spring-jdbc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:88) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at com.sun.proxy.$Proxy83.selectList(Unknown Source) ~[na:na]
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:144) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85) ~[mybatis-3.5.4.jar:3.5.4]
	at com.sun.proxy.$Proxy84.listBlog(Unknown Source) ~[na:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.sun.proxy.$Proxy85.listBlog(Unknown Source) ~[na:na]
	at com.qin.service.BlogServiceImpl.getPageInfo(BlogServiceImpl.java:47) ~[classes/:na]
	at com.qin.service.BlogServiceImpl.listBlog(BlogServiceImpl.java:41) ~[classes/:na]
	at com.qin.service.BlogServiceImpl$$FastClassBySpringCGLIB$$cb930495.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:99) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.qin.service.BlogServiceImpl$$EnhancerBySpringCGLIB$$cf161468.listBlog(<generated>) ~[classes/:na]
	at com.qin.controller.AdminBlogController.blogs(AdminBlogController.java:60) ~[classes/:na]
	at com.qin.controller.AdminBlogController$$FastClassBySpringCGLIB$$dfdcc7c0.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.qin.controller.AdminBlogController$$EnhancerBySpringCGLIB$$1056efc8.blogs(<generated>) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'from t_blog b,t_type t,t_user u
         WHERE b.type_id = t.id
            and ' at line 20
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120) ~[mysql-connector-java-8.0.19.jar:8.0.19]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.19.jar:8.0.19]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-java-8.0.19.jar:8.0.19]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953) ~[mysql-connector-java-8.0.19.jar:8.0.19]
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370) ~[mysql-connector-java-8.0.19.jar:8.0.19]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44) ~[HikariCP-3.4.2.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java) ~[HikariCP-3.4.2.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59) ~[mybatis-3.5.4.jar:3.5.4]
	at com.sun.proxy.$Proxy118.execute(Unknown Source) ~[na:na]
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) ~[mybatis-3.5.4.jar:3.5.4]
	at com.github.pagehelper.util.ExecutorUtil.executeAutoCount(ExecutorUtil.java:138) ~[pagehelper-5.1.11.jar:na]
	at com.github.pagehelper.PageInterceptor.count(PageInterceptor.java:150) ~[pagehelper-5.1.11.jar:na]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:97) ~[pagehelper-5.1.11.jar:na]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.4.jar:3.5.4]
	at com.sun.proxy.$Proxy116.query(Unknown Source) ~[na:na]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.4.jar:3.5.4]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.4.jar:2.0.4]
	... 98 common frames omitted

2020-04-20 10:53:52.674  WARN 8220 --- [http-nio-8080-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'from t_blog b,t_type t,t_user u
         WHERE b.type_id = t.id
            and ' at line 20
### The error may exist in file [D:\IdeaProject\my-blog\target\classes\mybatis\config\BlogMapper.xml]
### The error may involve com.qin.mapper.BlogMapper.listBlog-Inline
### The error occurred while setting parameters
### SQL: select count(0) from (select         b.id bid,         b.title btitle,         b.content bcontent,         b.firstPicture bfirstPicture,         b.flag bflag,         b.views bviews,         b.appreciation bappreciation,         b.shareStatement bshareStatement,         b.commentAble bcommentAble,         b.published bpublished,         b.recommend brecommend,         b.creatTime bcreatTime,         b.updateTime bupdateTime,         b.type_id btype_id,         b.user_id buser_id,         t.name tname,         t.id tid,         u.id uid,         from t_blog b,t_type t,t_user u          WHERE b.type_id = t.id             and b.user_id = ?          order by bid) tmp_count
### Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'from t_blog b,t_type t,t_user u
         WHERE b.type_id = t.id
            and ' at line 20
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'from t_blog b,t_type t,t_user u
         WHERE b.type_id = t.id
            and ' at line 20]
2020-04-20 10:58:38.146  INFO 7800 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 7800 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 10:58:38.148 DEBUG 7800 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 10:58:38.149  INFO 7800 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 10:58:38.199  INFO 7800 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 10:58:38.199  INFO 7800 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 10:58:39.085  INFO 7800 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 10:58:39.106  INFO 7800 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 14ms. Found 0 JDBC repository interfaces.
2020-04-20 10:58:39.822  INFO 7800 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 10:58:39.830  INFO 7800 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 10:58:39.830  INFO 7800 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 10:58:39.910  INFO 7800 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 10:58:39.911  INFO 7800 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1712 ms
2020-04-20 10:58:40.565  INFO 7800 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 10:58:40.647  INFO 7800 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 10:58:41.127  INFO 7800 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 10:58:41.170  INFO 7800 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 10:58:41.173  INFO 7800 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.513 seconds (JVM running for 4.458)
2020-04-20 10:59:00.294  INFO 7800 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 10:59:00.294  INFO 7800 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 10:59:00.304  INFO 7800 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-04-20 10:59:00.339  INFO 7800 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 10:59:00.342  INFO 7800 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 10:59:06.828  INFO 7800 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 10:59:06.830  INFO 7800 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 10:59:10.154  INFO 7800 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@100bfe6f, {}]}
2020-04-20 10:59:10.184  INFO 7800 --- [http-nio-8080-exec-10] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 10:59:10.726  INFO 7800 --- [http-nio-8080-exec-10] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 10:59:10.733 DEBUG 7800 --- [http-nio-8080-exec-10] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 10:59:10.757 DEBUG 7800 --- [http-nio-8080-exec-10] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 10:59:10.779 DEBUG 7800 --- [http-nio-8080-exec-10] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 10:59:10.785  INFO 7800 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 10:59:12.054  INFO 7800 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@100bfe6f]}
2020-04-20 10:59:12.065 DEBUG 7800 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 10:59:12.065 DEBUG 7800 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 10:59:12.068 DEBUG 7800 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 10:59:12.142 DEBUG 7800 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 10:59:12.143 DEBUG 7800 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 10:59:12.146 DEBUG 7800 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 10:59:12.148 DEBUG 7800 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 10:59:12.148 DEBUG 7800 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 10:59:12.162 DEBUG 7800 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 10:59:12.164  INFO 7800 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 10:59:14.748  INFO 7800 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=2, pageSize=5}, Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=2, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@100bfe6f]}
2020-04-20 10:59:14.756 DEBUG 7800 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? AND b.title LIKE ? 
2020-04-20 10:59:14.757 DEBUG 7800 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %%(String)
2020-04-20 10:59:14.758 DEBUG 7800 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 10:59:14.759 DEBUG 7800 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? and b.title like ? order by bid LIMIT ?, ? 
2020-04-20 10:59:14.759 DEBUG 7800 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), %%(String), 5(Integer), 5(Integer)
2020-04-20 10:59:14.764 DEBUG 7800 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 10:59:14.765  INFO 7800 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 10:59:16.686  INFO 7800 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=1, pageSize=5}, Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@100bfe6f]}
2020-04-20 10:59:16.690 DEBUG 7800 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? AND b.title LIKE ? 
2020-04-20 10:59:16.691 DEBUG 7800 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %%(String)
2020-04-20 10:59:16.692 DEBUG 7800 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 10:59:16.693 DEBUG 7800 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? and b.title like ? order by bid LIMIT ? 
2020-04-20 10:59:16.694 DEBUG 7800 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), %%(String), 5(Integer)
2020-04-20 10:59:16.703 DEBUG 7800 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 10:59:16.705  INFO 7800 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 10:59:17.214  INFO 7800 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=2, pageSize=5}, Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=2, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@100bfe6f]}
2020-04-20 10:59:17.217 DEBUG 7800 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? AND b.title LIKE ? 
2020-04-20 10:59:17.218 DEBUG 7800 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %%(String)
2020-04-20 10:59:17.219 DEBUG 7800 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 10:59:17.220 DEBUG 7800 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? and b.title like ? order by bid LIMIT ?, ? 
2020-04-20 10:59:17.220 DEBUG 7800 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), %%(String), 5(Integer), 5(Integer)
2020-04-20 10:59:17.227 DEBUG 7800 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 10:59:17.229  INFO 7800 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 10:59:21.492  INFO 7800 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=1, pageSize=5}, Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@100bfe6f]}
2020-04-20 10:59:21.495 DEBUG 7800 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? AND b.title LIKE ? 
2020-04-20 10:59:21.495 DEBUG 7800 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %%(String)
2020-04-20 10:59:21.497 DEBUG 7800 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 10:59:21.497 DEBUG 7800 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? and b.title like ? order by bid LIMIT ? 
2020-04-20 10:59:21.497 DEBUG 7800 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), %%(String), 5(Integer)
2020-04-20 10:59:21.503 DEBUG 7800 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 10:59:21.505  INFO 7800 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 10:59:23.971  INFO 7800 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/4/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[4, {}]}
2020-04-20 10:59:23.972 DEBUG 7800 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 10:59:23.973 DEBUG 7800 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 10:59:23.975 DEBUG 7800 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 10:59:23.977 DEBUG 7800 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 10:59:23.978 DEBUG 7800 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 10:59:23.979 DEBUG 7800 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 3
2020-04-20 10:59:23.982 DEBUG 7800 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 10:59:23.982 DEBUG 7800 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 4(Long)
2020-04-20 10:59:23.983 DEBUG 7800 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 0
2020-04-20 10:59:23.997 ERROR 7800 --- [http-nio-8080-exec-4] c.q.handler.ControllerExceptionHandler   : Request URL : http://localhost:8080/admin/blogs/4/input, Exception : {}

java.lang.NullPointerException: null
	at com.qin.controller.AdminBlogController.update(AdminBlogController.java:83) ~[classes/:na]
	at com.qin.controller.AdminBlogController$$FastClassBySpringCGLIB$$dfdcc7c0.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.qin.controller.AdminBlogController$$EnhancerBySpringCGLIB$$15598ad7.update(<generated>) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]

2020-04-20 10:59:23.998  WARN 7800 --- [http-nio-8080-exec-4] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.NullPointerException]
2020-04-20 11:00:24.364  INFO 15072 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 15072 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 11:00:24.367 DEBUG 15072 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 11:00:24.367  INFO 15072 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 11:00:24.417  INFO 15072 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 11:00:24.418  INFO 15072 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 11:00:25.156  INFO 15072 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 11:00:25.176  INFO 15072 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 14ms. Found 0 JDBC repository interfaces.
2020-04-20 11:00:26.258  INFO 15072 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 11:00:26.270  INFO 15072 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 11:00:26.270  INFO 15072 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 11:00:26.367  INFO 15072 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 11:00:26.367  INFO 15072 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1949 ms
2020-04-20 11:00:27.341  INFO 15072 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 11:00:27.443  INFO 15072 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 11:00:28.098  INFO 15072 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 11:00:28.197  INFO 15072 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 11:00:28.201  INFO 15072 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 4.362 seconds (JVM running for 6.596)
2020-04-20 11:00:31.664  INFO 15072 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 11:00:31.664  INFO 15072 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 11:00:31.678  INFO 15072 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 13 ms
2020-04-20 11:00:31.728  INFO 15072 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 11:00:31.735  INFO 15072 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 11:00:35.314  INFO 15072 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@1a24f876, {}]}
2020-04-20 11:00:35.354  INFO 15072 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 11:00:35.921  INFO 15072 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 11:00:35.932 DEBUG 15072 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 11:00:35.956 DEBUG 15072 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 11:00:35.983 DEBUG 15072 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 11:00:35.988  INFO 15072 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 11:00:37.120  INFO 15072 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@1a24f876]}
2020-04-20 11:00:37.131 DEBUG 15072 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:00:37.131 DEBUG 15072 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:00:37.133 DEBUG 15072 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 11:00:37.199 DEBUG 15072 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:00:37.199 DEBUG 15072 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:00:37.202 DEBUG 15072 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:00:37.203 DEBUG 15072 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 11:00:37.204 DEBUG 15072 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 11:00:37.218 DEBUG 15072 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 11:00:37.222  INFO 15072 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:00:39.359  INFO 15072 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/4/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[4, {}]}
2020-04-20 11:00:39.369 DEBUG 15072 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:00:39.369 DEBUG 15072 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:00:39.371 DEBUG 15072 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 11:00:39.377 DEBUG 15072 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:00:39.378 DEBUG 15072 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:00:39.379 DEBUG 15072 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 3
2020-04-20 11:00:47.252 DEBUG 15072 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:00:47.254 DEBUG 15072 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 4(Long)
2020-04-20 11:00:47.267 DEBUG 15072 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 0
2020-04-20 11:03:04.948  WARN 15072 --- [HikariPool-1 housekeeper] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=2m28s924ms566µs247ns).
2020-04-20 11:03:04.997  INFO 15072 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@1a24f876]}
2020-04-20 11:03:04.999 DEBUG 15072 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:03:05.000 DEBUG 15072 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:03:05.001 DEBUG 15072 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 11:03:05.001 ERROR 15072 --- [http-nio-8080-exec-2] c.q.handler.ControllerExceptionHandler   : Request URL : http://localhost:8080/admin/blogs/4/input, Exception : {}

java.lang.NullPointerException: null
	at com.qin.controller.AdminBlogController.update(AdminBlogController.java:83) ~[classes/:na]
	at com.qin.controller.AdminBlogController$$FastClassBySpringCGLIB$$dfdcc7c0.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.qin.controller.AdminBlogController$$EnhancerBySpringCGLIB$$4291096d.update(<generated>) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]

2020-04-20 11:03:05.003  WARN 15072 --- [http-nio-8080-exec-2] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.NullPointerException]
2020-04-20 11:03:05.009 DEBUG 15072 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:03:05.010 DEBUG 15072 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:03:05.011 DEBUG 15072 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:03:05.012  INFO 15072 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:03:05.233  INFO 15072 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-20 11:03:05.234  INFO 15072 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-04-20 11:03:05.249  INFO 15072 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-04-20 11:03:08.222  INFO 14396 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 14396 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 11:03:08.225 DEBUG 14396 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 11:03:08.225  INFO 14396 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 11:03:08.294  INFO 14396 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 11:03:08.295  INFO 14396 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 11:03:08.935  INFO 14396 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 11:03:08.952  INFO 14396 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 12ms. Found 0 JDBC repository interfaces.
2020-04-20 11:03:09.624  INFO 14396 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 11:03:09.633  INFO 14396 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 11:03:09.633  INFO 14396 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 11:03:09.725  INFO 14396 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 11:03:09.726  INFO 14396 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1431 ms
2020-04-20 11:03:10.402  INFO 14396 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 11:03:10.486  INFO 14396 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 11:03:10.981  INFO 14396 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 11:03:11.033  INFO 14396 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 11:03:11.036  INFO 14396 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.261 seconds (JVM running for 4.591)
2020-04-20 11:03:15.032  INFO 14396 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 11:03:15.032  INFO 14396 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 11:03:15.044  INFO 14396 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 11 ms
2020-04-20 11:03:15.076  INFO 14396 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 11:03:15.080  INFO 14396 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 11:03:18.379  INFO 14396 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@4944b5fe, {}]}
2020-04-20 11:03:18.409  INFO 14396 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 11:03:18.940  INFO 14396 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 11:03:18.946 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 11:03:18.970 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 11:03:18.992 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 11:03:18.996  INFO 14396 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 11:03:20.755  INFO 14396 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@4944b5fe]}
2020-04-20 11:03:20.763 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:03:20.763 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:03:20.766 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 11:03:20.819 DEBUG 14396 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:03:20.820 DEBUG 14396 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:03:20.822 DEBUG 14396 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:03:20.825  INFO 14396 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:03:23.414  INFO 14396 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 11:03:23.418 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:03:23.419 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:03:23.422 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 11:03:23.424 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:03:23.425 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:03:23.426 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 3
2020-04-20 11:03:23.426  INFO 14396 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:03:31.936  INFO 14396 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.list', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:03:31.949 DEBUG 14396 --- [http-nio-8080-exec-10] c.q.mapper.TypeMapper.selectPage_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-20 11:03:31.950 DEBUG 14396 --- [http-nio-8080-exec-10] c.q.mapper.TypeMapper.selectPage_COUNT   : ==> Parameters: 
2020-04-20 11:03:31.951 DEBUG 14396 --- [http-nio-8080-exec-10] c.q.mapper.TypeMapper.selectPage_COUNT   : <==      Total: 1
2020-04-20 11:03:31.951 DEBUG 14396 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.selectPage     : ==>  Preparing: select * from t_type order by id LIMIT ? 
2020-04-20 11:03:31.952 DEBUG 14396 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.selectPage     : ==> Parameters: 10(Integer)
2020-04-20 11:03:31.953 DEBUG 14396 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.selectPage     : <==      Total: 10
2020-04-20 11:03:31.955  INFO 14396 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/types
2020-04-20 11:03:32.549  INFO 14396 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.list', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:03:32.555 DEBUG 14396 --- [http-nio-8080-exec-5] c.qin.mapper.TagMapper.selectPage_COUNT  : ==>  Preparing: SELECT count(0) FROM t_tag 
2020-04-20 11:03:32.555 DEBUG 14396 --- [http-nio-8080-exec-5] c.qin.mapper.TagMapper.selectPage_COUNT  : ==> Parameters: 
2020-04-20 11:03:32.557 DEBUG 14396 --- [http-nio-8080-exec-5] c.qin.mapper.TagMapper.selectPage_COUNT  : <==      Total: 1
2020-04-20 11:03:32.557 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.selectPage      : ==>  Preparing: select * from t_tag order by id LIMIT ? 
2020-04-20 11:03:32.558 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.selectPage      : ==> Parameters: 10(Integer)
2020-04-20 11:03:32.559 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.selectPage      : <==      Total: 3
2020-04-20 11:03:32.560  INFO 14396 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : admin/tags
2020-04-20 11:03:33.859  INFO 14396 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags/3/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.deleteTag', args=[3, {}]}
2020-04-20 11:03:33.862 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.delTag          : ==>  Preparing: delete from t_tag where id=? 
2020-04-20 11:03:33.862 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.delTag          : ==> Parameters: 3(Long)
2020-04-20 11:03:33.868 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.delTag          : <==    Updates: 1
2020-04-20 11:03:34.125  INFO 14396 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : redirect:/admin/tags
2020-04-20 11:03:34.139  INFO 14396 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=删除成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:03:34.141 DEBUG 14396 --- [http-nio-8080-exec-5] c.qin.mapper.TagMapper.selectPage_COUNT  : ==>  Preparing: SELECT count(0) FROM t_tag 
2020-04-20 11:03:34.141 DEBUG 14396 --- [http-nio-8080-exec-5] c.qin.mapper.TagMapper.selectPage_COUNT  : ==> Parameters: 
2020-04-20 11:03:34.142 DEBUG 14396 --- [http-nio-8080-exec-5] c.qin.mapper.TagMapper.selectPage_COUNT  : <==      Total: 1
2020-04-20 11:03:34.143 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.selectPage      : ==>  Preparing: select * from t_tag order by id LIMIT ? 
2020-04-20 11:03:34.143 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.selectPage      : ==> Parameters: 10(Integer)
2020-04-20 11:03:34.144 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.selectPage      : <==      Total: 2
2020-04-20 11:03:34.146  INFO 14396 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : admin/tags
2020-04-20 11:03:35.024  INFO 14396 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags/4/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.deleteTag', args=[4, {}]}
2020-04-20 11:03:35.027 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.delTag          : ==>  Preparing: delete from t_tag where id=? 
2020-04-20 11:03:35.028 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.delTag          : ==> Parameters: 4(Long)
2020-04-20 11:03:35.030 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.delTag          : <==    Updates: 1
2020-04-20 11:03:35.132  INFO 14396 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : redirect:/admin/tags
2020-04-20 11:03:35.136  INFO 14396 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=删除成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:03:35.138 DEBUG 14396 --- [http-nio-8080-exec-5] c.qin.mapper.TagMapper.selectPage_COUNT  : ==>  Preparing: SELECT count(0) FROM t_tag 
2020-04-20 11:03:35.138 DEBUG 14396 --- [http-nio-8080-exec-5] c.qin.mapper.TagMapper.selectPage_COUNT  : ==> Parameters: 
2020-04-20 11:03:35.139 DEBUG 14396 --- [http-nio-8080-exec-5] c.qin.mapper.TagMapper.selectPage_COUNT  : <==      Total: 1
2020-04-20 11:03:35.140 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.selectPage      : ==>  Preparing: select * from t_tag order by id LIMIT ? 
2020-04-20 11:03:35.140 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.selectPage      : ==> Parameters: 10(Integer)
2020-04-20 11:03:35.141 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.selectPage      : <==      Total: 1
2020-04-20 11:03:35.143  INFO 14396 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : admin/tags
2020-04-20 11:03:35.716  INFO 14396 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags/5/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.deleteTag', args=[5, {}]}
2020-04-20 11:03:35.716 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.delTag          : ==>  Preparing: delete from t_tag where id=? 
2020-04-20 11:03:35.717 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.delTag          : ==> Parameters: 5(Long)
2020-04-20 11:03:35.719 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.delTag          : <==    Updates: 1
2020-04-20 11:03:35.901  INFO 14396 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : redirect:/admin/tags
2020-04-20 11:03:35.906  INFO 14396 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=删除成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:03:35.907 DEBUG 14396 --- [http-nio-8080-exec-5] c.qin.mapper.TagMapper.selectPage_COUNT  : ==>  Preparing: SELECT count(0) FROM t_tag 
2020-04-20 11:03:35.907 DEBUG 14396 --- [http-nio-8080-exec-5] c.qin.mapper.TagMapper.selectPage_COUNT  : ==> Parameters: 
2020-04-20 11:03:35.909 DEBUG 14396 --- [http-nio-8080-exec-5] c.qin.mapper.TagMapper.selectPage_COUNT  : <==      Total: 1
2020-04-20 11:03:35.910  INFO 14396 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : admin/tags
2020-04-20 11:03:38.753  INFO 14396 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.toAddTag', args=[{}]}
2020-04-20 11:03:38.753  INFO 14396 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : admin/tags-input
2020-04-20 11:03:44.844  INFO 14396 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.addTag', args=[Tag{id=null, name='java'}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}]}
2020-04-20 11:03:44.846 DEBUG 14396 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTagByName    : ==>  Preparing: select * from t_tag where name = ? 
2020-04-20 11:03:44.846 DEBUG 14396 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTagByName    : ==> Parameters: java(String)
2020-04-20 11:03:44.847 DEBUG 14396 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTagByName    : <==      Total: 0
2020-04-20 11:03:44.848 DEBUG 14396 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.addTag          : ==>  Preparing: insert into t_tag(name) values (?) 
2020-04-20 11:03:44.848 DEBUG 14396 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.addTag          : ==> Parameters: java(String)
2020-04-20 11:03:44.850 DEBUG 14396 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.addTag          : <==    Updates: 1
2020-04-20 11:03:45.056  INFO 14396 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : redirect:/admin/tags
2020-04-20 11:03:45.062  INFO 14396 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=操作成功!, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:03:45.063 DEBUG 14396 --- [http-nio-8080-exec-10] c.qin.mapper.TagMapper.selectPage_COUNT  : ==>  Preparing: SELECT count(0) FROM t_tag 
2020-04-20 11:03:45.063 DEBUG 14396 --- [http-nio-8080-exec-10] c.qin.mapper.TagMapper.selectPage_COUNT  : ==> Parameters: 
2020-04-20 11:03:45.065 DEBUG 14396 --- [http-nio-8080-exec-10] c.qin.mapper.TagMapper.selectPage_COUNT  : <==      Total: 1
2020-04-20 11:03:45.066 DEBUG 14396 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.selectPage      : ==>  Preparing: select * from t_tag order by id LIMIT ? 
2020-04-20 11:03:45.066 DEBUG 14396 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.selectPage      : ==> Parameters: 10(Integer)
2020-04-20 11:03:45.068 DEBUG 14396 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.selectPage      : <==      Total: 1
2020-04-20 11:03:45.069  INFO 14396 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/tags
2020-04-20 11:03:46.673  INFO 14396 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.toAddTag', args=[{}]}
2020-04-20 11:03:46.674  INFO 14396 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/tags-input
2020-04-20 11:03:49.123  INFO 14396 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.addTag', args=[Tag{id=null, name='python'}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}]}
2020-04-20 11:03:49.125 DEBUG 14396 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTagByName    : ==>  Preparing: select * from t_tag where name = ? 
2020-04-20 11:03:49.125 DEBUG 14396 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTagByName    : ==> Parameters: python(String)
2020-04-20 11:03:49.126 DEBUG 14396 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTagByName    : <==      Total: 0
2020-04-20 11:03:49.127 DEBUG 14396 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.addTag          : ==>  Preparing: insert into t_tag(name) values (?) 
2020-04-20 11:03:49.128 DEBUG 14396 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.addTag          : ==> Parameters: python(String)
2020-04-20 11:03:49.129 DEBUG 14396 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.addTag          : <==    Updates: 1
2020-04-20 11:03:49.347  INFO 14396 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : redirect:/admin/tags
2020-04-20 11:03:49.352  INFO 14396 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=操作成功!, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:03:49.353 DEBUG 14396 --- [http-nio-8080-exec-3] c.qin.mapper.TagMapper.selectPage_COUNT  : ==>  Preparing: SELECT count(0) FROM t_tag 
2020-04-20 11:03:49.354 DEBUG 14396 --- [http-nio-8080-exec-3] c.qin.mapper.TagMapper.selectPage_COUNT  : ==> Parameters: 
2020-04-20 11:03:49.355 DEBUG 14396 --- [http-nio-8080-exec-3] c.qin.mapper.TagMapper.selectPage_COUNT  : <==      Total: 1
2020-04-20 11:03:49.356 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.selectPage      : ==>  Preparing: select * from t_tag order by id LIMIT ? 
2020-04-20 11:03:49.356 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.selectPage      : ==> Parameters: 10(Integer)
2020-04-20 11:03:49.357 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.selectPage      : <==      Total: 2
2020-04-20 11:03:49.364  INFO 14396 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : admin/tags
2020-04-20 11:03:50.882  INFO 14396 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.toAddTag', args=[{}]}
2020-04-20 11:03:50.883  INFO 14396 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : admin/tags-input
2020-04-20 11:04:00.319  INFO 14396 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.addTag', args=[Tag{id=null, name='spring'}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}]}
2020-04-20 11:04:00.322 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.getTagByName    : ==>  Preparing: select * from t_tag where name = ? 
2020-04-20 11:04:00.323 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.getTagByName    : ==> Parameters: spring(String)
2020-04-20 11:04:00.324 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.getTagByName    : <==      Total: 0
2020-04-20 11:04:00.325 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.addTag          : ==>  Preparing: insert into t_tag(name) values (?) 
2020-04-20 11:04:00.325 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.addTag          : ==> Parameters: spring(String)
2020-04-20 11:04:00.329 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.addTag          : <==    Updates: 1
2020-04-20 11:04:00.658  INFO 14396 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : redirect:/admin/tags
2020-04-20 11:04:00.661  INFO 14396 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=操作成功!, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:04:00.662 DEBUG 14396 --- [http-nio-8080-exec-1] c.qin.mapper.TagMapper.selectPage_COUNT  : ==>  Preparing: SELECT count(0) FROM t_tag 
2020-04-20 11:04:00.663 DEBUG 14396 --- [http-nio-8080-exec-1] c.qin.mapper.TagMapper.selectPage_COUNT  : ==> Parameters: 
2020-04-20 11:04:00.664 DEBUG 14396 --- [http-nio-8080-exec-1] c.qin.mapper.TagMapper.selectPage_COUNT  : <==      Total: 1
2020-04-20 11:04:00.664 DEBUG 14396 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.selectPage      : ==>  Preparing: select * from t_tag order by id LIMIT ? 
2020-04-20 11:04:00.664 DEBUG 14396 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.selectPage      : ==> Parameters: 10(Integer)
2020-04-20 11:04:00.665 DEBUG 14396 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.selectPage      : <==      Total: 3
2020-04-20 11:04:00.667  INFO 14396 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/tags
2020-04-20 11:04:01.851  INFO 14396 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.toAddTag', args=[{}]}
2020-04-20 11:04:01.852  INFO 14396 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/tags-input
2020-04-20 11:04:07.990  INFO 14396 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.addTag', args=[Tag{id=null, name='spring boot'}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}]}
2020-04-20 11:04:07.993 DEBUG 14396 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagByName    : ==>  Preparing: select * from t_tag where name = ? 
2020-04-20 11:04:07.993 DEBUG 14396 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagByName    : ==> Parameters: spring boot(String)
2020-04-20 11:04:07.996 DEBUG 14396 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagByName    : <==      Total: 0
2020-04-20 11:04:07.998 DEBUG 14396 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.addTag          : ==>  Preparing: insert into t_tag(name) values (?) 
2020-04-20 11:04:07.998 DEBUG 14396 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.addTag          : ==> Parameters: spring boot(String)
2020-04-20 11:04:07.999 DEBUG 14396 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.addTag          : <==    Updates: 1
2020-04-20 11:04:08.164  INFO 14396 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : redirect:/admin/tags
2020-04-20 11:04:08.168  INFO 14396 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=操作成功!, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:04:08.169 DEBUG 14396 --- [http-nio-8080-exec-7] c.qin.mapper.TagMapper.selectPage_COUNT  : ==>  Preparing: SELECT count(0) FROM t_tag 
2020-04-20 11:04:08.170 DEBUG 14396 --- [http-nio-8080-exec-7] c.qin.mapper.TagMapper.selectPage_COUNT  : ==> Parameters: 
2020-04-20 11:04:08.170 DEBUG 14396 --- [http-nio-8080-exec-7] c.qin.mapper.TagMapper.selectPage_COUNT  : <==      Total: 1
2020-04-20 11:04:08.171 DEBUG 14396 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.selectPage      : ==>  Preparing: select * from t_tag order by id LIMIT ? 
2020-04-20 11:04:08.171 DEBUG 14396 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.selectPage      : ==> Parameters: 10(Integer)
2020-04-20 11:04:08.172 DEBUG 14396 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.selectPage      : <==      Total: 4
2020-04-20 11:04:08.174  INFO 14396 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : return : admin/tags
2020-04-20 11:04:14.240  INFO 14396 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@4944b5fe]}
2020-04-20 11:04:14.243 DEBUG 14396 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:04:14.243 DEBUG 14396 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:04:14.247 DEBUG 14396 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 12
2020-04-20 11:04:14.253 DEBUG 14396 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:04:14.253 DEBUG 14396 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:04:14.262 DEBUG 14396 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:04:14.263  INFO 14396 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:04:16.432  INFO 14396 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.list', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:04:16.435 DEBUG 14396 --- [http-nio-8080-exec-7] c.q.mapper.TypeMapper.selectPage_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-20 11:04:16.436 DEBUG 14396 --- [http-nio-8080-exec-7] c.q.mapper.TypeMapper.selectPage_COUNT   : ==> Parameters: 
2020-04-20 11:04:16.439 DEBUG 14396 --- [http-nio-8080-exec-7] c.q.mapper.TypeMapper.selectPage_COUNT   : <==      Total: 1
2020-04-20 11:04:16.440 DEBUG 14396 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.selectPage     : ==>  Preparing: select * from t_type order by id LIMIT ? 
2020-04-20 11:04:16.440 DEBUG 14396 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.selectPage     : ==> Parameters: 10(Integer)
2020-04-20 11:04:16.441 DEBUG 14396 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.selectPage     : <==      Total: 10
2020-04-20 11:04:16.445  INFO 14396 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : return : admin/types
2020-04-20 11:04:18.355  INFO 14396 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types/30/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.deleteType', args=[30, {}]}
2020-04-20 11:04:18.358 DEBUG 14396 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.delType        : ==>  Preparing: delete from t_type where id=? 
2020-04-20 11:04:18.359 DEBUG 14396 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.delType        : ==> Parameters: 30(Long)
2020-04-20 11:04:18.360 DEBUG 14396 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.delType        : <==    Updates: 1
2020-04-20 11:04:18.552  INFO 14396 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : return : redirect:/admin/types
2020-04-20 11:04:18.557  INFO 14396 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=删除成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:04:18.559 DEBUG 14396 --- [http-nio-8080-exec-2] c.q.mapper.TypeMapper.selectPage_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-20 11:04:18.559 DEBUG 14396 --- [http-nio-8080-exec-2] c.q.mapper.TypeMapper.selectPage_COUNT   : ==> Parameters: 
2020-04-20 11:04:18.560 DEBUG 14396 --- [http-nio-8080-exec-2] c.q.mapper.TypeMapper.selectPage_COUNT   : <==      Total: 1
2020-04-20 11:04:18.561 DEBUG 14396 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.selectPage     : ==>  Preparing: select * from t_type order by id LIMIT ? 
2020-04-20 11:04:18.561 DEBUG 14396 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.selectPage     : ==> Parameters: 10(Integer)
2020-04-20 11:04:18.562 DEBUG 14396 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.selectPage     : <==      Total: 10
2020-04-20 11:04:18.563  INFO 14396 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : admin/types
2020-04-20 11:04:19.501  INFO 14396 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types/31/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.deleteType', args=[31, {}]}
2020-04-20 11:04:19.503 DEBUG 14396 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.delType        : ==>  Preparing: delete from t_type where id=? 
2020-04-20 11:04:19.504 DEBUG 14396 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.delType        : ==> Parameters: 31(Long)
2020-04-20 11:04:19.505 DEBUG 14396 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.delType        : <==    Updates: 1
2020-04-20 11:04:19.773  INFO 14396 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : redirect:/admin/types
2020-04-20 11:04:19.776  INFO 14396 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=删除成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:04:19.778 DEBUG 14396 --- [http-nio-8080-exec-3] c.q.mapper.TypeMapper.selectPage_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-20 11:04:19.778 DEBUG 14396 --- [http-nio-8080-exec-3] c.q.mapper.TypeMapper.selectPage_COUNT   : ==> Parameters: 
2020-04-20 11:04:19.779 DEBUG 14396 --- [http-nio-8080-exec-3] c.q.mapper.TypeMapper.selectPage_COUNT   : <==      Total: 1
2020-04-20 11:04:19.779 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.selectPage     : ==>  Preparing: select * from t_type order by id LIMIT ? 
2020-04-20 11:04:19.779 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.selectPage     : ==> Parameters: 10(Integer)
2020-04-20 11:04:19.780 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.selectPage     : <==      Total: 10
2020-04-20 11:04:19.781  INFO 14396 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : admin/types
2020-04-20 11:04:20.331  INFO 14396 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types/32/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.deleteType', args=[32, {}]}
2020-04-20 11:04:20.332 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.delType        : ==>  Preparing: delete from t_type where id=? 
2020-04-20 11:04:20.332 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.delType        : ==> Parameters: 32(Long)
2020-04-20 11:04:20.334 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.delType        : <==    Updates: 1
2020-04-20 11:04:20.469  INFO 14396 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : redirect:/admin/types
2020-04-20 11:04:20.472  INFO 14396 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=删除成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:04:20.474 DEBUG 14396 --- [http-nio-8080-exec-10] c.q.mapper.TypeMapper.selectPage_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-20 11:04:20.475 DEBUG 14396 --- [http-nio-8080-exec-10] c.q.mapper.TypeMapper.selectPage_COUNT   : ==> Parameters: 
2020-04-20 11:04:20.475 DEBUG 14396 --- [http-nio-8080-exec-10] c.q.mapper.TypeMapper.selectPage_COUNT   : <==      Total: 1
2020-04-20 11:04:20.476 DEBUG 14396 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.selectPage     : ==>  Preparing: select * from t_type order by id LIMIT ? 
2020-04-20 11:04:20.476 DEBUG 14396 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.selectPage     : ==> Parameters: 10(Integer)
2020-04-20 11:04:20.477 DEBUG 14396 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.selectPage     : <==      Total: 9
2020-04-20 11:04:20.478  INFO 14396 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/types
2020-04-20 11:04:21.241  INFO 14396 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types/33/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.deleteType', args=[33, {}]}
2020-04-20 11:04:21.243 DEBUG 14396 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.delType        : ==>  Preparing: delete from t_type where id=? 
2020-04-20 11:04:21.243 DEBUG 14396 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.delType        : ==> Parameters: 33(Long)
2020-04-20 11:04:21.244 DEBUG 14396 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.delType        : <==    Updates: 1
2020-04-20 11:04:21.383  INFO 14396 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : redirect:/admin/types
2020-04-20 11:04:21.387  INFO 14396 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=删除成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:04:21.388 DEBUG 14396 --- [http-nio-8080-exec-6] c.q.mapper.TypeMapper.selectPage_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-20 11:04:21.388 DEBUG 14396 --- [http-nio-8080-exec-6] c.q.mapper.TypeMapper.selectPage_COUNT   : ==> Parameters: 
2020-04-20 11:04:21.390 DEBUG 14396 --- [http-nio-8080-exec-6] c.q.mapper.TypeMapper.selectPage_COUNT   : <==      Total: 1
2020-04-20 11:04:21.391 DEBUG 14396 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.selectPage     : ==>  Preparing: select * from t_type order by id LIMIT ? 
2020-04-20 11:04:21.391 DEBUG 14396 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.selectPage     : ==> Parameters: 10(Integer)
2020-04-20 11:04:21.392 DEBUG 14396 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.selectPage     : <==      Total: 8
2020-04-20 11:04:21.394  INFO 14396 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : admin/types
2020-04-20 11:04:22.719  INFO 14396 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types/34/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.deleteType', args=[34, {}]}
2020-04-20 11:04:22.721 DEBUG 14396 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.delType        : ==>  Preparing: delete from t_type where id=? 
2020-04-20 11:04:22.722 DEBUG 14396 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.delType        : ==> Parameters: 34(Long)
2020-04-20 11:04:22.723 DEBUG 14396 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.delType        : <==    Updates: 1
2020-04-20 11:04:23.036  INFO 14396 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : redirect:/admin/types
2020-04-20 11:04:23.040  INFO 14396 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=删除成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:04:23.041 DEBUG 14396 --- [http-nio-8080-exec-9] c.q.mapper.TypeMapper.selectPage_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-20 11:04:23.042 DEBUG 14396 --- [http-nio-8080-exec-9] c.q.mapper.TypeMapper.selectPage_COUNT   : ==> Parameters: 
2020-04-20 11:04:23.043 DEBUG 14396 --- [http-nio-8080-exec-9] c.q.mapper.TypeMapper.selectPage_COUNT   : <==      Total: 1
2020-04-20 11:04:23.043 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.selectPage     : ==>  Preparing: select * from t_type order by id LIMIT ? 
2020-04-20 11:04:23.043 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.selectPage     : ==> Parameters: 10(Integer)
2020-04-20 11:04:23.044 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.selectPage     : <==      Total: 7
2020-04-20 11:04:23.046  INFO 14396 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/types
2020-04-20 11:04:24.130  INFO 14396 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types/35/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.deleteType', args=[35, {}]}
2020-04-20 11:04:24.134 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.delType        : ==>  Preparing: delete from t_type where id=? 
2020-04-20 11:04:24.135 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.delType        : ==> Parameters: 35(Long)
2020-04-20 11:04:24.137 DEBUG 14396 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.delType        : <==    Updates: 1
2020-04-20 11:04:24.265  INFO 14396 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : redirect:/admin/types
2020-04-20 11:04:24.269  INFO 14396 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=删除成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:04:24.271 DEBUG 14396 --- [http-nio-8080-exec-8] c.q.mapper.TypeMapper.selectPage_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-20 11:04:24.271 DEBUG 14396 --- [http-nio-8080-exec-8] c.q.mapper.TypeMapper.selectPage_COUNT   : ==> Parameters: 
2020-04-20 11:04:24.272 DEBUG 14396 --- [http-nio-8080-exec-8] c.q.mapper.TypeMapper.selectPage_COUNT   : <==      Total: 1
2020-04-20 11:04:24.273 DEBUG 14396 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.selectPage     : ==>  Preparing: select * from t_type order by id LIMIT ? 
2020-04-20 11:04:24.273 DEBUG 14396 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.selectPage     : ==> Parameters: 10(Integer)
2020-04-20 11:04:24.274 DEBUG 14396 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.selectPage     : <==      Total: 6
2020-04-20 11:04:24.275  INFO 14396 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/types
2020-04-20 11:04:24.890  INFO 14396 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types/36/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.deleteType', args=[36, {}]}
2020-04-20 11:04:24.892 DEBUG 14396 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.delType        : ==>  Preparing: delete from t_type where id=? 
2020-04-20 11:04:24.892 DEBUG 14396 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.delType        : ==> Parameters: 36(Long)
2020-04-20 11:04:24.893 DEBUG 14396 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.delType        : <==    Updates: 1
2020-04-20 11:04:25.036  INFO 14396 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : redirect:/admin/types
2020-04-20 11:04:25.040  INFO 14396 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=删除成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:04:25.041 DEBUG 14396 --- [http-nio-8080-exec-4] c.q.mapper.TypeMapper.selectPage_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-20 11:04:25.041 DEBUG 14396 --- [http-nio-8080-exec-4] c.q.mapper.TypeMapper.selectPage_COUNT   : ==> Parameters: 
2020-04-20 11:04:25.042 DEBUG 14396 --- [http-nio-8080-exec-4] c.q.mapper.TypeMapper.selectPage_COUNT   : <==      Total: 1
2020-04-20 11:04:25.042 DEBUG 14396 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.selectPage     : ==>  Preparing: select * from t_type order by id LIMIT ? 
2020-04-20 11:04:25.043 DEBUG 14396 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.selectPage     : ==> Parameters: 10(Integer)
2020-04-20 11:04:25.044 DEBUG 14396 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.selectPage     : <==      Total: 5
2020-04-20 11:04:25.045  INFO 14396 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : admin/types
2020-04-20 11:04:25.471  INFO 14396 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types/37/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.deleteType', args=[37, {}]}
2020-04-20 11:04:25.472 DEBUG 14396 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.delType        : ==>  Preparing: delete from t_type where id=? 
2020-04-20 11:04:25.473 DEBUG 14396 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.delType        : ==> Parameters: 37(Long)
2020-04-20 11:04:25.474 DEBUG 14396 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.delType        : <==    Updates: 1
2020-04-20 11:04:25.620  INFO 14396 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : redirect:/admin/types
2020-04-20 11:04:25.624  INFO 14396 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=删除成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:04:25.625 DEBUG 14396 --- [http-nio-8080-exec-3] c.q.mapper.TypeMapper.selectPage_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-20 11:04:25.625 DEBUG 14396 --- [http-nio-8080-exec-3] c.q.mapper.TypeMapper.selectPage_COUNT   : ==> Parameters: 
2020-04-20 11:04:25.626 DEBUG 14396 --- [http-nio-8080-exec-3] c.q.mapper.TypeMapper.selectPage_COUNT   : <==      Total: 1
2020-04-20 11:04:25.626 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.selectPage     : ==>  Preparing: select * from t_type order by id LIMIT ? 
2020-04-20 11:04:25.626 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.selectPage     : ==> Parameters: 10(Integer)
2020-04-20 11:04:25.627 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.selectPage     : <==      Total: 4
2020-04-20 11:04:25.628  INFO 14396 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : admin/types
2020-04-20 11:04:26.023  INFO 14396 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types/38/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.deleteType', args=[38, {}]}
2020-04-20 11:04:26.024 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.delType        : ==>  Preparing: delete from t_type where id=? 
2020-04-20 11:04:26.025 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.delType        : ==> Parameters: 38(Long)
2020-04-20 11:04:26.026 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.delType        : <==    Updates: 1
2020-04-20 11:04:26.158  INFO 14396 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : redirect:/admin/types
2020-04-20 11:04:26.162  INFO 14396 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=删除成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:04:26.163 DEBUG 14396 --- [http-nio-8080-exec-10] c.q.mapper.TypeMapper.selectPage_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-20 11:04:26.163 DEBUG 14396 --- [http-nio-8080-exec-10] c.q.mapper.TypeMapper.selectPage_COUNT   : ==> Parameters: 
2020-04-20 11:04:26.164 DEBUG 14396 --- [http-nio-8080-exec-10] c.q.mapper.TypeMapper.selectPage_COUNT   : <==      Total: 1
2020-04-20 11:04:26.164 DEBUG 14396 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.selectPage     : ==>  Preparing: select * from t_type order by id LIMIT ? 
2020-04-20 11:04:26.164 DEBUG 14396 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.selectPage     : ==> Parameters: 10(Integer)
2020-04-20 11:04:26.165 DEBUG 14396 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.selectPage     : <==      Total: 3
2020-04-20 11:04:26.166  INFO 14396 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/types
2020-04-20 11:04:26.540  INFO 14396 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types/39/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.deleteType', args=[39, {}]}
2020-04-20 11:04:26.541 DEBUG 14396 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.delType        : ==>  Preparing: delete from t_type where id=? 
2020-04-20 11:04:26.541 DEBUG 14396 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.delType        : ==> Parameters: 39(Long)
2020-04-20 11:04:26.542 DEBUG 14396 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.delType        : <==    Updates: 1
2020-04-20 11:04:26.684  INFO 14396 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : redirect:/admin/types
2020-04-20 11:04:26.688  INFO 14396 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=删除成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:04:26.690 DEBUG 14396 --- [http-nio-8080-exec-5] c.q.mapper.TypeMapper.selectPage_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-20 11:04:26.690 DEBUG 14396 --- [http-nio-8080-exec-5] c.q.mapper.TypeMapper.selectPage_COUNT   : ==> Parameters: 
2020-04-20 11:04:26.691 DEBUG 14396 --- [http-nio-8080-exec-5] c.q.mapper.TypeMapper.selectPage_COUNT   : <==      Total: 1
2020-04-20 11:04:26.691 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.selectPage     : ==>  Preparing: select * from t_type order by id LIMIT ? 
2020-04-20 11:04:26.691 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.selectPage     : ==> Parameters: 10(Integer)
2020-04-20 11:04:26.692 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.selectPage     : <==      Total: 2
2020-04-20 11:04:26.693  INFO 14396 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : admin/types
2020-04-20 11:04:27.008  INFO 14396 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types/40/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.deleteType', args=[40, {}]}
2020-04-20 11:04:27.009 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.delType        : ==>  Preparing: delete from t_type where id=? 
2020-04-20 11:04:27.010 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.delType        : ==> Parameters: 40(Long)
2020-04-20 11:04:27.011 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.delType        : <==    Updates: 1
2020-04-20 11:04:27.154  INFO 14396 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : redirect:/admin/types
2020-04-20 11:04:27.158  INFO 14396 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=删除成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:04:27.159 DEBUG 14396 --- [http-nio-8080-exec-1] c.q.mapper.TypeMapper.selectPage_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-20 11:04:27.159 DEBUG 14396 --- [http-nio-8080-exec-1] c.q.mapper.TypeMapper.selectPage_COUNT   : ==> Parameters: 
2020-04-20 11:04:27.160 DEBUG 14396 --- [http-nio-8080-exec-1] c.q.mapper.TypeMapper.selectPage_COUNT   : <==      Total: 1
2020-04-20 11:04:27.160 DEBUG 14396 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.selectPage     : ==>  Preparing: select * from t_type order by id LIMIT ? 
2020-04-20 11:04:27.161 DEBUG 14396 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.selectPage     : ==> Parameters: 10(Integer)
2020-04-20 11:04:27.161 DEBUG 14396 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.selectPage     : <==      Total: 1
2020-04-20 11:04:27.162  INFO 14396 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/types
2020-04-20 11:04:27.594  INFO 14396 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types/41/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.deleteType', args=[41, {}]}
2020-04-20 11:04:27.596 DEBUG 14396 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.delType        : ==>  Preparing: delete from t_type where id=? 
2020-04-20 11:04:27.596 DEBUG 14396 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.delType        : ==> Parameters: 41(Long)
2020-04-20 11:04:27.597 DEBUG 14396 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.delType        : <==    Updates: 1
2020-04-20 11:04:27.736  INFO 14396 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : redirect:/admin/types
2020-04-20 11:04:27.741  INFO 14396 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=删除成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:04:27.742 DEBUG 14396 --- [http-nio-8080-exec-9] c.q.mapper.TypeMapper.selectPage_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-20 11:04:27.743 DEBUG 14396 --- [http-nio-8080-exec-9] c.q.mapper.TypeMapper.selectPage_COUNT   : ==> Parameters: 
2020-04-20 11:04:27.744 DEBUG 14396 --- [http-nio-8080-exec-9] c.q.mapper.TypeMapper.selectPage_COUNT   : <==      Total: 1
2020-04-20 11:04:27.745  INFO 14396 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/types
2020-04-20 11:04:28.717  INFO 14396 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.toAddType', args=[{}]}
2020-04-20 11:04:28.717  INFO 14396 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/types-input
2020-04-20 11:04:34.793  INFO 14396 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.addType', args=[Type{id=null, name='学习笔记'}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}]}
2020-04-20 11:04:34.795 DEBUG 14396 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getTypeByName  : ==>  Preparing: select * from t_type where name = ? 
2020-04-20 11:04:34.795 DEBUG 14396 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getTypeByName  : ==> Parameters: 学习笔记(String)
2020-04-20 11:04:34.829 DEBUG 14396 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getTypeByName  : <==      Total: 0
2020-04-20 11:04:34.830 DEBUG 14396 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.addType        : ==>  Preparing: insert into t_type(name) values (?) 
2020-04-20 11:04:34.830 DEBUG 14396 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.addType        : ==> Parameters: 学习笔记(String)
2020-04-20 11:04:34.832 DEBUG 14396 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.addType        : <==    Updates: 1
2020-04-20 11:04:34.954  INFO 14396 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : redirect:/admin/types
2020-04-20 11:04:34.958  INFO 14396 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=操作成功!, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:04:34.960 DEBUG 14396 --- [http-nio-8080-exec-6] c.q.mapper.TypeMapper.selectPage_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-20 11:04:34.960 DEBUG 14396 --- [http-nio-8080-exec-6] c.q.mapper.TypeMapper.selectPage_COUNT   : ==> Parameters: 
2020-04-20 11:04:34.960 DEBUG 14396 --- [http-nio-8080-exec-6] c.q.mapper.TypeMapper.selectPage_COUNT   : <==      Total: 1
2020-04-20 11:04:34.960 DEBUG 14396 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.selectPage     : ==>  Preparing: select * from t_type order by id LIMIT ? 
2020-04-20 11:04:34.960 DEBUG 14396 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.selectPage     : ==> Parameters: 10(Integer)
2020-04-20 11:04:34.961 DEBUG 14396 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.selectPage     : <==      Total: 1
2020-04-20 11:04:34.962  INFO 14396 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : admin/types
2020-04-20 11:04:36.391  INFO 14396 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.toAddType', args=[{}]}
2020-04-20 11:04:36.392  INFO 14396 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : admin/types-input
2020-04-20 11:04:44.647  INFO 14396 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.addType', args=[Type{id=null, name='人生感悟'}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}]}
2020-04-20 11:04:44.650 DEBUG 14396 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getTypeByName  : ==>  Preparing: select * from t_type where name = ? 
2020-04-20 11:04:44.651 DEBUG 14396 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getTypeByName  : ==> Parameters: 人生感悟(String)
2020-04-20 11:04:44.652 DEBUG 14396 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getTypeByName  : <==      Total: 0
2020-04-20 11:04:44.653 DEBUG 14396 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.addType        : ==>  Preparing: insert into t_type(name) values (?) 
2020-04-20 11:04:44.653 DEBUG 14396 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.addType        : ==> Parameters: 人生感悟(String)
2020-04-20 11:04:44.654 DEBUG 14396 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.addType        : <==    Updates: 1
2020-04-20 11:04:44.922  INFO 14396 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : redirect:/admin/types
2020-04-20 11:04:44.927  INFO 14396 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.list', args=[PageRequest{pageNum=0, pageSize=0}, {message=操作成功!, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 11:04:44.928 DEBUG 14396 --- [http-nio-8080-exec-3] c.q.mapper.TypeMapper.selectPage_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-20 11:04:44.928 DEBUG 14396 --- [http-nio-8080-exec-3] c.q.mapper.TypeMapper.selectPage_COUNT   : ==> Parameters: 
2020-04-20 11:04:44.929 DEBUG 14396 --- [http-nio-8080-exec-3] c.q.mapper.TypeMapper.selectPage_COUNT   : <==      Total: 1
2020-04-20 11:04:44.930 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.selectPage     : ==>  Preparing: select * from t_type order by id LIMIT ? 
2020-04-20 11:04:44.930 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.selectPage     : ==> Parameters: 10(Integer)
2020-04-20 11:04:44.931 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.selectPage     : <==      Total: 2
2020-04-20 11:04:44.932  INFO 14396 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : admin/types
2020-04-20 11:04:46.376  INFO 14396 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@4944b5fe]}
2020-04-20 11:04:46.378 DEBUG 14396 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:04:46.379 DEBUG 14396 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:04:46.382 DEBUG 14396 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:04:46.385 DEBUG 14396 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:04:46.385 DEBUG 14396 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:04:46.386 DEBUG 14396 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:04:46.387  INFO 14396 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:04:47.522  INFO 14396 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 11:04:47.524 DEBUG 14396 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:04:47.524 DEBUG 14396 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:04:47.525 DEBUG 14396 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:04:47.526 DEBUG 14396 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:04:47.526 DEBUG 14396 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:04:47.527 DEBUG 14396 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:04:47.529  INFO 14396 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:05:37.244  INFO 14396 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.add', args=[Blog{id=null, title='平时日记', content='

# Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync', firstPicture='', flag='', views=null, appreciation=true, shareStatement=true, commentAble=true, published=true, recommend=true, creatTime=null, updateTime=null, typeId=42, userId=null, tagIds='6,8,9', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}, org.apache.catalina.session.StandardSessionFacade@4944b5fe]}
2020-04-20 11:05:37.249 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 11:05:37.249 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 42(Long)
2020-04-20 11:05:37.250 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 11:05:37.252 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:05:37.252 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 6(Long)
2020-04-20 11:05:37.253 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:05:37.254 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:05:37.254 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 8(Long)
2020-04-20 11:05:37.255 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:05:37.255 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:05:37.255 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 9(Long)
2020-04-20 11:05:37.257 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:05:37.260 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.addBlog        : ==>  Preparing: insert into t_blog(title,content,firstPicture,flag,views,appreciation,shareStatement,commentAble,published,recommend,creatTime,updateTime,type_id,user_id) values (?,?,?,?,?,?, ?,?,?,?,?, ?,?,?) 
2020-04-20 11:05:37.264 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.addBlog        : ==> Parameters: 平时日记(String), 

# Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync(String), (String), (String), 0(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2020-04-20 11:05:37.26(Timestamp), 2020-04-20 11:05:37.26(Timestamp), 42(Long), 1(Long)
2020-04-20 11:05:37.299 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.addBlog        : <==    Updates: 1
2020-04-20 11:05:37.303 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:05:37.303 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 6(Long)
2020-04-20 11:05:37.552 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:05:37.552 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:05:37.553 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 8(Long)
2020-04-20 11:05:37.554 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:05:37.554 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:05:37.554 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 9(Long)
2020-04-20 11:05:37.814 DEBUG 14396 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:05:37.895  INFO 14396 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 11:05:37.900  INFO 14396 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@4944b5fe]}
2020-04-20 11:05:37.901 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:05:37.901 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:05:37.902 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:05:37.904 DEBUG 14396 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:05:37.904 DEBUG 14396 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:05:37.905 DEBUG 14396 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:05:37.907 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 11:05:37.908 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 11:05:37.926 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 11:05:37.927  INFO 14396 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:05:41.712  INFO 14396 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 11:05:41.714 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:05:41.714 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:05:41.716 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:05:41.717 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:05:41.717 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:05:41.718 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:05:41.720 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:05:41.720 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:05:41.728 DEBUG 14396 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 3
2020-04-20 11:05:41.730  INFO 14396 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:23:14.061  INFO 6816 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 6816 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 11:23:14.065 DEBUG 6816 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 11:23:14.065  INFO 6816 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 11:23:14.130  INFO 6816 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 11:23:14.130  INFO 6816 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 11:23:15.075  INFO 6816 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 11:23:15.093  INFO 6816 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 13ms. Found 0 JDBC repository interfaces.
2020-04-20 11:23:15.797  INFO 6816 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 11:23:15.807  INFO 6816 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 11:23:15.808  INFO 6816 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 11:23:15.905  INFO 6816 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 11:23:15.905  INFO 6816 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1775 ms
2020-04-20 11:23:16.576  INFO 6816 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 11:23:16.666  INFO 6816 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 11:23:17.210  INFO 6816 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 11:23:17.276  INFO 6816 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 11:23:17.280  INFO 6816 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 4.179 seconds (JVM running for 5.432)
2020-04-20 11:23:25.285  INFO 6816 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 11:23:25.286  INFO 6816 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 11:23:25.296  INFO 6816 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-04-20 11:23:25.345  INFO 6816 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 11:23:25.355  INFO 6816 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 11:23:28.705  INFO 6816 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@41715371, {}]}
2020-04-20 11:23:28.730  INFO 6816 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 11:23:29.240  INFO 6816 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 11:23:29.245 DEBUG 6816 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 11:23:29.265 DEBUG 6816 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 11:23:29.287 DEBUG 6816 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 11:23:29.291  INFO 6816 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 11:23:30.342  INFO 6816 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@41715371]}
2020-04-20 11:23:30.353 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:23:30.353 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:23:30.355 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:23:30.407 DEBUG 6816 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:23:30.408 DEBUG 6816 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:23:30.409 DEBUG 6816 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:23:30.411 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 11:23:30.412 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 11:23:30.421 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 11:23:30.424  INFO 6816 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:23:31.521  INFO 6816 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 11:23:31.522 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:23:31.522 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:23:31.523 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:23:31.532 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:23:31.532 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:23:31.536 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:23:31.539 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:23:31.539 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:23:31.552 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 3
2020-04-20 11:23:31.555  INFO 6816 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:23:38.722  INFO 6816 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[Blog{id=12, title='平时日记', content='
# Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync', firstPicture='', flag='', views=null, appreciation=true, shareStatement=true, commentAble=false, published=true, recommend=true, creatTime=null, updateTime=null, typeId=42, userId=null, tagIds='6,8,9', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, 12, {}, org.apache.catalina.session.StandardSessionFacade@41715371]}
2020-04-20 11:23:38.725 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:23:38.726 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 6(Long)
2020-04-20 11:23:38.727 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:23:38.728 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:23:38.729 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 8(Long)
2020-04-20 11:23:38.730 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:23:38.731 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:23:38.731 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 9(Long)
2020-04-20 11:23:38.732 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:23:38.734 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 11:23:38.734 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 42(Long)
2020-04-20 11:23:38.735 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 11:23:38.737 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:23:38.738 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:23:38.746 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 3
2020-04-20 11:23:38.748 DEBUG 6816 --- [http-nio-8080-exec-8] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==>  Preparing: delete from t_blog_tag where blog_id = ? 
2020-04-20 11:23:38.748 DEBUG 6816 --- [http-nio-8080-exec-8] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==> Parameters: 42(Long)
2020-04-20 11:23:38.749 DEBUG 6816 --- [http-nio-8080-exec-8] c.q.m.BlogTagMapper.delBlogTagByBlogId   : <==    Updates: 0
2020-04-20 11:23:38.750 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:23:38.750 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 6(Long)
2020-04-20 11:23:38.752 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:23:38.752 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:23:38.753 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 8(Long)
2020-04-20 11:23:39.004 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:23:39.005 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:23:39.006 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 9(Long)
2020-04-20 11:23:39.010 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:23:39.011 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.updateBlog     : ==>  Preparing: update t_blog set title = ?, content=?, firstPicture=?, flag=?, views=?, appreciation=?, shareStatement=?, commentAble=?, published=?, recommend=?, updateTime=?, type_id=?, user_id=? where id = ?; 
2020-04-20 11:23:39.015 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.updateBlog     : ==> Parameters: 平时日记(String), 
# Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync(String), (String), (String), null, true(Boolean), true(Boolean), false(Boolean), true(Boolean), true(Boolean), 2020-04-20 11:23:38.747(Timestamp), 42(Long), 1(Long), 12(Long)
2020-04-20 11:23:39.141 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.updateBlog     : <==    Updates: 1
2020-04-20 11:23:39.222  INFO 6816 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 11:23:39.238  INFO 6816 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@41715371]}
2020-04-20 11:23:39.239 DEBUG 6816 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:23:39.240 DEBUG 6816 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:23:39.242 DEBUG 6816 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:23:39.250 DEBUG 6816 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:23:39.250 DEBUG 6816 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:23:39.252 DEBUG 6816 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:23:39.252 DEBUG 6816 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 11:23:39.253 DEBUG 6816 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 11:23:39.257 DEBUG 6816 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 11:23:39.261  INFO 6816 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:23:57.618  INFO 6816 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 11:23:57.620 DEBUG 6816 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:23:57.620 DEBUG 6816 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:23:57.622 DEBUG 6816 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:23:57.623 DEBUG 6816 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:23:57.623 DEBUG 6816 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:23:57.625 DEBUG 6816 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:23:57.627 DEBUG 6816 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:23:57.628 DEBUG 6816 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:23:57.645 DEBUG 6816 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 6
2020-04-20 11:23:57.653  INFO 6816 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:24:12.525  INFO 6816 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[Blog{id=12, title='平时日记1', content='# Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync', firstPicture='', flag='', views=null, appreciation=true, shareStatement=true, commentAble=false, published=true, recommend=true, creatTime=null, updateTime=null, typeId=43, userId=null, tagIds='6,8,9', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, 12, {}, org.apache.catalina.session.StandardSessionFacade@41715371]}
2020-04-20 11:24:12.531 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:24:12.531 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 6(Long)
2020-04-20 11:24:12.533 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:24:12.534 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:24:12.534 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 8(Long)
2020-04-20 11:24:12.537 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:24:12.538 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:24:12.538 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 9(Long)
2020-04-20 11:24:12.539 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:24:12.541 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 11:24:12.541 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 43(Long)
2020-04-20 11:24:12.542 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 11:24:12.546 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:24:12.547 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:24:12.560 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 6
2020-04-20 11:24:12.563 DEBUG 6816 --- [http-nio-8080-exec-2] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==>  Preparing: delete from t_blog_tag where blog_id = ? 
2020-04-20 11:24:12.564 DEBUG 6816 --- [http-nio-8080-exec-2] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==> Parameters: 43(Long)
2020-04-20 11:24:12.565 DEBUG 6816 --- [http-nio-8080-exec-2] c.q.m.BlogTagMapper.delBlogTagByBlogId   : <==    Updates: 0
2020-04-20 11:24:12.566 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:24:12.566 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 6(Long)
2020-04-20 11:24:12.568 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:24:12.569 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:24:12.569 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 8(Long)
2020-04-20 11:24:12.571 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:24:12.571 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:24:12.571 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 9(Long)
2020-04-20 11:24:12.897 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:24:12.898 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.updateBlog     : ==>  Preparing: update t_blog set title = ?, content=?, firstPicture=?, flag=?, views=?, appreciation=?, shareStatement=?, commentAble=?, published=?, recommend=?, updateTime=?, type_id=?, user_id=? where id = ?; 
2020-04-20 11:24:12.901 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.updateBlog     : ==> Parameters: 平时日记1(String), # Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync(String), (String), (String), null, true(Boolean), true(Boolean), false(Boolean), true(Boolean), true(Boolean), 2020-04-20 11:24:12.563(Timestamp), 43(Long), 1(Long), 12(Long)
2020-04-20 11:24:12.906 DEBUG 6816 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.updateBlog     : <==    Updates: 1
2020-04-20 11:24:13.092  INFO 6816 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 11:24:13.098  INFO 6816 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@41715371]}
2020-04-20 11:24:13.099 DEBUG 6816 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:24:13.099 DEBUG 6816 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:24:13.102 DEBUG 6816 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:24:13.105 DEBUG 6816 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:24:13.105 DEBUG 6816 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:24:13.106 DEBUG 6816 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:24:13.107 DEBUG 6816 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 11:24:13.107 DEBUG 6816 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 11:24:13.207 DEBUG 6816 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 11:24:13.209  INFO 6816 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:26:27.397  INFO 6816 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 11:26:27.398 DEBUG 6816 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:26:27.398 DEBUG 6816 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:26:27.400 DEBUG 6816 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:26:27.401 DEBUG 6816 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:26:27.402 DEBUG 6816 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:26:27.403 DEBUG 6816 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:26:27.403  INFO 6816 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:26:40.027  INFO 6816 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.add', args=[Blog{id=null, title='s', content='s', firstPicture='', flag='', views=null, appreciation=false, shareStatement=false, commentAble=true, published=true, recommend=false, creatTime=null, updateTime=null, typeId=43, userId=null, tagIds='7', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}, org.apache.catalina.session.StandardSessionFacade@41715371]}
2020-04-20 11:26:40.029 DEBUG 6816 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 11:26:40.029 DEBUG 6816 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 43(Long)
2020-04-20 11:26:40.031 DEBUG 6816 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 11:26:40.035 DEBUG 6816 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:26:40.035 DEBUG 6816 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 7(Long)
2020-04-20 11:26:40.036 DEBUG 6816 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:26:40.038 DEBUG 6816 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.addBlog        : ==>  Preparing: insert into t_blog(title,content,firstPicture,flag,views,appreciation,shareStatement,commentAble,published,recommend,creatTime,updateTime,type_id,user_id) values (?,?,?,?,?,?, ?,?,?,?,?, ?,?,?) 
2020-04-20 11:26:40.038 DEBUG 6816 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.addBlog        : ==> Parameters: s(String), s(String), (String), (String), 0(Integer), false(Boolean), false(Boolean), true(Boolean), true(Boolean), false(Boolean), 2020-04-20 11:26:40.037(Timestamp), 2020-04-20 11:26:40.037(Timestamp), 43(Long), 1(Long)
2020-04-20 11:26:40.040 DEBUG 6816 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.addBlog        : <==    Updates: 1
2020-04-20 11:26:40.043 DEBUG 6816 --- [http-nio-8080-exec-1] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:26:40.044 DEBUG 6816 --- [http-nio-8080-exec-1] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 13(Long), 7(Long)
2020-04-20 11:26:40.047 DEBUG 6816 --- [http-nio-8080-exec-1] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:26:40.262  INFO 6816 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 11:26:40.267  INFO 6816 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@41715371]}
2020-04-20 11:26:40.267 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:26:40.267 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:26:40.268 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:26:40.271 DEBUG 6816 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:26:40.271 DEBUG 6816 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:26:40.273 DEBUG 6816 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:26:40.273 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 11:26:40.273 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 11:26:40.278 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 11:26:40.280  INFO 6816 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:27:02.955  INFO 6816 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 11:27:02.956 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:27:02.956 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:27:02.957 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:27:02.958 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:27:02.958 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:27:02.959 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:27:02.961 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:27:02.961 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:27:02.983 DEBUG 6816 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 9
2020-04-20 11:27:02.987  INFO 6816 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:27:10.782  INFO 6816 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[Blog{id=12, title='平时日记1', content='# Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync', firstPicture='', flag='', views=null, appreciation=true, shareStatement=true, commentAble=false, published=true, recommend=true, creatTime=null, updateTime=null, typeId=43, userId=null, tagIds='8,9', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, 12, {}, org.apache.catalina.session.StandardSessionFacade@41715371]}
2020-04-20 11:27:10.791 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:27:10.791 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 8(Long)
2020-04-20 11:27:10.794 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:27:10.796 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:27:10.796 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 9(Long)
2020-04-20 11:27:10.797 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:27:10.797 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 11:27:10.798 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 43(Long)
2020-04-20 11:27:10.802 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 11:27:10.805 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:27:10.805 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:27:10.826 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 9
2020-04-20 11:27:10.826 DEBUG 6816 --- [http-nio-8080-exec-6] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==>  Preparing: delete from t_blog_tag where blog_id = ? 
2020-04-20 11:27:10.827 DEBUG 6816 --- [http-nio-8080-exec-6] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==> Parameters: 43(Long)
2020-04-20 11:27:10.828 DEBUG 6816 --- [http-nio-8080-exec-6] c.q.m.BlogTagMapper.delBlogTagByBlogId   : <==    Updates: 0
2020-04-20 11:27:10.828 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:27:10.828 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 8(Long)
2020-04-20 11:27:10.829 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:27:10.830 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:27:10.830 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 9(Long)
2020-04-20 11:27:11.164 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:27:11.166 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.updateBlog     : ==>  Preparing: update t_blog set title = ?, content=?, firstPicture=?, flag=?, views=?, appreciation=?, shareStatement=?, commentAble=?, published=?, recommend=?, updateTime=?, type_id=?, user_id=? where id = ?; 
2020-04-20 11:27:11.169 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.updateBlog     : ==> Parameters: 平时日记1(String), # Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync(String), (String), (String), null, true(Boolean), true(Boolean), false(Boolean), true(Boolean), true(Boolean), 2020-04-20 11:27:10.826(Timestamp), 43(Long), 1(Long), 12(Long)
2020-04-20 11:27:11.181 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.updateBlog     : <==    Updates: 1
2020-04-20 11:27:11.300  INFO 6816 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 11:27:11.304  INFO 6816 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@41715371]}
2020-04-20 11:27:11.304 DEBUG 6816 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:27:11.304 DEBUG 6816 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:27:11.305 DEBUG 6816 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:27:11.307 DEBUG 6816 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:27:11.308 DEBUG 6816 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:27:11.309 DEBUG 6816 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:27:11.309 DEBUG 6816 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 11:27:11.310 DEBUG 6816 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 11:27:11.314 DEBUG 6816 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 11:27:11.316  INFO 6816 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:27:12.900  INFO 6816 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 11:27:12.902 DEBUG 6816 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:27:12.902 DEBUG 6816 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:27:12.904 DEBUG 6816 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:27:12.904 DEBUG 6816 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:27:12.904 DEBUG 6816 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:27:12.905 DEBUG 6816 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:27:12.908 DEBUG 6816 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:27:12.908 DEBUG 6816 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:27:12.935 DEBUG 6816 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 11
2020-04-20 11:27:12.939  INFO 6816 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:28:49.508  INFO 6816 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 11:28:49.509 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:28:49.510 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:28:49.511 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:28:49.511 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:28:49.511 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:28:49.512 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:28:49.514 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:28:49.514 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:28:49.523 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 11:28:49.526  INFO 6816 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:28:55.599  INFO 6816 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[Blog{id=12, title='平时日记1', content='# Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync', firstPicture='', flag='', views=null, appreciation=true, shareStatement=true, commentAble=false, published=true, recommend=true, creatTime=null, updateTime=null, typeId=43, userId=null, tagIds='9', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, 12, {}, org.apache.catalina.session.StandardSessionFacade@41715371]}
2020-04-20 11:28:55.603 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:28:55.604 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 9(Long)
2020-04-20 11:28:55.607 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:28:55.608 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 11:28:55.609 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 43(Long)
2020-04-20 11:28:55.609 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 11:28:55.611 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:28:55.611 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:28:55.619 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 11:28:55.621 DEBUG 6816 --- [http-nio-8080-exec-6] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==>  Preparing: delete from t_blog_tag where blog_id = ? 
2020-04-20 11:28:55.621 DEBUG 6816 --- [http-nio-8080-exec-6] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==> Parameters: 43(Long)
2020-04-20 11:28:55.623 DEBUG 6816 --- [http-nio-8080-exec-6] c.q.m.BlogTagMapper.delBlogTagByBlogId   : <==    Updates: 0
2020-04-20 11:28:55.625 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:28:55.625 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 9(Long)
2020-04-20 11:28:55.626 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:28:55.627 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.updateBlog     : ==>  Preparing: update t_blog set title = ?, content=?, firstPicture=?, flag=?, views=?, appreciation=?, shareStatement=?, commentAble=?, published=?, recommend=?, updateTime=?, type_id=?, user_id=? where id = ?; 
2020-04-20 11:28:55.629 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.updateBlog     : ==> Parameters: 平时日记1(String), # Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync(String), (String), (String), null, true(Boolean), true(Boolean), false(Boolean), true(Boolean), true(Boolean), 2020-04-20 11:28:55.621(Timestamp), 43(Long), 1(Long), 12(Long)
2020-04-20 11:28:55.634 DEBUG 6816 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.updateBlog     : <==    Updates: 1
2020-04-20 11:28:55.774  INFO 6816 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 11:28:55.778  INFO 6816 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@41715371]}
2020-04-20 11:28:55.779 DEBUG 6816 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:28:55.779 DEBUG 6816 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:28:55.780 DEBUG 6816 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:28:55.783 DEBUG 6816 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:28:55.783 DEBUG 6816 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:28:55.785 DEBUG 6816 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:28:55.786 DEBUG 6816 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 11:28:55.786 DEBUG 6816 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 11:28:55.790 DEBUG 6816 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 11:28:55.791  INFO 6816 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:29:11.704  INFO 6816 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 11:29:11.706 DEBUG 6816 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:29:11.707 DEBUG 6816 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:29:11.708 DEBUG 6816 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:29:11.708 DEBUG 6816 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:29:11.708 DEBUG 6816 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:29:11.709 DEBUG 6816 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:29:11.710 DEBUG 6816 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:29:11.711 DEBUG 6816 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:29:11.718 DEBUG 6816 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 3
2020-04-20 11:29:11.720  INFO 6816 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:29:58.867  INFO 12808 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 12808 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 11:29:58.869 DEBUG 12808 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 11:29:58.870  INFO 12808 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 11:29:58.939  INFO 12808 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 11:29:58.940  INFO 12808 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 11:29:59.731  INFO 12808 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 11:29:59.753  INFO 12808 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 14ms. Found 0 JDBC repository interfaces.
2020-04-20 11:30:00.491  INFO 12808 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 11:30:00.500  INFO 12808 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 11:30:00.501  INFO 12808 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 11:30:00.582  INFO 12808 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 11:30:00.582  INFO 12808 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1642 ms
2020-04-20 11:30:01.277  INFO 12808 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 11:30:01.365  INFO 12808 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 11:30:01.903  INFO 12808 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 11:30:01.960  INFO 12808 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 11:30:02.080  INFO 12808 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.721 seconds (JVM running for 4.561)
2020-04-20 11:30:06.431  INFO 12808 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 11:30:06.432  INFO 12808 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 11:30:06.443  INFO 12808 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-04-20 11:30:06.478  INFO 12808 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 11:30:06.483  INFO 12808 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 11:30:09.449  INFO 12808 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@7b01e7d2, {}]}
2020-04-20 11:30:09.480  INFO 12808 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 11:30:10.006  INFO 12808 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 11:30:10.011 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 11:30:10.030 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 11:30:10.048 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 11:30:10.052  INFO 12808 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 11:30:11.129  INFO 12808 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@7b01e7d2]}
2020-04-20 11:30:11.139 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:30:11.139 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:30:11.141 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:30:11.191 DEBUG 12808 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:30:11.192 DEBUG 12808 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:30:11.200 DEBUG 12808 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:30:11.204 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 11:30:11.204 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 11:30:11.213 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 11:30:11.215  INFO 12808 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:30:13.159  INFO 12808 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 11:30:13.160 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:30:13.160 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:30:13.161 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:30:13.167 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:30:13.167 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:30:13.172 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:30:13.176 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:30:13.176 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:30:13.184 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 11:30:13.191  INFO 12808 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:30:21.271  INFO 12808 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[Blog{id=12, title='平时日记1', content='# Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync', firstPicture='', flag='', views=null, appreciation=true, shareStatement=true, commentAble=false, published=true, recommend=true, creatTime=null, updateTime=null, typeId=43, userId=null, tagIds='9,6', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, 12, {}, org.apache.catalina.session.StandardSessionFacade@7b01e7d2]}
2020-04-20 11:30:21.275 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:30:21.275 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 9(Long)
2020-04-20 11:30:21.277 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:30:21.278 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:30:21.278 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 6(Long)
2020-04-20 11:30:21.280 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:30:21.282 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 11:30:21.283 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 43(Long)
2020-04-20 11:30:21.284 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 11:30:21.286 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:30:21.286 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:30:21.292 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 11:30:21.293 DEBUG 12808 --- [http-nio-8080-exec-6] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==>  Preparing: delete from t_blog_tag where blog_id = ? 
2020-04-20 11:30:21.293 DEBUG 12808 --- [http-nio-8080-exec-6] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==> Parameters: 12(Long)
2020-04-20 11:30:21.384 DEBUG 12808 --- [http-nio-8080-exec-6] c.q.m.BlogTagMapper.delBlogTagByBlogId   : <==    Updates: 2
2020-04-20 11:30:21.384 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:30:21.385 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 9(Long)
2020-04-20 11:30:21.620 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:30:21.620 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:30:21.621 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 6(Long)
2020-04-20 11:30:21.622 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:30:21.622 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.updateBlog     : ==>  Preparing: update t_blog set title = ?, content=?, firstPicture=?, flag=?, appreciation=?, shareStatement=?, commentAble=?, published=?, recommend=?, updateTime=?, type_id=?, user_id=? where id = ?; 
2020-04-20 11:30:21.625 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.updateBlog     : ==> Parameters: 平时日记1(String), # Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync(String), (String), (String), true(Boolean), true(Boolean), false(Boolean), true(Boolean), true(Boolean), 2020-04-20 11:30:21.292(Timestamp), 43(Long), 1(Long), 12(Long)
2020-04-20 11:30:21.632 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.updateBlog     : <==    Updates: 1
2020-04-20 11:30:21.756  INFO 12808 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 11:30:21.772  INFO 12808 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@7b01e7d2]}
2020-04-20 11:30:21.773 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:30:21.774 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:30:21.775 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:30:21.783 DEBUG 12808 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:30:21.783 DEBUG 12808 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:30:21.784 DEBUG 12808 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:30:21.785 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 11:30:21.785 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 11:30:21.790 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 11:30:21.791  INFO 12808 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:30:23.170  INFO 12808 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 11:30:23.173 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:30:23.174 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:30:23.175 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:30:23.176 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:30:23.176 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:30:23.178 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:30:23.182 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:30:23.183 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:30:23.191 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 11:30:23.193  INFO 12808 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:31:07.198  INFO 12808 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 11:31:07.201 DEBUG 12808 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:31:07.201 DEBUG 12808 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:31:07.202 DEBUG 12808 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:31:07.204 DEBUG 12808 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:31:07.204 DEBUG 12808 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:31:07.206 DEBUG 12808 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:31:07.210 DEBUG 12808 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:31:07.211 DEBUG 12808 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:31:07.221 DEBUG 12808 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 11:31:07.223  INFO 12808 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:31:11.680  INFO 12808 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[Blog{id=12, title='平时日记1', content='# Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync', firstPicture='', flag='转载', views=null, appreciation=true, shareStatement=true, commentAble=false, published=true, recommend=true, creatTime=null, updateTime=null, typeId=43, userId=null, tagIds='9,6', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, 12, {}, org.apache.catalina.session.StandardSessionFacade@7b01e7d2]}
2020-04-20 11:31:11.683 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:31:11.684 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 9(Long)
2020-04-20 11:31:11.684 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:31:11.685 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:31:11.685 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 6(Long)
2020-04-20 11:31:11.686 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:31:11.687 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 11:31:11.687 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 43(Long)
2020-04-20 11:31:11.688 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 11:31:11.690 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:31:11.691 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:31:11.699 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 11:31:11.700 DEBUG 12808 --- [http-nio-8080-exec-3] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==>  Preparing: delete from t_blog_tag where blog_id = ? 
2020-04-20 11:31:11.700 DEBUG 12808 --- [http-nio-8080-exec-3] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==> Parameters: 12(Long)
2020-04-20 11:31:11.702 DEBUG 12808 --- [http-nio-8080-exec-3] c.q.m.BlogTagMapper.delBlogTagByBlogId   : <==    Updates: 2
2020-04-20 11:31:11.702 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:31:11.703 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 9(Long)
2020-04-20 11:31:12.025 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:31:12.026 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:31:12.026 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 6(Long)
2020-04-20 11:31:12.027 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:31:12.028 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.updateBlog     : ==>  Preparing: update t_blog set title = ?, content=?, firstPicture=?, flag=?, appreciation=?, shareStatement=?, commentAble=?, published=?, recommend=?, updateTime=?, type_id=?, user_id=? where id = ?; 
2020-04-20 11:31:12.031 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.updateBlog     : ==> Parameters: 平时日记1(String), # Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync(String), (String), 转载(String), true(Boolean), true(Boolean), false(Boolean), true(Boolean), true(Boolean), 2020-04-20 11:31:11.7(Timestamp), 43(Long), 1(Long), 12(Long)
2020-04-20 11:31:12.040 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.updateBlog     : <==    Updates: 1
2020-04-20 11:31:12.172  INFO 12808 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 11:31:12.177  INFO 12808 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@7b01e7d2]}
2020-04-20 11:31:12.178 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:31:12.178 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:31:12.179 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:31:12.181 DEBUG 12808 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:31:12.182 DEBUG 12808 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:31:12.183 DEBUG 12808 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:31:12.184 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 11:31:12.184 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 11:31:12.188 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 11:31:12.189  INFO 12808 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:31:15.259  INFO 12808 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 11:31:15.261 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:31:15.261 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:31:15.262 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:31:15.262 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:31:15.263 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:31:15.264 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:31:15.265 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:31:15.265 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:31:15.273 DEBUG 12808 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 11:31:15.278  INFO 12808 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:31:48.086  INFO 12808 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[Blog{id=12, title='平时日记1', content='# Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync', firstPicture='', flag='转载', views=null, appreciation=true, shareStatement=true, commentAble=false, published=true, recommend=true, creatTime=null, updateTime=null, typeId=43, userId=null, tagIds='9,6', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, 12, {}, org.apache.catalina.session.StandardSessionFacade@7b01e7d2]}
2020-04-20 11:31:48.089 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:31:48.089 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 9(Long)
2020-04-20 11:31:48.090 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:31:48.093 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:31:48.094 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 6(Long)
2020-04-20 11:31:48.095 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:31:48.097 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 11:31:48.098 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 43(Long)
2020-04-20 11:31:48.100 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 11:31:48.102 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:31:48.103 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:31:48.110 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 11:31:48.111 DEBUG 12808 --- [http-nio-8080-exec-3] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==>  Preparing: delete from t_blog_tag where blog_id = ? 
2020-04-20 11:31:48.111 DEBUG 12808 --- [http-nio-8080-exec-3] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==> Parameters: 12(Long)
2020-04-20 11:31:48.113 DEBUG 12808 --- [http-nio-8080-exec-3] c.q.m.BlogTagMapper.delBlogTagByBlogId   : <==    Updates: 2
2020-04-20 11:31:48.113 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:31:48.114 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 9(Long)
2020-04-20 11:31:48.698 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:31:48.699 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:31:48.699 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 6(Long)
2020-04-20 11:31:48.880 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:31:48.881 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.updateBlog     : ==>  Preparing: update t_blog set title = ?, content=?, firstPicture=?, flag=?, appreciation=?, shareStatement=?, commentAble=?, published=?, recommend=?, updateTime=?, type_id=?, user_id=? where id = ?; 
2020-04-20 11:31:48.882 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.updateBlog     : ==> Parameters: 平时日记1(String), # Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync(String), (String), 转载(String), true(Boolean), true(Boolean), false(Boolean), true(Boolean), true(Boolean), 2020-04-20 11:31:48.111(Timestamp), 43(Long), 1(Long), 12(Long)
2020-04-20 11:31:48.887 DEBUG 12808 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.updateBlog     : <==    Updates: 1
2020-04-20 11:31:49.025  INFO 12808 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 11:31:49.032  INFO 12808 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@7b01e7d2]}
2020-04-20 11:31:49.033 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:31:49.033 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:31:49.034 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:31:49.037 DEBUG 12808 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:31:49.038 DEBUG 12808 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:31:49.039 DEBUG 12808 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:31:49.039 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 11:31:49.040 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 11:31:49.045 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 11:31:49.047  INFO 12808 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:31:56.564  INFO 12808 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 11:31:56.566 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:31:56.566 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:31:56.567 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:31:56.567 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:31:56.568 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:31:56.569 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:31:56.572 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:31:56.572 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:31:56.579 DEBUG 12808 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 11:31:56.581  INFO 12808 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:32:01.146  INFO 12808 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[Blog{id=12, title='平时日记1', content='# Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync', firstPicture='', flag='原创', views=null, appreciation=true, shareStatement=true, commentAble=false, published=true, recommend=true, creatTime=null, updateTime=null, typeId=43, userId=null, tagIds='9,6', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, 12, {}, org.apache.catalina.session.StandardSessionFacade@7b01e7d2]}
2020-04-20 11:32:01.354 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:32:01.354 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 9(Long)
2020-04-20 11:32:01.355 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:32:01.356 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:32:01.356 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 6(Long)
2020-04-20 11:32:01.357 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:32:01.359 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 11:32:01.359 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 43(Long)
2020-04-20 11:32:01.360 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 11:32:01.362 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:32:01.362 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:32:01.368 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 11:32:01.369 DEBUG 12808 --- [http-nio-8080-exec-6] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==>  Preparing: delete from t_blog_tag where blog_id = ? 
2020-04-20 11:32:01.369 DEBUG 12808 --- [http-nio-8080-exec-6] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==> Parameters: 12(Long)
2020-04-20 11:32:01.371 DEBUG 12808 --- [http-nio-8080-exec-6] c.q.m.BlogTagMapper.delBlogTagByBlogId   : <==    Updates: 2
2020-04-20 11:32:01.371 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:32:01.371 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 9(Long)
2020-04-20 11:32:01.373 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:32:01.373 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:32:01.373 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 6(Long)
2020-04-20 11:32:01.375 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:32:01.375 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.updateBlog     : ==>  Preparing: update t_blog set title = ?, content=?, firstPicture=?, flag=?, appreciation=?, shareStatement=?, commentAble=?, published=?, recommend=?, updateTime=?, type_id=?, user_id=? where id = ?; 
2020-04-20 11:32:01.377 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.updateBlog     : ==> Parameters: 平时日记1(String), # Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync(String), (String), 原创(String), true(Boolean), true(Boolean), false(Boolean), true(Boolean), true(Boolean), 2020-04-20 11:32:01.369(Timestamp), 43(Long), 1(Long), 12(Long)
2020-04-20 11:32:01.383 DEBUG 12808 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.updateBlog     : <==    Updates: 1
2020-04-20 11:32:01.609  INFO 12808 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 11:32:01.650  INFO 12808 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@7b01e7d2]}
2020-04-20 11:32:01.651 DEBUG 12808 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:32:01.651 DEBUG 12808 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:32:01.652 DEBUG 12808 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:32:01.654 DEBUG 12808 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:32:01.655 DEBUG 12808 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:32:01.656 DEBUG 12808 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:32:01.656 DEBUG 12808 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 11:32:01.656 DEBUG 12808 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 11:32:01.660 DEBUG 12808 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 11:32:01.665  INFO 12808 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:34:34.178  INFO 15672 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 15672 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 11:34:34.185 DEBUG 15672 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 11:34:34.185  INFO 15672 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 11:34:34.310  INFO 15672 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 11:34:34.310  INFO 15672 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 11:34:35.132  INFO 15672 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 11:34:35.150  INFO 15672 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 12ms. Found 0 JDBC repository interfaces.
2020-04-20 11:34:35.993  INFO 15672 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 11:34:36.002  INFO 15672 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 11:34:36.002  INFO 15672 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 11:34:36.084  INFO 15672 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 11:34:36.084  INFO 15672 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1774 ms
2020-04-20 11:34:36.915  INFO 15672 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 11:34:37.021  INFO 15672 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 11:34:37.567  INFO 15672 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 11:34:37.612  INFO 15672 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 11:34:37.615  INFO 15672 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 4.003 seconds (JVM running for 4.88)
2020-04-20 11:34:38.280  INFO 15672 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 11:34:38.281  INFO 15672 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 11:34:38.293  INFO 15672 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 12 ms
2020-04-20 11:34:38.327  INFO 15672 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 11:34:38.331  INFO 15672 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 11:34:44.473  INFO 15672 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@5f0f7d19, {}]}
2020-04-20 11:34:44.501  INFO 15672 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 11:34:45.040  INFO 15672 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 11:34:45.051 DEBUG 15672 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 11:34:45.074 DEBUG 15672 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 11:34:45.100 DEBUG 15672 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 11:34:45.106  INFO 15672 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 11:34:52.736  INFO 15672 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@5f0f7d19]}
2020-04-20 11:34:52.746 DEBUG 15672 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:34:52.746 DEBUG 15672 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:34:52.749 DEBUG 15672 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:34:52.805 DEBUG 15672 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:34:52.805 DEBUG 15672 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:34:52.807 DEBUG 15672 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:34:52.810 DEBUG 15672 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 11:34:52.812 DEBUG 15672 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 11:34:52.821 DEBUG 15672 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 11:34:52.824  INFO 15672 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:34:55.900  INFO 15672 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 11:34:55.903 DEBUG 15672 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:34:55.905 DEBUG 15672 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:34:55.906 DEBUG 15672 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:34:55.913 DEBUG 15672 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:34:55.913 DEBUG 15672 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:34:55.915 DEBUG 15672 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:34:55.915  INFO 15672 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:38:15.469  INFO 14076 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 14076 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 11:38:15.471 DEBUG 14076 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 11:38:15.472  INFO 14076 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 11:38:15.545  INFO 14076 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 11:38:15.548  INFO 14076 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 11:38:16.440  INFO 14076 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 11:38:16.461  INFO 14076 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 15ms. Found 0 JDBC repository interfaces.
2020-04-20 11:38:17.325  INFO 14076 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 11:38:17.334  INFO 14076 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 11:38:17.335  INFO 14076 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 11:38:17.439  INFO 14076 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 11:38:17.440  INFO 14076 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1892 ms
2020-04-20 11:38:18.135  INFO 14076 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 11:38:18.232  INFO 14076 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 11:38:18.921  INFO 14076 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 11:38:18.979  INFO 14076 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 11:38:18.983  INFO 14076 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 4.383 seconds (JVM running for 6.434)
2020-04-20 11:38:19.040  INFO 14076 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 11:38:19.041  INFO 14076 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 11:38:19.051  INFO 14076 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-04-20 11:38:19.084  INFO 14076 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='127.0.0.1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 11:38:19.090  INFO 14076 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 11:38:24.563  INFO 14076 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@2085cda4, {}]}
2020-04-20 11:38:24.594  INFO 14076 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 11:38:25.156  INFO 14076 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 11:38:25.162 DEBUG 14076 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 11:38:25.184 DEBUG 14076 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 11:38:25.204 DEBUG 14076 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 11:38:25.209  INFO 14076 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 11:38:28.450  INFO 14076 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@2085cda4]}
2020-04-20 11:38:28.458 DEBUG 14076 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:38:28.458 DEBUG 14076 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:38:28.459 DEBUG 14076 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:38:28.511 DEBUG 14076 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:38:28.512 DEBUG 14076 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:38:28.514 DEBUG 14076 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:38:28.517 DEBUG 14076 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 11:38:28.517 DEBUG 14076 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 11:38:28.526 DEBUG 14076 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 11:38:28.528  INFO 14076 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:38:32.483  INFO 14076 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=1, pageSize=5}, Blog{id=null, title='1', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='1', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@2085cda4]}
2020-04-20 11:38:32.495 DEBUG 14076 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? AND b.title LIKE ? 
2020-04-20 11:38:32.496 DEBUG 14076 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %1%(String)
2020-04-20 11:38:32.498 DEBUG 14076 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:38:32.498 DEBUG 14076 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? and b.title like ? order by bid LIMIT ? 
2020-04-20 11:38:32.499 DEBUG 14076 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), %1%(String), 5(Integer)
2020-04-20 11:38:32.504 DEBUG 14076 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 11:38:32.505  INFO 14076 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 11:38:35.974  INFO 14076 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=1, pageSize=5}, Blog{id=null, title='q', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='q', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@2085cda4]}
2020-04-20 11:38:35.979 DEBUG 14076 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? AND b.title LIKE ? 
2020-04-20 11:38:35.980 DEBUG 14076 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %q%(String)
2020-04-20 11:38:35.982 DEBUG 14076 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:38:35.983  INFO 14076 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 11:38:39.082  INFO 14076 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=1, pageSize=5}, Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@2085cda4]}
2020-04-20 11:38:39.086 DEBUG 14076 --- [http-nio-8080-exec-3] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? AND b.title LIKE ? 
2020-04-20 11:38:39.086 DEBUG 14076 --- [http-nio-8080-exec-3] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %%(String)
2020-04-20 11:38:39.087 DEBUG 14076 --- [http-nio-8080-exec-3] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:38:39.089 DEBUG 14076 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? and b.title like ? order by bid LIMIT ? 
2020-04-20 11:38:39.089 DEBUG 14076 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), %%(String), 5(Integer)
2020-04-20 11:38:39.096 DEBUG 14076 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 11:38:39.098  INFO 14076 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 11:38:41.510  INFO 14076 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=1, pageSize=5}, Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=42, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=42, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@2085cda4]}
2020-04-20 11:38:41.514 DEBUG 14076 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? AND b.title LIKE ? AND b.type_id = ? 
2020-04-20 11:38:41.514 DEBUG 14076 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %%(String), 42(Long)
2020-04-20 11:38:41.611 DEBUG 14076 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:38:41.612  INFO 14076 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 11:38:43.455  INFO 14076 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=1, pageSize=5}, Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=43, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=43, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@2085cda4]}
2020-04-20 11:38:43.460 DEBUG 14076 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? AND b.title LIKE ? AND b.type_id = ? 
2020-04-20 11:38:43.460 DEBUG 14076 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %%(String), 43(Long)
2020-04-20 11:38:43.462 DEBUG 14076 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:38:43.463 DEBUG 14076 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? and b.title like ? and b.type_id = ? order by bid LIMIT ? 
2020-04-20 11:38:43.463 DEBUG 14076 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), %%(String), 43(Long), 5(Integer)
2020-04-20 11:38:43.468 DEBUG 14076 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 11:38:43.469  INFO 14076 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 11:38:45.592  INFO 14076 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=1, pageSize=5}, Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=true, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=true, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@2085cda4]}
2020-04-20 11:38:45.596 DEBUG 14076 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? AND b.title LIKE ? AND b.recommend = ? 
2020-04-20 11:38:45.597 DEBUG 14076 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %%(String), true(Boolean)
2020-04-20 11:38:45.599 DEBUG 14076 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:38:45.600 DEBUG 14076 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? and b.title like ? and b.recommend = ? order by bid LIMIT ? 
2020-04-20 11:38:45.600 DEBUG 14076 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), %%(String), true(Boolean), 5(Integer)
2020-04-20 11:38:45.604 DEBUG 14076 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 11:38:45.606  INFO 14076 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 11:38:47.169  INFO 14076 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=1, pageSize=5}, Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@2085cda4]}
2020-04-20 11:38:47.174 DEBUG 14076 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? AND b.title LIKE ? 
2020-04-20 11:38:47.175 DEBUG 14076 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %%(String)
2020-04-20 11:38:47.177 DEBUG 14076 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:38:47.177 DEBUG 14076 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? and b.title like ? order by bid LIMIT ? 
2020-04-20 11:38:47.178 DEBUG 14076 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), %%(String), 5(Integer)
2020-04-20 11:38:47.183 DEBUG 14076 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 11:38:47.185  INFO 14076 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 11:39:05.484  INFO 14076 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 11:39:05.485 DEBUG 14076 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:39:05.486 DEBUG 14076 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:39:05.487 DEBUG 14076 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:39:05.491 DEBUG 14076 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:39:05.491 DEBUG 14076 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:39:05.493 DEBUG 14076 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:39:05.494  INFO 14076 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:39:39.650  INFO 14076 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='127.0.0.1', classMethod='com.qin.controller.AdminBlogController.add', args=[Blog{id=null, title='2', content='', firstPicture='', flag='原创', views=null, appreciation=false, shareStatement=false, commentAble=false, published=true, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}, org.apache.catalina.session.StandardSessionFacade@2085cda4]}
2020-04-20 11:39:39.652 DEBUG 14076 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 11:39:39.653 DEBUG 14076 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getType        : ==> Parameters: null
2020-04-20 11:39:39.654 DEBUG 14076 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getType        : <==      Total: 0
2020-04-20 11:39:39.656 DEBUG 14076 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.addBlog        : ==>  Preparing: insert into t_blog(title,content,firstPicture,flag,views,appreciation,shareStatement,commentAble,published,recommend,creatTime,updateTime,type_id,user_id) values (?,?,?,?,?,?, ?,?,?,?,?, ?,?,?) 
2020-04-20 11:39:39.657 DEBUG 14076 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.addBlog        : ==> Parameters: 2(String), (String), (String), 原创(String), 0(Integer), false(Boolean), false(Boolean), false(Boolean), true(Boolean), false(Boolean), 2020-04-20 11:39:39.655(Timestamp), 2020-04-20 11:39:39.655(Timestamp), null, 1(Long)
2020-04-20 11:39:39.659 DEBUG 14076 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.addBlog        : <==    Updates: 1
2020-04-20 11:39:39.970  INFO 14076 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 11:39:39.984  INFO 14076 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='127.0.0.1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@2085cda4]}
2020-04-20 11:39:39.984 DEBUG 14076 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:39:39.984 DEBUG 14076 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:39:39.986 DEBUG 14076 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:39:39.988 DEBUG 14076 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:39:39.989 DEBUG 14076 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:39:39.990 DEBUG 14076 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:39:39.990 DEBUG 14076 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 11:39:39.991 DEBUG 14076 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 11:39:40.086 DEBUG 14076 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 11:39:40.088  INFO 14076 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:41:38.619  INFO 14076 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 11:41:38.621 DEBUG 14076 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:41:38.621 DEBUG 14076 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:41:38.622 DEBUG 14076 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:41:38.623 DEBUG 14076 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:41:38.623 DEBUG 14076 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:41:38.627 DEBUG 14076 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:41:38.627  INFO 14076 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:43:45.037  INFO 14076 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 11:43:45.043 DEBUG 14076 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:43:45.043 DEBUG 14076 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:43:45.044 DEBUG 14076 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:43:45.045 DEBUG 14076 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:43:45.045 DEBUG 14076 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:43:45.047 DEBUG 14076 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:43:45.047  INFO 14076 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:44:38.641  INFO 14076 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 11:44:38.642 DEBUG 14076 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:44:38.642 DEBUG 14076 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:44:38.643 DEBUG 14076 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:44:38.645 DEBUG 14076 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:44:38.645 DEBUG 14076 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:44:38.647 DEBUG 14076 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:44:38.649  INFO 14076 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:45:04.053  INFO 14076 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 11:45:04.056 DEBUG 14076 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:45:04.058 DEBUG 14076 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:45:04.061 DEBUG 14076 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:45:04.062 DEBUG 14076 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:45:04.062 DEBUG 14076 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:45:04.064 DEBUG 14076 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:45:04.064  INFO 14076 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:45:51.272  INFO 14076 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 11:45:51.273 DEBUG 14076 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:45:51.273 DEBUG 14076 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:45:51.275 DEBUG 14076 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:45:51.275 DEBUG 14076 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:45:51.276 DEBUG 14076 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:45:51.277 DEBUG 14076 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:45:51.278  INFO 14076 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:48:09.632  INFO 14076 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 11:48:09.633 DEBUG 14076 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:48:09.634 DEBUG 14076 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:48:09.638 DEBUG 14076 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:48:09.641 DEBUG 14076 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:48:09.641 DEBUG 14076 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:48:09.642 DEBUG 14076 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:48:09.643  INFO 14076 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:49:05.365  INFO 14076 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@2085cda4]}
2020-04-20 11:49:05.368 DEBUG 14076 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:49:05.369 DEBUG 14076 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:49:05.370 DEBUG 14076 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:49:05.372 DEBUG 14076 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:49:05.373 DEBUG 14076 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:49:05.374 DEBUG 14076 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:49:05.374 DEBUG 14076 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 11:49:05.375 DEBUG 14076 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 11:49:05.379 DEBUG 14076 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 11:49:05.381  INFO 14076 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:49:53.376  INFO 6576 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 6576 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 11:49:53.378 DEBUG 6576 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 11:49:53.379  INFO 6576 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 11:49:53.437  INFO 6576 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 11:49:53.437  INFO 6576 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 11:49:54.482  INFO 6576 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 11:49:54.523  INFO 6576 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 27ms. Found 0 JDBC repository interfaces.
2020-04-20 11:49:55.309  INFO 6576 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 11:49:55.331  INFO 6576 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 11:49:55.331  INFO 6576 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 11:49:55.424  INFO 6576 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 11:49:55.424  INFO 6576 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1986 ms
2020-04-20 11:49:56.098  INFO 6576 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 11:49:56.187  INFO 6576 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 11:49:56.668  INFO 6576 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 11:49:56.728  INFO 6576 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 11:49:56.731  INFO 6576 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.866 seconds (JVM running for 4.745)
2020-04-20 11:50:00.488  INFO 6576 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 11:50:00.489  INFO 6576 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 11:50:00.497  INFO 6576 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-04-20 11:50:00.529  INFO 6576 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 11:50:00.532  INFO 6576 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 11:50:04.166  INFO 6576 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@7a0ceae1, {}]}
2020-04-20 11:50:04.199  INFO 6576 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 11:50:04.737  INFO 6576 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 11:50:04.743 DEBUG 6576 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 11:50:04.764 DEBUG 6576 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 11:50:04.786 DEBUG 6576 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 11:50:04.793  INFO 6576 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 11:50:06.227  INFO 6576 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@7a0ceae1]}
2020-04-20 11:50:06.235 DEBUG 6576 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:50:06.235 DEBUG 6576 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:50:06.239 DEBUG 6576 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:50:06.288 DEBUG 6576 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:50:06.289 DEBUG 6576 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:50:06.291 DEBUG 6576 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:50:06.293 DEBUG 6576 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 11:50:06.293 DEBUG 6576 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 11:50:06.302 DEBUG 6576 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 11:50:06.306  INFO 6576 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:50:08.459  INFO 6576 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 11:50:08.461 DEBUG 6576 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:50:08.461 DEBUG 6576 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:50:08.467 DEBUG 6576 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:50:08.472 DEBUG 6576 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:50:08.472 DEBUG 6576 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:50:08.542 DEBUG 6576 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:50:08.544 DEBUG 6576 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:50:08.544 DEBUG 6576 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:50:08.554 DEBUG 6576 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 11:50:08.557  INFO 6576 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:50:27.011  INFO 6576 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[Blog{id=12, title='平时日记', content='# Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync', firstPicture='', flag='原创', views=null, appreciation=true, shareStatement=true, commentAble=true, published=false, recommend=true, creatTime=null, updateTime=null, typeId=42, userId=null, tagIds='9,6', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, 12, {}, org.apache.catalina.session.StandardSessionFacade@7a0ceae1]}
2020-04-20 11:50:27.043 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:50:27.043 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 9(Long)
2020-04-20 11:50:27.045 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:50:27.045 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:50:27.046 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 6(Long)
2020-04-20 11:50:27.047 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:50:27.048 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 11:50:27.049 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 42(Long)
2020-04-20 11:50:27.049 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 11:50:27.051 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:50:27.052 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:50:27.064 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 11:50:27.065 DEBUG 6576 --- [http-nio-8080-exec-3] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==>  Preparing: delete from t_blog_tag where blog_id = ? 
2020-04-20 11:50:27.065 DEBUG 6576 --- [http-nio-8080-exec-3] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==> Parameters: 12(Long)
2020-04-20 11:50:27.066 DEBUG 6576 --- [http-nio-8080-exec-3] c.q.m.BlogTagMapper.delBlogTagByBlogId   : <==    Updates: 2
2020-04-20 11:50:27.067 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:50:27.068 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 9(Long)
2020-04-20 11:50:27.329 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:50:27.329 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:50:27.330 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 6(Long)
2020-04-20 11:50:27.331 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:50:27.332 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.updateBlog     : ==>  Preparing: update t_blog set title = ?, content=?, firstPicture=?, flag=?, appreciation=?, shareStatement=?, commentAble=?, published=?, recommend=?, updateTime=?, type_id=?, user_id=? where id = ?; 
2020-04-20 11:50:27.335 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.updateBlog     : ==> Parameters: 平时日记(String), # Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync(String), (String), 原创(String), true(Boolean), true(Boolean), true(Boolean), false(Boolean), true(Boolean), 2020-04-20 11:50:27.064(Timestamp), 42(Long), 1(Long), 12(Long)
2020-04-20 11:50:27.341 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.updateBlog     : <==    Updates: 1
2020-04-20 11:50:27.464  INFO 6576 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 11:50:27.479  INFO 6576 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@7a0ceae1]}
2020-04-20 11:50:27.480 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:50:27.481 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:50:27.482 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:50:27.488 DEBUG 6576 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:50:27.488 DEBUG 6576 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:50:27.495 DEBUG 6576 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:50:27.496 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 11:50:27.496 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 11:50:27.502 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 11:50:27.503  INFO 6576 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:50:29.986  INFO 6576 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 11:50:29.988 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:50:29.988 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:50:29.989 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:50:29.990 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:50:29.990 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:50:29.992 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:50:29.994 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:50:29.994 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:50:30.003 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 11:50:30.008  INFO 6576 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 11:50:32.150  INFO 6576 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[Blog{id=12, title='平时日记', content='# Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync', firstPicture='', flag='原创', views=null, appreciation=true, shareStatement=true, commentAble=true, published=true, recommend=true, creatTime=null, updateTime=null, typeId=42, userId=null, tagIds='9,6', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, 12, {}, org.apache.catalina.session.StandardSessionFacade@7a0ceae1]}
2020-04-20 11:50:32.153 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:50:32.153 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 9(Long)
2020-04-20 11:50:32.154 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:50:32.155 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 11:50:32.156 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 6(Long)
2020-04-20 11:50:32.156 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 11:50:32.158 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 11:50:32.159 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 42(Long)
2020-04-20 11:50:32.162 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 11:50:32.166 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:50:32.166 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:50:32.171 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 11:50:32.172 DEBUG 6576 --- [http-nio-8080-exec-10] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==>  Preparing: delete from t_blog_tag where blog_id = ? 
2020-04-20 11:50:32.172 DEBUG 6576 --- [http-nio-8080-exec-10] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==> Parameters: 12(Long)
2020-04-20 11:50:32.173 DEBUG 6576 --- [http-nio-8080-exec-10] c.q.m.BlogTagMapper.delBlogTagByBlogId   : <==    Updates: 2
2020-04-20 11:50:32.174 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:50:32.174 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 9(Long)
2020-04-20 11:50:32.178 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:50:32.178 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 11:50:32.179 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 6(Long)
2020-04-20 11:50:32.182 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 11:50:32.183 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.updateBlog     : ==>  Preparing: update t_blog set title = ?, content=?, firstPicture=?, flag=?, appreciation=?, shareStatement=?, commentAble=?, published=?, recommend=?, updateTime=?, type_id=?, user_id=? where id = ?; 
2020-04-20 11:50:32.185 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.updateBlog     : ==> Parameters: 平时日记(String), # Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync(String), (String), 原创(String), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2020-04-20 11:50:32.172(Timestamp), 42(Long), 1(Long), 12(Long)
2020-04-20 11:50:32.191 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.updateBlog     : <==    Updates: 1
2020-04-20 11:50:32.352  INFO 6576 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 11:50:32.357  INFO 6576 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@7a0ceae1]}
2020-04-20 11:50:32.359 DEBUG 6576 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:50:32.359 DEBUG 6576 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:50:32.360 DEBUG 6576 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:50:32.364 DEBUG 6576 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 11:50:32.364 DEBUG 6576 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 11:50:32.365 DEBUG 6576 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:50:32.368 DEBUG 6576 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 11:50:32.369 DEBUG 6576 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 11:50:32.373 DEBUG 6576 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 11:50:32.377  INFO 6576 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 11:55:47.286  INFO 6576 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=1, pageSize=5}, Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=43, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=43, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@7a0ceae1]}
2020-04-20 11:55:47.292 DEBUG 6576 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? AND b.title LIKE ? AND b.type_id = ? 
2020-04-20 11:55:47.292 DEBUG 6576 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %%(String), 43(Long)
2020-04-20 11:55:47.294 DEBUG 6576 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:55:47.294 DEBUG 6576 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? and b.title like ? and b.type_id = ? order by bid LIMIT ? 
2020-04-20 11:55:47.294 DEBUG 6576 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), %%(String), 43(Long), 5(Integer)
2020-04-20 11:55:47.296 DEBUG 6576 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 11:55:47.302  INFO 6576 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 11:55:49.178  INFO 6576 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=1, pageSize=5}, Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=42, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=42, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@7a0ceae1]}
2020-04-20 11:55:49.181 DEBUG 6576 --- [http-nio-8080-exec-3] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? AND b.title LIKE ? AND b.type_id = ? 
2020-04-20 11:55:49.182 DEBUG 6576 --- [http-nio-8080-exec-3] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %%(String), 42(Long)
2020-04-20 11:55:49.183 DEBUG 6576 --- [http-nio-8080-exec-3] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:55:49.183 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? and b.title like ? and b.type_id = ? order by bid LIMIT ? 
2020-04-20 11:55:49.184 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), %%(String), 42(Long), 5(Integer)
2020-04-20 11:55:49.188 DEBUG 6576 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 11:55:49.189  INFO 6576 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 11:55:50.480  INFO 6576 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=1, pageSize=5}, Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@7a0ceae1]}
2020-04-20 11:55:50.484 DEBUG 6576 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? AND b.title LIKE ? 
2020-04-20 11:55:50.485 DEBUG 6576 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %%(String)
2020-04-20 11:55:50.486 DEBUG 6576 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 11:55:50.487 DEBUG 6576 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? and b.title like ? order by bid LIMIT ? 
2020-04-20 11:55:50.488 DEBUG 6576 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), %%(String), 5(Integer)
2020-04-20 11:55:50.492 DEBUG 6576 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 11:55:50.497  INFO 6576 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 11:56:15.636  INFO 6576 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 11:56:15.638 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 11:56:15.638 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 11:56:15.644 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 11:56:15.645 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 11:56:15.645 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 11:56:15.646 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 11:56:15.647 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 11:56:15.648 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 11:56:15.655 DEBUG 6576 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 11:56:15.661  INFO 6576 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 12:01:08.641  INFO 1020 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 1020 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 12:01:08.648 DEBUG 1020 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 12:01:08.649  INFO 1020 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 12:01:08.718  INFO 1020 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 12:01:08.718  INFO 1020 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 12:01:09.654  INFO 1020 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 12:01:09.689  INFO 1020 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 22ms. Found 0 JDBC repository interfaces.
2020-04-20 12:01:10.505  INFO 1020 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 12:01:10.515  INFO 1020 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 12:01:10.516  INFO 1020 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 12:01:10.612  INFO 1020 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 12:01:10.612  INFO 1020 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1894 ms
2020-04-20 12:01:11.336  INFO 1020 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 12:01:11.425  INFO 1020 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 12:01:12.087  INFO 1020 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 12:01:12.144  INFO 1020 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 12:01:12.148  INFO 1020 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.981 seconds (JVM running for 4.81)
2020-04-20 12:01:12.940  INFO 1020 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 12:01:12.941  INFO 1020 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 12:01:12.953  INFO 1020 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 12 ms
2020-04-20 12:01:12.983  INFO 1020 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 12:01:12.990  INFO 1020 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 12:01:17.070  INFO 1020 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@291db7cd, {}]}
2020-04-20 12:01:17.098  INFO 1020 --- [http-nio-8080-exec-10] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 12:01:17.620  INFO 1020 --- [http-nio-8080-exec-10] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 12:01:17.625 DEBUG 1020 --- [http-nio-8080-exec-10] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 12:01:17.645 DEBUG 1020 --- [http-nio-8080-exec-10] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 12:01:17.662 DEBUG 1020 --- [http-nio-8080-exec-10] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 12:01:17.666  INFO 1020 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 12:01:19.107  INFO 1020 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@291db7cd]}
2020-04-20 12:01:19.114 DEBUG 1020 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:01:19.114 DEBUG 1020 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:01:19.115 DEBUG 1020 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:01:19.168 DEBUG 1020 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 12:01:19.169 DEBUG 1020 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 12:01:19.171 DEBUG 1020 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 12:01:19.173 DEBUG 1020 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 12:01:19.174 DEBUG 1020 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 12:01:19.183 DEBUG 1020 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 12:01:19.185  INFO 1020 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 12:01:20.810  INFO 1020 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/13/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.del', args=[13, {}]}
2020-04-20 12:01:20.815 DEBUG 1020 --- [http-nio-8080-exec-6] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==>  Preparing: delete from t_blog_tag where blog_id = ? 
2020-04-20 12:01:20.816 DEBUG 1020 --- [http-nio-8080-exec-6] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==> Parameters: 13(Long)
2020-04-20 12:01:20.822 DEBUG 1020 --- [http-nio-8080-exec-6] c.q.m.BlogTagMapper.delBlogTagByBlogId   : <==    Updates: 1
2020-04-20 12:01:20.823 DEBUG 1020 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.delBlog        : ==>  Preparing: delete from t_blog where id=? 
2020-04-20 12:01:20.824 DEBUG 1020 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.delBlog        : ==> Parameters: 13(Long)
2020-04-20 12:01:20.846 DEBUG 1020 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.delBlog        : <==    Updates: 1
2020-04-20 12:01:20.967  INFO 1020 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : redirect:admin/blogs
2020-04-20 12:02:04.073  INFO 3532 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 3532 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 12:02:04.076 DEBUG 3532 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 12:02:04.076  INFO 3532 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 12:02:04.155  INFO 3532 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 12:02:04.155  INFO 3532 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 12:02:05.039  INFO 3532 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 12:02:05.057  INFO 3532 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 13ms. Found 0 JDBC repository interfaces.
2020-04-20 12:02:05.783  INFO 3532 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 12:02:05.791  INFO 3532 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 12:02:05.791  INFO 3532 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 12:02:05.876  INFO 3532 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 12:02:05.876  INFO 3532 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1721 ms
2020-04-20 12:02:06.700  INFO 3532 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 12:02:06.791  INFO 3532 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 12:02:07.356  INFO 3532 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 12:02:07.425  INFO 3532 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 12:02:07.428  INFO 3532 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.817 seconds (JVM running for 4.666)
2020-04-20 12:02:10.328  INFO 3532 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 12:02:10.329  INFO 3532 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 12:02:10.342  INFO 3532 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 12 ms
2020-04-20 12:02:10.379  INFO 3532 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 12:02:10.385  INFO 3532 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 12:02:14.212  INFO 3532 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@7288e51c, {}]}
2020-04-20 12:02:14.243  INFO 3532 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 12:02:14.781  INFO 3532 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 12:02:14.786 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 12:02:14.808 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 12:02:14.833 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 12:02:14.840  INFO 3532 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 12:02:16.973  INFO 3532 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@7288e51c]}
2020-04-20 12:02:16.981 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:02:16.982 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:02:16.983 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:02:17.033 DEBUG 3532 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 12:02:17.033 DEBUG 3532 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 12:02:17.034 DEBUG 3532 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 12:02:17.036 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 12:02:17.037 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 12:02:17.047 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 12:02:17.050  INFO 3532 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 12:02:19.205  INFO 3532 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 12:02:19.210 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:02:19.210 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:02:19.214 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:02:19.218 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 12:02:19.218 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 12:02:19.220 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 12:02:19.221  INFO 3532 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 12:02:29.168  INFO 3532 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.add', args=[Blog{id=null, title='x', content='cxcx', firstPicture='', flag='原创', views=null, appreciation=false, shareStatement=false, commentAble=true, published=true, recommend=false, creatTime=null, updateTime=null, typeId=42, userId=null, tagIds='6,8,9', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}, org.apache.catalina.session.StandardSessionFacade@7288e51c]}
2020-04-20 12:02:29.192 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 12:02:29.192 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 42(Long)
2020-04-20 12:02:29.193 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 12:02:29.195 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 12:02:29.196 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 6(Long)
2020-04-20 12:02:29.197 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 12:02:29.198 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 12:02:29.198 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 8(Long)
2020-04-20 12:02:29.199 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 12:02:29.200 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 12:02:29.200 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 9(Long)
2020-04-20 12:02:29.201 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 12:02:29.203 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.addBlog        : ==>  Preparing: insert into t_blog(title,content,firstPicture,flag,views,appreciation,shareStatement,commentAble,published,recommend,creatTime,updateTime,type_id,user_id) values (?,?,?,?,?,?, ?,?,?,?,?, ?,?,?) 
2020-04-20 12:02:29.204 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.addBlog        : ==> Parameters: x(String), cxcx(String), (String), 原创(String), 0(Integer), false(Boolean), false(Boolean), true(Boolean), true(Boolean), false(Boolean), 2020-04-20 12:02:29.202(Timestamp), 2020-04-20 12:02:29.202(Timestamp), 42(Long), 1(Long)
2020-04-20 12:02:29.207 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.addBlog        : <==    Updates: 1
2020-04-20 12:02:29.210 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 12:02:29.211 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 15(Long), 6(Long)
2020-04-20 12:02:29.408 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 12:02:29.409 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 12:02:29.409 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 15(Long), 8(Long)
2020-04-20 12:02:29.411 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 12:02:29.411 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 12:02:29.412 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 15(Long), 9(Long)
2020-04-20 12:02:29.413 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 12:02:29.522  INFO 3532 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 12:02:29.541  INFO 3532 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@7288e51c]}
2020-04-20 12:02:29.543 DEBUG 3532 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:02:29.543 DEBUG 3532 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:02:29.544 DEBUG 3532 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:02:29.550 DEBUG 3532 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 12:02:29.550 DEBUG 3532 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 12:02:29.552 DEBUG 3532 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 12:02:29.552 DEBUG 3532 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 12:02:29.553 DEBUG 3532 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 12:02:29.559 DEBUG 3532 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 12:02:29.560  INFO 3532 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 12:02:31.242  INFO 3532 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/15/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.del', args=[15, {}]}
2020-04-20 12:02:31.244 DEBUG 3532 --- [http-nio-8080-exec-8] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==>  Preparing: delete from t_blog_tag where blog_id = ? 
2020-04-20 12:02:31.244 DEBUG 3532 --- [http-nio-8080-exec-8] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==> Parameters: 15(Long)
2020-04-20 12:02:31.245 DEBUG 3532 --- [http-nio-8080-exec-8] c.q.m.BlogTagMapper.delBlogTagByBlogId   : <==    Updates: 3
2020-04-20 12:02:31.245 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.delBlog        : ==>  Preparing: delete from t_blog where id=? 
2020-04-20 12:02:31.246 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.delBlog        : ==> Parameters: 15(Long)
2020-04-20 12:02:31.247 DEBUG 3532 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.delBlog        : <==    Updates: 1
2020-04-20 12:02:31.396  INFO 3532 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 12:02:31.400  INFO 3532 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=删除成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@7288e51c]}
2020-04-20 12:02:31.400 DEBUG 3532 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:02:31.400 DEBUG 3532 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:02:31.402 DEBUG 3532 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:02:31.405 DEBUG 3532 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 12:02:31.406 DEBUG 3532 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 12:02:31.407 DEBUG 3532 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 12:02:31.407 DEBUG 3532 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 12:02:31.407 DEBUG 3532 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 12:02:31.481 DEBUG 3532 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 12:02:31.483  INFO 3532 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 12:10:26.152  INFO 3532 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@7288e51c]}
2020-04-20 12:10:26.157 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:10:26.158 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:10:26.160 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:10:26.167 DEBUG 3532 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 12:10:26.168 DEBUG 3532 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 12:10:26.169 DEBUG 3532 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 12:10:26.170 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 12:10:26.171 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 12:10:26.178 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 12:10:26.181  INFO 3532 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 12:10:27.845  INFO 3532 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 12:10:27.846 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:10:27.846 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:10:27.847 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:10:27.848 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 12:10:27.848 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 12:10:27.849 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 12:10:27.850 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 12:10:27.851 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 12:10:27.860 DEBUG 3532 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 12:10:27.866  INFO 3532 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 12:10:29.970  INFO 3532 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 12:10:29.972 DEBUG 3532 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:10:29.975 DEBUG 3532 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:10:29.979 DEBUG 3532 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:10:29.980 DEBUG 3532 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 12:10:29.980 DEBUG 3532 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 12:10:29.982 DEBUG 3532 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 12:10:29.983  INFO 3532 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 12:10:31.120  INFO 3532 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@7288e51c]}
2020-04-20 12:10:31.123 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:10:31.123 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:10:31.124 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:10:31.130 DEBUG 3532 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 12:10:31.130 DEBUG 3532 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 12:10:31.131 DEBUG 3532 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 12:10:31.132 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 12:10:31.132 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 12:10:31.136 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 12:10:31.137  INFO 3532 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 12:12:05.445  INFO 3532 --- [Thread-12] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-20 12:12:05.447  INFO 3532 --- [Thread-12] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-04-20 12:12:05.463  INFO 3532 --- [Thread-12] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-04-20 12:12:05.901  INFO 3532 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 3532 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 12:12:05.901 DEBUG 3532 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 12:12:05.901  INFO 3532 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 12:12:06.129  INFO 3532 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 12:12:06.139  INFO 3532 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 8ms. Found 0 JDBC repository interfaces.
2020-04-20 12:12:06.293  INFO 3532 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 12:12:06.294  INFO 3532 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 12:12:06.294  INFO 3532 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 12:12:06.317  INFO 3532 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 12:12:06.319  INFO 3532 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 416 ms
2020-04-20 12:12:06.589  INFO 3532 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 12:12:06.625  INFO 3532 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 12:12:07.177  INFO 3532 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 12:12:07.206  INFO 3532 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 12:12:07.208  INFO 3532 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 1.339 seconds (JVM running for 604.445)
2020-04-20 12:12:07.210  INFO 3532 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-20 12:12:08.875  INFO 3532 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 12:12:08.876  INFO 3532 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 12:12:08.891  INFO 3532 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 15 ms
2020-04-20 12:12:08.895  INFO 3532 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 12:12:08.897  INFO 3532 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 12:12:12.172  INFO 3532 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@33197e12, {}]}
2020-04-20 12:12:12.176  INFO 3532 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
2020-04-20 12:12:12.212  INFO 3532 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
2020-04-20 12:12:12.212 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 12:12:12.212 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 12:12:12.217 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 12:12:12.218  INFO 3532 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 12:12:13.366  INFO 3532 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@33197e12]}
2020-04-20 12:12:13.374 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:12:13.374 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:12:13.375 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:12:13.382 DEBUG 3532 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 12:12:13.383 DEBUG 3532 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 12:12:13.385 DEBUG 3532 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 12:12:13.386 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 12:12:13.386 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 12:12:13.390 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 12:12:13.392  INFO 3532 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 12:12:18.367  INFO 3532 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 12:12:18.369 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:12:18.369 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:12:18.372 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:12:18.375 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 12:12:18.376 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 12:12:18.378 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 12:12:18.380  INFO 3532 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 12:12:22.623  INFO 3532 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/logout', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.logout', args=[org.apache.catalina.session.StandardSessionFacade@33197e12]}
2020-04-20 12:12:22.624  INFO 3532 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : redirect:/admin
2020-04-20 12:12:22.641  INFO 3532 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 12:12:22.642  INFO 3532 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 12:12:26.396  INFO 3532 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@33197e12, {}]}
2020-04-20 12:12:26.400 DEBUG 3532 --- [http-nio-8080-exec-2] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 12:12:26.402 DEBUG 3532 --- [http-nio-8080-exec-2] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 12:12:26.404 DEBUG 3532 --- [http-nio-8080-exec-2] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 12:12:26.404  INFO 3532 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 12:12:29.995  INFO 3532 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@33197e12]}
2020-04-20 12:12:29.997 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:12:29.998 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:12:30.001 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:12:30.004 DEBUG 3532 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 12:12:30.005 DEBUG 3532 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 12:12:30.006 DEBUG 3532 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 12:12:30.008 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 12:12:30.009 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 12:12:30.013 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 12:12:30.014  INFO 3532 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 12:12:31.854  INFO 3532 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@33197e12]}
2020-04-20 12:12:31.857 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:12:31.857 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:12:31.860 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:12:31.863 DEBUG 3532 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 12:12:31.863 DEBUG 3532 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 12:12:31.864 DEBUG 3532 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 12:12:31.865 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 12:12:31.865 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 12:12:31.875 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 12:12:31.876  INFO 3532 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 12:12:32.773  INFO 3532 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 12:12:32.775 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:12:32.777 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:12:32.778 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:12:32.779 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 12:12:32.779 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 12:12:32.780 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 12:12:32.780  INFO 3532 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 12:12:34.022  INFO 3532 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@33197e12]}
2020-04-20 12:12:34.024 DEBUG 3532 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:12:34.024 DEBUG 3532 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:12:34.025 DEBUG 3532 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:12:34.027 DEBUG 3532 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 12:12:34.027 DEBUG 3532 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 12:12:34.028 DEBUG 3532 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 12:12:34.028 DEBUG 3532 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 12:12:34.029 DEBUG 3532 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 12:12:34.033 DEBUG 3532 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 12:12:34.037  INFO 3532 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 12:12:34.697  INFO 3532 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 12:12:34.698 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:12:34.698 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:12:34.699 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:12:34.700 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 12:12:34.700 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 12:12:34.701 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 12:12:34.701  INFO 3532 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 12:12:35.265  INFO 3532 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 12:12:35.266 DEBUG 3532 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:12:35.266 DEBUG 3532 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:12:35.267 DEBUG 3532 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:12:35.267 DEBUG 3532 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 12:12:35.268 DEBUG 3532 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 12:12:35.269 DEBUG 3532 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 12:12:35.270  INFO 3532 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 12:12:35.982  INFO 3532 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 12:12:35.983 DEBUG 3532 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:12:35.983 DEBUG 3532 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:12:35.984 DEBUG 3532 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:12:35.984 DEBUG 3532 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 12:12:35.984 DEBUG 3532 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 12:12:35.985 DEBUG 3532 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 12:12:35.985  INFO 3532 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 12:12:36.563  INFO 3532 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 12:12:36.564 DEBUG 3532 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:12:36.564 DEBUG 3532 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:12:36.565 DEBUG 3532 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:12:36.566 DEBUG 3532 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 12:12:36.566 DEBUG 3532 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 12:12:36.567 DEBUG 3532 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 12:12:36.567  INFO 3532 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 12:12:37.490  INFO 3532 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@33197e12]}
2020-04-20 12:12:37.491 DEBUG 3532 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:12:37.492 DEBUG 3532 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:12:37.492 DEBUG 3532 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:12:37.495 DEBUG 3532 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 12:12:37.495 DEBUG 3532 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 12:12:37.496 DEBUG 3532 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 12:12:37.496 DEBUG 3532 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 12:12:37.496 DEBUG 3532 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 12:12:37.501 DEBUG 3532 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 12:12:37.504  INFO 3532 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 12:12:41.479  INFO 3532 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 12:12:41.480 DEBUG 3532 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:12:41.481 DEBUG 3532 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:12:41.481 DEBUG 3532 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:12:41.482 DEBUG 3532 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 12:12:41.482 DEBUG 3532 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 12:12:41.484 DEBUG 3532 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 12:12:41.485 DEBUG 3532 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 12:12:41.486 DEBUG 3532 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 12:12:41.491 DEBUG 3532 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 12:12:41.500  INFO 3532 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 12:20:43.326  INFO 3532 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@33197e12]}
2020-04-20 12:20:43.329 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:20:43.329 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:20:43.332 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:20:43.335 DEBUG 3532 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 12:20:43.335 DEBUG 3532 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 12:20:43.337 DEBUG 3532 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 12:20:43.340 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 12:20:43.341 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 12:20:43.351 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 12:20:43.353  INFO 3532 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 12:20:44.704  INFO 3532 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 12:20:44.706 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:20:44.706 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:20:44.707 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:20:44.708 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 12:20:44.708 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 12:20:44.709 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 12:20:44.710 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 12:20:44.710 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 12:20:44.715 DEBUG 3532 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 12:20:44.719  INFO 3532 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 12:20:49.124  INFO 3532 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[Blog{id=12, title='平时日记', content='# Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync', firstPicture='', flag='原创', views=null, appreciation=true, shareStatement=true, commentAble=true, published=true, recommend=true, creatTime=null, updateTime=null, typeId=42, userId=null, tagIds='9,6', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, 12, {}, org.apache.catalina.session.StandardSessionFacade@33197e12]}
2020-04-20 12:20:49.227 DEBUG 3532 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 12:20:49.227 DEBUG 3532 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 9(Long)
2020-04-20 12:20:49.228 DEBUG 3532 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 12:20:49.229 DEBUG 3532 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 12:20:49.229 DEBUG 3532 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 6(Long)
2020-04-20 12:20:49.229 DEBUG 3532 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 12:20:49.230 DEBUG 3532 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 12:20:49.231 DEBUG 3532 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 42(Long)
2020-04-20 12:20:49.232 DEBUG 3532 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 12:20:49.233 DEBUG 3532 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 12:20:49.234 DEBUG 3532 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 12:20:49.240 DEBUG 3532 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 12:20:49.240 DEBUG 3532 --- [http-nio-8080-exec-5] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==>  Preparing: delete from t_blog_tag where blog_id = ? 
2020-04-20 12:20:49.241 DEBUG 3532 --- [http-nio-8080-exec-5] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==> Parameters: 12(Long)
2020-04-20 12:20:49.242 DEBUG 3532 --- [http-nio-8080-exec-5] c.q.m.BlogTagMapper.delBlogTagByBlogId   : <==    Updates: 2
2020-04-20 12:20:49.242 DEBUG 3532 --- [http-nio-8080-exec-5] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 12:20:49.243 DEBUG 3532 --- [http-nio-8080-exec-5] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 9(Long)
2020-04-20 12:20:49.493 DEBUG 3532 --- [http-nio-8080-exec-5] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 12:20:49.494 DEBUG 3532 --- [http-nio-8080-exec-5] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 12:20:49.494 DEBUG 3532 --- [http-nio-8080-exec-5] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 6(Long)
2020-04-20 12:20:49.495 DEBUG 3532 --- [http-nio-8080-exec-5] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 12:20:49.495 DEBUG 3532 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.updateBlog     : ==>  Preparing: update t_blog set title = ?, content=?, firstPicture=?, flag=?, appreciation=?, shareStatement=?, commentAble=?, published=?, recommend=?, updateTime=?, type_id=?, user_id=? where id = ?; 
2020-04-20 12:20:49.498 DEBUG 3532 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.updateBlog     : ==> Parameters: 平时日记(String), # Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync(String), (String), 原创(String), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2020-04-20 12:20:49.24(Timestamp), 42(Long), 1(Long), 12(Long)
2020-04-20 12:20:49.505 DEBUG 3532 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.updateBlog     : <==    Updates: 1
2020-04-20 12:20:49.620  INFO 3532 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 12:20:49.626  INFO 3532 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@33197e12]}
2020-04-20 12:20:49.626 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 12:20:49.626 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 12:20:49.628 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 12:20:49.630 DEBUG 3532 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 12:20:49.630 DEBUG 3532 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 12:20:49.631 DEBUG 3532 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 12:20:49.631 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 12:20:49.632 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 12:20:49.636 DEBUG 3532 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 12:20:49.638  INFO 3532 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 12:21:18.215  INFO 3532 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[]}
2020-04-20 12:21:18.219  INFO 3532 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : index
2020-04-20 12:25:56.958  INFO 3532 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[]}
2020-04-20 12:25:56.959  INFO 3532 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : index
2020-04-20 12:25:58.193  INFO 3532 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[]}
2020-04-20 12:25:58.194  INFO 3532 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : index
2020-04-20 12:26:12.314  INFO 3532 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[]}
2020-04-20 12:26:12.315  INFO 3532 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : index
2020-04-20 12:26:35.278  INFO 3532 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[]}
2020-04-20 12:26:35.278  INFO 3532 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : index
2020-04-20 12:27:55.950  INFO 3532 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[]}
2020-04-20 12:27:55.951  INFO 3532 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : index
2020-04-20 12:28:28.443  INFO 3532 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[]}
2020-04-20 12:28:28.443  INFO 3532 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : index
2020-04-20 12:28:47.780  INFO 3532 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[]}
2020-04-20 12:28:47.780  INFO 3532 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : return : index
2020-04-20 12:28:58.697  INFO 3532 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[]}
2020-04-20 12:28:58.697  INFO 3532 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : return : index
2020-04-20 12:33:00.258  INFO 3532 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[]}
2020-04-20 12:33:00.259  INFO 3532 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : index
2020-04-20 12:33:27.934  INFO 3532 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[]}
2020-04-20 12:33:27.934  INFO 3532 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : return : index
2020-04-20 12:33:29.905  INFO 3532 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[]}
2020-04-20 12:33:29.906  INFO 3532 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : index
2020-04-20 16:04:56.888  INFO 15492 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 15492 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 16:04:56.890 DEBUG 15492 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 16:04:56.890  INFO 15492 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 16:04:56.942  INFO 15492 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 16:04:56.942  INFO 15492 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 16:04:57.694  INFO 15492 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 16:04:57.712  INFO 15492 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 13ms. Found 0 JDBC repository interfaces.
2020-04-20 16:04:58.424  INFO 15492 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 16:04:58.433  INFO 15492 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 16:04:58.433  INFO 15492 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 16:04:58.528  INFO 15492 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 16:04:58.529  INFO 15492 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1586 ms
2020-04-20 16:04:59.261  INFO 15492 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 16:04:59.370  INFO 15492 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 16:04:59.899  INFO 15492 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 16:04:59.976  INFO 15492 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 16:04:59.979  INFO 15492 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.611 seconds (JVM running for 4.538)
2020-04-20 16:05:02.646  INFO 15492 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 16:05:02.646  INFO 15492 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 16:05:02.658  INFO 15492 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 12 ms
2020-04-20 16:05:02.696  INFO 15492 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 16:05:02.706  INFO 15492 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 16:05:03.273  INFO 15492 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 16:05:03.302 DEBUG 15492 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 16:05:03.320 DEBUG 15492 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 16:05:03.347 DEBUG 15492 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 1
2020-04-20 16:05:03.355  INFO 15492 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : index
2020-04-20 16:05:54.391  INFO 15492 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 16:05:54.396 DEBUG 15492 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 16:05:54.397 DEBUG 15492 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 16:05:54.404 DEBUG 15492 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 1
2020-04-20 16:05:54.407  INFO 15492 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : index
2020-04-20 16:28:57.536  INFO 15492 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 16:28:57.543  INFO 15492 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 16:29:01.216  INFO 15492 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@6f642dd5, {}]}
2020-04-20 16:29:01.220 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 16:29:01.221 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 16:29:01.223 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 16:29:01.224  INFO 15492 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 16:29:03.504  INFO 15492 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@6f642dd5]}
2020-04-20 16:29:03.515 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 16:29:03.516 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 16:29:03.517 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 16:29:03.560 DEBUG 15492 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 16:29:03.560 DEBUG 15492 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 16:29:03.563 DEBUG 15492 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 16:29:03.564 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 16:29:03.565 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 16:29:03.570 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 16:29:03.572  INFO 15492 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 16:29:05.517  INFO 15492 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 16:29:05.520 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 16:29:05.520 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 16:29:05.522 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 16:29:05.526 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 16:29:05.527 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 16:29:05.529 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 16:29:05.529  INFO 15492 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 16:29:14.161  INFO 15492 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.add', args=[Blog{id=null, title='q', content='q', firstPicture='', flag='原创', views=null, appreciation=true, shareStatement=false, commentAble=false, published=true, recommend=false, creatTime=null, updateTime=null, typeId=43, userId=null, tagIds='7', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}, org.apache.catalina.session.StandardSessionFacade@6f642dd5]}
2020-04-20 16:29:14.164 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 16:29:14.164 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 43(Long)
2020-04-20 16:29:14.165 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 16:29:14.167 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 16:29:14.168 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 7(Long)
2020-04-20 16:29:14.170 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 16:29:14.172 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.addBlog        : ==>  Preparing: insert into t_blog(title,content,firstPicture,flag,views,appreciation,shareStatement,commentAble,published,recommend,creatTime,updateTime,type_id,user_id) values (?,?,?,?,?,?, ?,?,?,?,?, ?,?,?) 
2020-04-20 16:29:14.173 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.addBlog        : ==> Parameters: q(String), q(String), (String), 原创(String), 0(Integer), true(Boolean), false(Boolean), false(Boolean), true(Boolean), false(Boolean), 2020-04-20 16:29:14.172(Timestamp), 2020-04-20 16:29:14.172(Timestamp), 43(Long), 1(Long)
2020-04-20 16:29:14.175 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.addBlog        : <==    Updates: 1
2020-04-20 16:29:14.178 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 16:29:14.178 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 16(Long), 7(Long)
2020-04-20 16:29:14.446 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 16:29:14.572  INFO 15492 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 16:29:14.588  INFO 15492 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@6f642dd5]}
2020-04-20 16:29:14.589 DEBUG 15492 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 16:29:14.590 DEBUG 15492 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 16:29:14.591 DEBUG 15492 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 16:29:14.597 DEBUG 15492 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 16:29:14.597 DEBUG 15492 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 16:29:14.598 DEBUG 15492 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 16:29:14.599 DEBUG 15492 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 16:29:14.600 DEBUG 15492 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 16:29:14.605 DEBUG 15492 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 16:29:14.607  INFO 15492 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 16:29:15.706  INFO 15492 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 16:29:15.709 DEBUG 15492 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 16:29:15.709 DEBUG 15492 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 16:29:15.710 DEBUG 15492 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 16:29:15.711 DEBUG 15492 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 16:29:15.712 DEBUG 15492 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 16:29:15.713 DEBUG 15492 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 16:29:15.713  INFO 15492 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 16:29:23.408  INFO 15492 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.add', args=[Blog{id=null, title='s', content='s', firstPicture='', flag='原创', views=null, appreciation=false, shareStatement=false, commentAble=false, published=true, recommend=false, creatTime=null, updateTime=null, typeId=42, userId=null, tagIds='8', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}, org.apache.catalina.session.StandardSessionFacade@6f642dd5]}
2020-04-20 16:29:23.413 DEBUG 15492 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 16:29:23.413 DEBUG 15492 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 42(Long)
2020-04-20 16:29:23.414 DEBUG 15492 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 16:29:23.417 DEBUG 15492 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 16:29:23.419 DEBUG 15492 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 8(Long)
2020-04-20 16:29:23.421 DEBUG 15492 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 16:29:23.425 DEBUG 15492 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.addBlog        : ==>  Preparing: insert into t_blog(title,content,firstPicture,flag,views,appreciation,shareStatement,commentAble,published,recommend,creatTime,updateTime,type_id,user_id) values (?,?,?,?,?,?, ?,?,?,?,?, ?,?,?) 
2020-04-20 16:29:23.425 DEBUG 15492 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.addBlog        : ==> Parameters: s(String), s(String), (String), 原创(String), 0(Integer), false(Boolean), false(Boolean), false(Boolean), true(Boolean), false(Boolean), 2020-04-20 16:29:23.424(Timestamp), 2020-04-20 16:29:23.424(Timestamp), 42(Long), 1(Long)
2020-04-20 16:29:23.427 DEBUG 15492 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.addBlog        : <==    Updates: 1
2020-04-20 16:29:23.427 DEBUG 15492 --- [http-nio-8080-exec-2] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 16:29:23.428 DEBUG 15492 --- [http-nio-8080-exec-2] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 17(Long), 8(Long)
2020-04-20 16:29:23.429 DEBUG 15492 --- [http-nio-8080-exec-2] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 16:29:23.752  INFO 15492 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 16:29:23.757  INFO 15492 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@6f642dd5]}
2020-04-20 16:29:23.758 DEBUG 15492 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 16:29:23.758 DEBUG 15492 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 16:29:23.760 DEBUG 15492 --- [http-nio-8080-exec-5] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 16:29:23.763 DEBUG 15492 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 16:29:23.764 DEBUG 15492 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 16:29:23.765 DEBUG 15492 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 16:29:23.766 DEBUG 15492 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 16:29:23.766 DEBUG 15492 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 16:29:23.880 DEBUG 15492 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 3
2020-04-20 16:29:23.881  INFO 15492 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 16:29:29.235  INFO 15492 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=1, pageSize=5}, Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=43, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=43, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@6f642dd5]}
2020-04-20 16:29:29.239 DEBUG 15492 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? AND b.title LIKE ? AND b.type_id = ? 
2020-04-20 16:29:29.240 DEBUG 15492 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %%(String), 43(Long)
2020-04-20 16:29:29.241 DEBUG 15492 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 16:29:29.241 DEBUG 15492 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? and b.title like ? and b.type_id = ? order by bid LIMIT ? 
2020-04-20 16:29:29.242 DEBUG 15492 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), %%(String), 43(Long), 5(Integer)
2020-04-20 16:29:29.244 DEBUG 15492 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 16:29:29.245  INFO 15492 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 16:29:31.046  INFO 15492 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=1, pageSize=5}, Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=42, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=42, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@6f642dd5]}
2020-04-20 16:29:31.049 DEBUG 15492 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? AND b.title LIKE ? AND b.type_id = ? 
2020-04-20 16:29:31.050 DEBUG 15492 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %%(String), 42(Long)
2020-04-20 16:29:31.054 DEBUG 15492 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 16:29:31.055 DEBUG 15492 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? and b.title like ? and b.type_id = ? order by bid LIMIT ? 
2020-04-20 16:29:31.055 DEBUG 15492 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), %%(String), 42(Long), 5(Integer)
2020-04-20 16:29:31.062 DEBUG 15492 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 2
2020-04-20 16:29:31.064  INFO 15492 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 16:34:58.677  INFO 15492 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.list', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 16:34:58.687 DEBUG 15492 --- [http-nio-8080-exec-10] c.q.mapper.TypeMapper.selectPage_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-20 16:34:58.688 DEBUG 15492 --- [http-nio-8080-exec-10] c.q.mapper.TypeMapper.selectPage_COUNT   : ==> Parameters: 
2020-04-20 16:34:58.689 DEBUG 15492 --- [http-nio-8080-exec-10] c.q.mapper.TypeMapper.selectPage_COUNT   : <==      Total: 1
2020-04-20 16:34:58.690 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.selectPage     : ==>  Preparing: select * from t_type order by id LIMIT ? 
2020-04-20 16:34:58.690 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.selectPage     : ==> Parameters: 10(Integer)
2020-04-20 16:34:58.694 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.selectPage     : <==      Total: 2
2020-04-20 16:34:58.695  INFO 15492 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/types
2020-04-20 16:34:59.861  INFO 15492 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TagController.list', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 16:34:59.871 DEBUG 15492 --- [http-nio-8080-exec-10] c.qin.mapper.TagMapper.selectPage_COUNT  : ==>  Preparing: SELECT count(0) FROM t_tag 
2020-04-20 16:34:59.871 DEBUG 15492 --- [http-nio-8080-exec-10] c.qin.mapper.TagMapper.selectPage_COUNT  : ==> Parameters: 
2020-04-20 16:34:59.872 DEBUG 15492 --- [http-nio-8080-exec-10] c.qin.mapper.TagMapper.selectPage_COUNT  : <==      Total: 1
2020-04-20 16:34:59.872 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.selectPage      : ==>  Preparing: select * from t_tag order by id LIMIT ? 
2020-04-20 16:34:59.872 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.selectPage      : ==> Parameters: 10(Integer)
2020-04-20 16:34:59.874 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.selectPage      : <==      Total: 4
2020-04-20 16:34:59.875  INFO 15492 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/tags
2020-04-20 16:35:01.546  INFO 15492 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.TypeController.list', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 16:35:01.552 DEBUG 15492 --- [http-nio-8080-exec-10] c.q.mapper.TypeMapper.selectPage_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-20 16:35:01.552 DEBUG 15492 --- [http-nio-8080-exec-10] c.q.mapper.TypeMapper.selectPage_COUNT   : ==> Parameters: 
2020-04-20 16:35:01.553 DEBUG 15492 --- [http-nio-8080-exec-10] c.q.mapper.TypeMapper.selectPage_COUNT   : <==      Total: 1
2020-04-20 16:35:01.554 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.selectPage     : ==>  Preparing: select * from t_type order by id LIMIT ? 
2020-04-20 16:35:01.554 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.selectPage     : ==> Parameters: 10(Integer)
2020-04-20 16:35:01.559 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.selectPage     : <==      Total: 2
2020-04-20 16:35:01.561  INFO 15492 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/types
2020-04-20 16:35:02.307  INFO 15492 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@6f642dd5]}
2020-04-20 16:35:02.309 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 16:35:02.311 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 16:35:02.312 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 16:35:02.316 DEBUG 15492 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 16:35:02.317 DEBUG 15492 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 16:35:02.325 DEBUG 15492 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 16:35:02.325 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 16:35:02.325 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 16:35:02.330 DEBUG 15492 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 3
2020-04-20 16:35:02.331  INFO 15492 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 17:36:02.322  INFO 10192 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 10192 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 17:36:02.328 DEBUG 10192 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 17:36:02.330  INFO 10192 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 17:36:02.448  INFO 10192 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 17:36:02.449  INFO 10192 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 17:36:03.309  INFO 10192 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 17:36:03.329  INFO 10192 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 15ms. Found 0 JDBC repository interfaces.
2020-04-20 17:36:04.078  INFO 10192 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 17:36:04.089  INFO 10192 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 17:36:04.089  INFO 10192 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 17:36:04.209  INFO 10192 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 17:36:04.209  INFO 10192 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1760 ms
2020-04-20 17:36:05.009  INFO 10192 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 17:36:05.094  INFO 10192 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 17:36:05.556  INFO 10192 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 17:36:05.601  INFO 10192 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 17:36:05.604  INFO 10192 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 4.032 seconds (JVM running for 5.168)
2020-04-20 17:36:20.048  INFO 10192 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 17:36:20.048  INFO 10192 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 17:36:20.060  INFO 10192 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 12 ms
2020-04-20 17:36:20.094  INFO 10192 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 17:36:20.101  INFO 10192 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 17:36:20.705  INFO 10192 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 17:36:20.756 DEBUG 10192 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 17:36:20.776 DEBUG 10192 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 17:36:20.794 DEBUG 10192 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 17:36:20.797 DEBUG 10192 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 17:36:20.797 DEBUG 10192 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 17:36:20.813 DEBUG 10192 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 3
2020-04-20 17:36:20.822 DEBUG 10192 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 17:36:20.822 DEBUG 10192 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 17:36:20.823 DEBUG 10192 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 17:36:20.824 DEBUG 10192 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 17:36:20.825 DEBUG 10192 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 17:36:20.826 DEBUG 10192 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 17:36:20.826  INFO 10192 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : index
2020-04-20 17:38:12.633  INFO 13948 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 13948 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 17:38:12.636 DEBUG 13948 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 17:38:12.636  INFO 13948 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 17:38:12.689  INFO 13948 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 17:38:12.690  INFO 13948 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 17:38:13.593  INFO 13948 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 17:38:13.612  INFO 13948 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 15ms. Found 0 JDBC repository interfaces.
2020-04-20 17:38:14.456  INFO 13948 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 17:38:14.465  INFO 13948 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 17:38:14.466  INFO 13948 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 17:38:14.567  INFO 13948 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 17:38:14.567  INFO 13948 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1877 ms
2020-04-20 17:38:15.292  INFO 13948 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 17:38:15.376  INFO 13948 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 17:38:15.860  INFO 13948 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 17:38:15.907  INFO 13948 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 17:38:15.910  INFO 13948 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.995 seconds (JVM running for 4.952)
2020-04-20 17:38:22.488  INFO 13948 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 17:38:22.489  INFO 13948 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 17:38:22.499  INFO 13948 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-04-20 17:38:22.533  INFO 13948 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 17:38:22.542  INFO 13948 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 17:38:23.136  INFO 13948 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 17:38:23.188 DEBUG 13948 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 17:38:23.209 DEBUG 13948 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 17:38:23.227 DEBUG 13948 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 17:38:23.231 DEBUG 13948 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 17:38:23.231 DEBUG 13948 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 17:38:23.247 DEBUG 13948 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 3
2020-04-20 17:38:23.255 DEBUG 13948 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 17:38:23.256 DEBUG 13948 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 17:38:23.257 DEBUG 13948 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 17:38:23.258 DEBUG 13948 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 17:38:23.258 DEBUG 13948 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 17:38:23.260 DEBUG 13948 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 17:38:23.260  INFO 13948 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : index
2020-04-20 17:39:05.730  INFO 11552 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 11552 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 17:39:05.733 DEBUG 11552 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 17:39:05.733  INFO 11552 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 17:39:05.789  INFO 11552 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 17:39:05.789  INFO 11552 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 17:39:06.458  INFO 11552 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 17:39:06.476  INFO 11552 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 12ms. Found 0 JDBC repository interfaces.
2020-04-20 17:39:07.171  INFO 11552 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 17:39:07.179  INFO 11552 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 17:39:07.179  INFO 11552 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 17:39:07.273  INFO 11552 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 17:39:07.273  INFO 11552 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1483 ms
2020-04-20 17:39:07.951  INFO 11552 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 17:39:08.037  INFO 11552 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 17:39:08.521  INFO 11552 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 17:39:08.574  INFO 11552 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 17:39:08.577  INFO 11552 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.353 seconds (JVM running for 4.196)
2020-04-20 17:40:51.796  INFO 11552 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 17:40:51.797  INFO 11552 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 17:40:51.806  INFO 11552 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-04-20 17:40:51.839  INFO 11552 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 17:40:51.847  INFO 11552 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 17:40:52.395  INFO 11552 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 17:40:52.448 DEBUG 11552 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 17:40:52.467 DEBUG 11552 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 17:40:52.484 DEBUG 11552 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 17:40:52.487 DEBUG 11552 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 17:40:52.488 DEBUG 11552 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 17:40:52.505 DEBUG 11552 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 3
2020-04-20 17:40:52.515 DEBUG 11552 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 17:40:52.516 DEBUG 11552 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 17:40:52.517 DEBUG 11552 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 17:40:52.519 DEBUG 11552 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 17:40:52.519 DEBUG 11552 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 17:40:52.520 DEBUG 11552 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 17:40:52.521  INFO 11552 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : index
2020-04-20 17:48:26.595  INFO 11552 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 17:48:26.601  INFO 11552 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 17:48:32.402  INFO 11552 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@719b6c4, {}]}
2020-04-20 17:48:32.407 DEBUG 11552 --- [http-nio-8080-exec-10] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 17:48:32.407 DEBUG 11552 --- [http-nio-8080-exec-10] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 17:48:32.409 DEBUG 11552 --- [http-nio-8080-exec-10] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 17:48:32.410  INFO 11552 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 17:48:36.388  INFO 11552 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@719b6c4]}
2020-04-20 17:48:36.399 DEBUG 11552 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 17:48:36.400 DEBUG 11552 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 17:48:36.401 DEBUG 11552 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 17:48:36.422 DEBUG 11552 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 17:48:36.422 DEBUG 11552 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 17:48:36.423 DEBUG 11552 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 17:48:36.425 DEBUG 11552 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 17:48:36.425 DEBUG 11552 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 17:48:36.434 DEBUG 11552 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 3
2020-04-20 17:48:36.435  INFO 11552 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 17:48:38.484  INFO 11552 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 17:48:38.490 DEBUG 11552 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 17:48:38.491 DEBUG 11552 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 17:48:38.492 DEBUG 11552 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 17:48:38.498 DEBUG 11552 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 17:48:38.498 DEBUG 11552 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 17:48:38.501 DEBUG 11552 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 17:48:38.502  INFO 11552 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 17:49:16.849  INFO 11552 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.add', args=[Blog{id=null, title='mm', content='mm', firstPicture='', flag='原创', views=null, appreciation=true, shareStatement=false, commentAble=false, published=true, recommend=false, creatTime=null, updateTime=null, typeId=43, userId=null, tagIds='6,7,8,9', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}, org.apache.catalina.session.StandardSessionFacade@719b6c4]}
2020-04-20 17:49:16.850 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 17:49:16.851 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 43(Long)
2020-04-20 17:49:16.852 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 17:49:16.853 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 17:49:16.854 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 6(Long)
2020-04-20 17:49:16.858 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 17:49:16.859 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 17:49:16.860 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 7(Long)
2020-04-20 17:49:16.861 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 17:49:16.862 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 17:49:16.862 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 8(Long)
2020-04-20 17:49:16.863 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 17:49:16.864 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 17:49:16.864 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 9(Long)
2020-04-20 17:49:16.865 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 17:49:16.866 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.addBlog        : ==>  Preparing: insert into t_blog(title,content,firstPicture,flag,views,appreciation,shareStatement,commentAble,published,recommend,creatTime,updateTime,type_id,user_id) values (?,?,?,?,?,?, ?,?,?,?,?, ?,?,?) 
2020-04-20 17:49:16.868 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.addBlog        : ==> Parameters: mm(String), mm(String), (String), 原创(String), 0(Integer), true(Boolean), false(Boolean), false(Boolean), true(Boolean), false(Boolean), 2020-04-20 17:49:16.866(Timestamp), 2020-04-20 17:49:16.866(Timestamp), 43(Long), 1(Long)
2020-04-20 17:49:16.870 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.addBlog        : <==    Updates: 1
2020-04-20 17:49:16.873 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 17:49:16.873 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 18(Long), 6(Long)
2020-04-20 17:49:17.504 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 17:49:17.504 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 17:49:17.504 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 18(Long), 7(Long)
2020-04-20 17:49:17.505 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 17:49:17.505 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 17:49:17.505 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 18(Long), 8(Long)
2020-04-20 17:49:17.886 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 17:49:17.887 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 17:49:17.887 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 18(Long), 9(Long)
2020-04-20 17:49:17.889 DEBUG 11552 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 17:49:18.068  INFO 11552 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 17:49:18.082  INFO 11552 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@719b6c4]}
2020-04-20 17:49:18.084 DEBUG 11552 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 17:49:18.084 DEBUG 11552 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 17:49:18.086 DEBUG 11552 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 17:49:18.090 DEBUG 11552 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 17:49:18.090 DEBUG 11552 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 17:49:18.092 DEBUG 11552 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 17:49:18.093 DEBUG 11552 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 17:49:18.093 DEBUG 11552 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 17:49:18.099 DEBUG 11552 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 4
2020-04-20 17:49:18.101  INFO 11552 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 17:57:45.949  INFO 9696 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 9696 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 17:57:45.951 DEBUG 9696 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 17:57:45.952  INFO 9696 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 17:57:46.001  INFO 9696 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 17:57:46.001  INFO 9696 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 17:57:46.823  INFO 9696 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 17:57:46.841  INFO 9696 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 13ms. Found 0 JDBC repository interfaces.
2020-04-20 17:57:47.580  INFO 9696 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 17:57:47.590  INFO 9696 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 17:57:47.590  INFO 9696 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 17:57:47.715  INFO 9696 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 17:57:47.715  INFO 9696 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1714 ms
2020-04-20 17:57:48.378  INFO 9696 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 17:57:48.460  INFO 9696 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 17:57:48.922  INFO 9696 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 17:57:48.972  INFO 9696 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 17:57:48.977  INFO 9696 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.427 seconds (JVM running for 4.295)
2020-04-20 17:57:55.516  INFO 9696 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 17:57:55.516  INFO 9696 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 17:57:55.527  INFO 9696 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 11 ms
2020-04-20 17:57:55.561  INFO 9696 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 17:57:55.571  INFO 9696 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 17:57:56.132  INFO 9696 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 17:57:56.183 DEBUG 9696 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 17:57:56.202 DEBUG 9696 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 17:57:56.221 DEBUG 9696 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 17:57:56.224 DEBUG 9696 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 17:57:56.224 DEBUG 9696 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 17:57:56.243 DEBUG 9696 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 4
2020-04-20 17:57:56.253 DEBUG 9696 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 17:57:56.253 DEBUG 9696 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 17:57:56.255 DEBUG 9696 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 17:57:56.259 DEBUG 9696 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 17:57:56.260 DEBUG 9696 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 17:57:56.389 ERROR 9696 --- [http-nio-8080-exec-1] c.q.handler.ControllerExceptionHandler   : Request URL : http://localhost:8080/, Exception : {}

org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.executor.ExecutorException: A query was run and no Result Maps were found for the Mapped Statement 'com.qin.mapper.TagMapper.getTagTopList'.  It's likely that neither a Result Type nor a Result Map was specified.
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at com.sun.proxy.$Proxy83.selectList(Unknown Source) ~[na:na]
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:144) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85) ~[mybatis-3.5.4.jar:3.5.4]
	at com.sun.proxy.$Proxy90.getTagTopList(Unknown Source) ~[na:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.sun.proxy.$Proxy91.getTagTopList(Unknown Source) ~[na:na]
	at com.qin.service.TagServiceImpl.getTagTopList(TagServiceImpl.java:105) ~[classes/:na]
	at com.qin.service.TagServiceImpl$$FastClassBySpringCGLIB$$7c2d4719.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.qin.service.TagServiceImpl$$EnhancerBySpringCGLIB$$b02326da.getTagTopList(<generated>) ~[classes/:na]
	at com.qin.controller.IndexController.index(IndexController.java:34) ~[classes/:na]
	at com.qin.controller.IndexController$$FastClassBySpringCGLIB$$a497d41.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.qin.controller.IndexController$$EnhancerBySpringCGLIB$$76ee5dc3.index(<generated>) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: org.apache.ibatis.executor.ExecutorException: A query was run and no Result Maps were found for the Mapped Statement 'com.qin.mapper.TagMapper.getTagTopList'.  It's likely that neither a Result Type nor a Result Map was specified.
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.validateResultMapsCount(DefaultResultSetHandler.java:289) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSets(DefaultResultSetHandler.java:191) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) ~[mybatis-3.5.4.jar:3.5.4]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:108) ~[pagehelper-5.1.11.jar:na]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.4.jar:3.5.4]
	at com.sun.proxy.$Proxy114.query(Unknown Source) ~[na:na]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.4.jar:3.5.4]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.4.jar:2.0.4]
	... 90 common frames omitted

2020-04-20 17:57:56.392  WARN 9696 --- [http-nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.executor.ExecutorException: A query was run and no Result Maps were found for the Mapped Statement 'com.qin.mapper.TagMapper.getTagTopList'.  It's likely that neither a Result Type nor a Result Map was specified.]
2020-04-20 17:58:29.190  INFO 7484 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 7484 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 17:58:29.192 DEBUG 7484 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 17:58:29.193  INFO 7484 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 17:58:29.316  INFO 7484 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 17:58:29.316  INFO 7484 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 17:58:30.218  INFO 7484 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 17:58:30.244  INFO 7484 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 18ms. Found 0 JDBC repository interfaces.
2020-04-20 17:58:31.014  INFO 7484 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 17:58:31.023  INFO 7484 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 17:58:31.024  INFO 7484 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 17:58:31.123  INFO 7484 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 17:58:31.123  INFO 7484 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1807 ms
2020-04-20 17:58:31.801  INFO 7484 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 17:58:31.884  INFO 7484 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 17:58:32.356  INFO 7484 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 17:58:32.400  INFO 7484 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 17:58:32.404  INFO 7484 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.71 seconds (JVM running for 4.572)
2020-04-20 17:58:34.706  INFO 7484 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 17:58:34.707  INFO 7484 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 17:58:34.714  INFO 7484 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms
2020-04-20 17:58:34.745  INFO 7484 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 17:58:34.753  INFO 7484 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 17:58:35.277  INFO 7484 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 17:58:35.335 DEBUG 7484 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 17:58:35.356 DEBUG 7484 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 17:58:35.374 DEBUG 7484 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 17:58:35.377 DEBUG 7484 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 17:58:35.377 DEBUG 7484 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 17:58:35.393 DEBUG 7484 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 4
2020-04-20 17:58:35.403 DEBUG 7484 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 17:58:35.404 DEBUG 7484 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 17:58:35.405 DEBUG 7484 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 17:58:35.409 DEBUG 7484 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 17:58:35.410 DEBUG 7484 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 17:58:35.412 DEBUG 7484 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 17:58:35.413 DEBUG 7484 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 17:58:35.413 DEBUG 7484 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 17:58:35.415 DEBUG 7484 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 17:58:35.416  INFO 7484 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:06:48.311  INFO 7484 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:06:48.322 DEBUG 7484 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:06:48.322 DEBUG 7484 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:06:48.324 DEBUG 7484 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:06:48.325 DEBUG 7484 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 18:06:48.325 DEBUG 7484 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 18:06:48.334 DEBUG 7484 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 4
2020-04-20 18:06:48.336 DEBUG 7484 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:06:48.336 DEBUG 7484 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:06:48.338 DEBUG 7484 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:06:48.338 DEBUG 7484 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:06:48.339 DEBUG 7484 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:06:48.341 DEBUG 7484 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:06:48.342 DEBUG 7484 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:06:48.342 DEBUG 7484 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:06:48.344 DEBUG 7484 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:06:48.344  INFO 7484 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:35:28.483  INFO 7484 --- [Thread-12] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-20 18:35:28.492  INFO 7484 --- [Thread-12] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-04-20 18:35:28.617  INFO 7484 --- [Thread-12] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-04-20 18:35:29.368  INFO 7484 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 7484 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 18:35:29.368 DEBUG 7484 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 18:35:29.368  INFO 7484 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 18:35:29.567  INFO 7484 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 18:35:29.577  INFO 7484 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 9ms. Found 0 JDBC repository interfaces.
2020-04-20 18:35:29.743  INFO 7484 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 18:35:29.743  INFO 7484 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 18:35:29.743  INFO 7484 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 18:35:29.767  INFO 7484 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 18:35:29.767  INFO 7484 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 396 ms
2020-04-20 18:35:29.888  WARN 7484 --- [restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'adminBlogController': Unsatisfied dependency expressed through field 'blogService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.qin.service.BlogService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2020-04-20 18:35:29.889  INFO 7484 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2020-04-20 18:35:29.899  INFO 7484 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-04-20 18:35:30.432 ERROR 7484 --- [restartedMain] o.s.b.d.LoggingFailureAnalysisReporter   : 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field blogService in com.qin.controller.AdminBlogController required a bean of type 'com.qin.service.BlogService' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'com.qin.service.BlogService' in your configuration.

2020-04-20 18:35:58.025  INFO 1564 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 1564 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 18:35:58.028 DEBUG 1564 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 18:35:58.028  INFO 1564 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 18:35:58.121  INFO 1564 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 18:35:58.121  INFO 1564 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 18:35:58.776  INFO 1564 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 18:35:58.797  INFO 1564 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 15ms. Found 0 JDBC repository interfaces.
2020-04-20 18:35:59.545  INFO 1564 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 18:35:59.553  INFO 1564 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 18:35:59.553  INFO 1564 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 18:35:59.637  INFO 1564 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 18:35:59.637  INFO 1564 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1516 ms
2020-04-20 18:36:00.324  INFO 1564 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 18:36:00.404  INFO 1564 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 18:36:00.873  INFO 1564 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 18:36:00.920  INFO 1564 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 18:36:00.923  INFO 1564 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.404 seconds (JVM running for 4.234)
2020-04-20 18:36:04.960  INFO 1564 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 18:36:04.961  INFO 1564 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 18:36:04.970  INFO 1564 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-04-20 18:36:05.016  INFO 1564 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:36:05.024  INFO 1564 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 18:36:05.556  INFO 1564 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 18:36:05.606 DEBUG 1564 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:36:05.624 DEBUG 1564 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:36:05.640 DEBUG 1564 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:36:05.643 DEBUG 1564 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 18:36:05.644 DEBUG 1564 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 18:36:05.660 DEBUG 1564 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 4
2020-04-20 18:36:05.670 DEBUG 1564 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:36:05.670 DEBUG 1564 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:36:05.672 DEBUG 1564 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:36:05.675 DEBUG 1564 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:36:05.676 DEBUG 1564 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:36:05.678 DEBUG 1564 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:36:05.680 DEBUG 1564 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:36:05.680 DEBUG 1564 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:36:05.695 ERROR 1564 --- [http-nio-8080-exec-1] c.q.handler.ControllerExceptionHandler   : Request URL : http://localhost:8080/, Exception : {}

org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.executor.ExecutorException: A query was run and no Result Maps were found for the Mapped Statement 'com.qin.mapper.BlogMapper.getResentRecommendBlogs'.  It's likely that neither a Result Type nor a Result Map was specified.
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at com.sun.proxy.$Proxy83.selectList(Unknown Source) ~[na:na]
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:144) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85) ~[mybatis-3.5.4.jar:3.5.4]
	at com.sun.proxy.$Proxy84.getResentRecommendBlogs(Unknown Source) ~[na:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.sun.proxy.$Proxy85.getResentRecommendBlogs(Unknown Source) ~[na:na]
	at com.qin.service.BlogServiceImpl.getResentRecommendBlogs(BlogServiceImpl.java:96) ~[classes/:na]
	at com.qin.service.BlogServiceImpl$$FastClassBySpringCGLIB$$cb930495.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.qin.service.BlogServiceImpl$$EnhancerBySpringCGLIB$$b308734d.getResentRecommendBlogs(<generated>) ~[classes/:na]
	at com.qin.controller.IndexController.index(IndexController.java:35) ~[classes/:na]
	at com.qin.controller.IndexController$$FastClassBySpringCGLIB$$a497d41.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.qin.controller.IndexController$$EnhancerBySpringCGLIB$$e82e56d0.index(<generated>) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: org.apache.ibatis.executor.ExecutorException: A query was run and no Result Maps were found for the Mapped Statement 'com.qin.mapper.BlogMapper.getResentRecommendBlogs'.  It's likely that neither a Result Type nor a Result Map was specified.
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.validateResultMapsCount(DefaultResultSetHandler.java:289) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSets(DefaultResultSetHandler.java:191) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) ~[mybatis-3.5.4.jar:3.5.4]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:108) ~[pagehelper-5.1.11.jar:na]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.4.jar:3.5.4]
	at com.sun.proxy.$Proxy114.query(Unknown Source) ~[na:na]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.4.jar:3.5.4]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.4.jar:2.0.4]
	... 90 common frames omitted

2020-04-20 18:36:05.698  WARN 1564 --- [http-nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.executor.ExecutorException: A query was run and no Result Maps were found for the Mapped Statement 'com.qin.mapper.BlogMapper.getResentRecommendBlogs'.  It's likely that neither a Result Type nor a Result Map was specified.]
2020-04-20 18:36:33.826  INFO 7632 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 7632 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 18:36:33.828 DEBUG 7632 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 18:36:33.829  INFO 7632 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 18:36:33.870  INFO 7632 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 18:36:33.871  INFO 7632 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 18:36:34.626  INFO 7632 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 18:36:34.643  INFO 7632 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 12ms. Found 0 JDBC repository interfaces.
2020-04-20 18:36:35.328  INFO 7632 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 18:36:35.338  INFO 7632 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 18:36:35.338  INFO 7632 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 18:36:35.432  INFO 7632 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 18:36:35.432  INFO 7632 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1561 ms
2020-04-20 18:36:36.079  INFO 7632 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 18:36:36.178  INFO 7632 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 18:36:36.681  INFO 7632 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 18:36:36.730  INFO 7632 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 18:36:36.733  INFO 7632 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.346 seconds (JVM running for 4.172)
2020-04-20 18:36:39.144  INFO 7632 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 18:36:39.145  INFO 7632 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 18:36:39.152  INFO 7632 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms
2020-04-20 18:36:39.183  INFO 7632 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:36:39.190  INFO 7632 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 18:36:39.712  INFO 7632 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 18:36:39.762 DEBUG 7632 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:36:39.781 DEBUG 7632 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:36:39.798 DEBUG 7632 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:36:39.800 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 18:36:39.801 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 18:36:39.815 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 4
2020-04-20 18:36:39.825 DEBUG 7632 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:36:39.826 DEBUG 7632 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:36:39.828 DEBUG 7632 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:36:39.831 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:36:39.832 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:36:39.834 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:36:39.835 DEBUG 7632 --- [http-nio-8080-exec-2] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:36:39.835 DEBUG 7632 --- [http-nio-8080-exec-2] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:36:39.838 DEBUG 7632 --- [http-nio-8080-exec-2] c.q.m.B.getResentRecommendBlogs          : <==      Total: 1
2020-04-20 18:36:39.839  INFO 7632 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:38:51.674  INFO 7632 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:38:51.687 DEBUG 7632 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:38:51.687 DEBUG 7632 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:38:51.689 DEBUG 7632 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:38:51.690 DEBUG 7632 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 18:38:51.690 DEBUG 7632 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 18:38:51.703 DEBUG 7632 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 4
2020-04-20 18:38:51.705 DEBUG 7632 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:38:51.705 DEBUG 7632 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:38:51.707 DEBUG 7632 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:38:51.708 DEBUG 7632 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:38:51.708 DEBUG 7632 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:38:51.710 DEBUG 7632 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:38:51.710 DEBUG 7632 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:38:51.711 DEBUG 7632 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:38:51.712 DEBUG 7632 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : <==      Total: 1
2020-04-20 18:38:51.712  INFO 7632 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:39:04.417  INFO 7632 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:39:04.421 DEBUG 7632 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:39:04.421 DEBUG 7632 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:39:04.422 DEBUG 7632 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:39:04.423 DEBUG 7632 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 18:39:04.423 DEBUG 7632 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 18:39:04.433 DEBUG 7632 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 4
2020-04-20 18:39:04.434 DEBUG 7632 --- [http-nio-8080-exec-4] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:39:04.435 DEBUG 7632 --- [http-nio-8080-exec-4] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:39:04.436 DEBUG 7632 --- [http-nio-8080-exec-4] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:39:04.437 DEBUG 7632 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:39:04.437 DEBUG 7632 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:39:04.438 DEBUG 7632 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:39:04.439 DEBUG 7632 --- [http-nio-8080-exec-4] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:39:04.439 DEBUG 7632 --- [http-nio-8080-exec-4] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:39:04.440 DEBUG 7632 --- [http-nio-8080-exec-4] c.q.m.B.getResentRecommendBlogs          : <==      Total: 1
2020-04-20 18:39:04.441  INFO 7632 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:41:00.668  INFO 7632 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:41:00.677 DEBUG 7632 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:41:00.678 DEBUG 7632 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:41:00.681 DEBUG 7632 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:41:00.683 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 18:41:00.683 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 18:41:00.696 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 4
2020-04-20 18:41:00.698 DEBUG 7632 --- [http-nio-8080-exec-9] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:41:00.698 DEBUG 7632 --- [http-nio-8080-exec-9] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:41:00.700 DEBUG 7632 --- [http-nio-8080-exec-9] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:41:00.700 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:41:00.701 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:41:00.702 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:41:00.703 DEBUG 7632 --- [http-nio-8080-exec-9] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:41:00.704 DEBUG 7632 --- [http-nio-8080-exec-9] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:41:00.706 DEBUG 7632 --- [http-nio-8080-exec-9] c.q.m.B.getResentRecommendBlogs          : <==      Total: 1
2020-04-20 18:41:00.709  INFO 7632 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:41:00.847 ERROR 7632 --- [http-nio-8080-exec-9] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-9] Exception processing template "index": An error happened during template parsing (template: "class path resource [templates/index.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/index.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) [thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) [thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362) [thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189) [thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: org.attoparser.ParseException: Exception evaluating SpringEL expression: "blog.getUser().getName()" (template: "index" - line 65, col 101)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	... 48 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "blog.getUser().getName()" (template: "index" - line 65, col 101)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:290) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.OpenElementTag.beHandled(OpenElementTag.java:205) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.Model.process(Model.java:282) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.Model.process(Model.java:290) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.IteratedGatheringModelProcessable.processIterationModel(IteratedGatheringModelProcessable.java:367) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.IteratedGatheringModelProcessable.process(IteratedGatheringModelProcessable.java:221) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleCloseElement(ProcessorTemplateHandler.java:1640) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleCloseElementEnd(TemplateHandlerAdapterMarkupHandler.java:388) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:322) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleCloseElementEnd(OutputExpressionInlinePreProcessorHandler.java:220) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:164) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.attoparser.HtmlElement.handleCloseElementEnd(HtmlElement.java:169) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.HtmlMarkupHandler.handleCloseElementEnd(HtmlMarkupHandler.java:412) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupEventProcessorHandler.handleCloseElementEnd(MarkupEventProcessorHandler.java:473) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.ParsingElementMarkupUtil.parseCloseElement(ParsingElementMarkupUtil.java:201) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:725) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	... 50 common frames omitted
Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1004E: Method call: Method getName() cannot be found on type com.qin.pojo.User
	at org.springframework.expression.spel.ast.MethodReference.findAccessorForMethod(MethodReference.java:226) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:135) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.MethodReference.access$000(MethodReference.java:55) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.MethodReference$MethodValueRef.getValue(MethodReference.java:386) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:92) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	... 75 common frames omitted

2020-04-20 18:41:00.850 ERROR 7632 --- [http-nio-8080-exec-9] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/index.html]")] with root cause

org.springframework.expression.spel.SpelEvaluationException: EL1004E: Method call: Method getName() cannot be found on type com.qin.pojo.User
	at org.springframework.expression.spel.ast.MethodReference.findAccessorForMethod(MethodReference.java:226) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:135) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.MethodReference.access$000(MethodReference.java:55) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.MethodReference$MethodValueRef.getValue(MethodReference.java:386) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:92) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.OpenElementTag.beHandled(OpenElementTag.java:205) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.Model.process(Model.java:282) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.Model.process(Model.java:290) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.IteratedGatheringModelProcessable.processIterationModel(IteratedGatheringModelProcessable.java:367) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.IteratedGatheringModelProcessable.process(IteratedGatheringModelProcessable.java:221) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleCloseElement(ProcessorTemplateHandler.java:1640) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleCloseElementEnd(TemplateHandlerAdapterMarkupHandler.java:388) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:322) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleCloseElementEnd(OutputExpressionInlinePreProcessorHandler.java:220) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:164) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.attoparser.HtmlElement.handleCloseElementEnd(HtmlElement.java:169) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.HtmlMarkupHandler.handleCloseElementEnd(HtmlMarkupHandler.java:412) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupEventProcessorHandler.handleCloseElementEnd(MarkupEventProcessorHandler.java:473) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.ParsingElementMarkupUtil.parseCloseElement(ParsingElementMarkupUtil.java:201) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:725) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]

2020-04-20 18:41:27.928  INFO 7632 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:41:27.931 DEBUG 7632 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:41:27.933 DEBUG 7632 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:41:27.935 DEBUG 7632 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:41:27.936 DEBUG 7632 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 18:41:27.936 DEBUG 7632 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 18:41:27.941 DEBUG 7632 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 4
2020-04-20 18:41:27.943 DEBUG 7632 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:41:27.943 DEBUG 7632 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:41:27.947 DEBUG 7632 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:41:27.950 DEBUG 7632 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:41:27.950 DEBUG 7632 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:41:27.952 DEBUG 7632 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:41:27.952 DEBUG 7632 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:41:27.952 DEBUG 7632 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:41:27.965 DEBUG 7632 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : <==      Total: 1
2020-04-20 18:41:27.965  INFO 7632 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:41:37.139  INFO 7632 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:41:37.144 DEBUG 7632 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:41:37.144 DEBUG 7632 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:41:37.146 DEBUG 7632 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:41:37.146 DEBUG 7632 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 18:41:37.146 DEBUG 7632 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 18:41:37.151 DEBUG 7632 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 4
2020-04-20 18:41:37.153 DEBUG 7632 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:41:37.153 DEBUG 7632 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:41:37.155 DEBUG 7632 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:41:37.156 DEBUG 7632 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:41:37.157 DEBUG 7632 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:41:37.160 DEBUG 7632 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:41:37.161 DEBUG 7632 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:41:37.161 DEBUG 7632 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:41:37.162 DEBUG 7632 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : <==      Total: 1
2020-04-20 18:41:37.162  INFO 7632 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:41:38.170  INFO 7632 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:41:38.175 DEBUG 7632 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:41:38.175 DEBUG 7632 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:41:38.176 DEBUG 7632 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:41:38.177 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 18:41:38.177 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 18:41:38.182 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 4
2020-04-20 18:41:38.184 DEBUG 7632 --- [http-nio-8080-exec-8] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:41:38.184 DEBUG 7632 --- [http-nio-8080-exec-8] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:41:38.185 DEBUG 7632 --- [http-nio-8080-exec-8] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:41:38.187 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:41:38.187 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:41:38.188 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:41:38.191 DEBUG 7632 --- [http-nio-8080-exec-8] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:41:38.191 DEBUG 7632 --- [http-nio-8080-exec-8] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:41:38.192 DEBUG 7632 --- [http-nio-8080-exec-8] c.q.m.B.getResentRecommendBlogs          : <==      Total: 1
2020-04-20 18:41:38.193  INFO 7632 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:42:40.757  INFO 7632 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:42:40.763 DEBUG 7632 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:42:40.763 DEBUG 7632 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:42:40.765 DEBUG 7632 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:42:40.765 DEBUG 7632 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 18:42:40.766 DEBUG 7632 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 18:42:40.771 DEBUG 7632 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 4
2020-04-20 18:42:40.772 DEBUG 7632 --- [http-nio-8080-exec-10] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:42:40.773 DEBUG 7632 --- [http-nio-8080-exec-10] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:42:40.774 DEBUG 7632 --- [http-nio-8080-exec-10] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:42:40.774 DEBUG 7632 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:42:40.775 DEBUG 7632 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:42:40.776 DEBUG 7632 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:42:40.778 DEBUG 7632 --- [http-nio-8080-exec-10] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:42:40.781 DEBUG 7632 --- [http-nio-8080-exec-10] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:42:40.782 DEBUG 7632 --- [http-nio-8080-exec-10] c.q.m.B.getResentRecommendBlogs          : <==      Total: 1
2020-04-20 18:42:40.783  INFO 7632 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:42:40.792 ERROR 7632 --- [http-nio-8080-exec-10] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-10] Exception processing template "index": An error happened during template parsing (template: "class path resource [templates/index.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/index.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) [thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) [thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362) [thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189) [thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: org.attoparser.ParseException: Could not parse as expression: "@{blog.getUser().getAvatar()}" (template: "index" - line 64, col 108)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	... 48 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Could not parse as expression: "@{blog.getUser().getAvatar()}" (template: "index" - line 64, col 108)
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:131) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:62) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:44) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.EngineEventUtils.parseAttributeExpression(EngineEventUtils.java:220) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.EngineEventUtils.computeAttributeExpression(EngineEventUtils.java:207) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:125) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleStandaloneElement(ProcessorTemplateHandler.java:918) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.StandaloneElementTag.beHandled(StandaloneElementTag.java:228) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.Model.process(Model.java:282) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.Model.process(Model.java:290) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.IteratedGatheringModelProcessable.processIterationModel(IteratedGatheringModelProcessable.java:367) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.IteratedGatheringModelProcessable.process(IteratedGatheringModelProcessable.java:221) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleCloseElement(ProcessorTemplateHandler.java:1640) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleCloseElementEnd(TemplateHandlerAdapterMarkupHandler.java:388) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:322) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleCloseElementEnd(OutputExpressionInlinePreProcessorHandler.java:220) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:164) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.attoparser.HtmlElement.handleCloseElementEnd(HtmlElement.java:169) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.HtmlMarkupHandler.handleCloseElementEnd(HtmlMarkupHandler.java:412) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupEventProcessorHandler.handleCloseElementEnd(MarkupEventProcessorHandler.java:473) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.ParsingElementMarkupUtil.parseCloseElement(ParsingElementMarkupUtil.java:201) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:725) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	... 50 common frames omitted

2020-04-20 18:42:40.794 ERROR 7632 --- [http-nio-8080-exec-10] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/index.html]")] with root cause

org.thymeleaf.exceptions.TemplateProcessingException: Could not parse as expression: "@{blog.getUser().getAvatar()}" (template: "index" - line 64, col 108)
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:131) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:62) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:44) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.EngineEventUtils.parseAttributeExpression(EngineEventUtils.java:220) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.EngineEventUtils.computeAttributeExpression(EngineEventUtils.java:207) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:125) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleStandaloneElement(ProcessorTemplateHandler.java:918) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.StandaloneElementTag.beHandled(StandaloneElementTag.java:228) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.Model.process(Model.java:282) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.Model.process(Model.java:290) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.IteratedGatheringModelProcessable.processIterationModel(IteratedGatheringModelProcessable.java:367) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.IteratedGatheringModelProcessable.process(IteratedGatheringModelProcessable.java:221) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleCloseElement(ProcessorTemplateHandler.java:1640) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleCloseElementEnd(TemplateHandlerAdapterMarkupHandler.java:388) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:322) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleCloseElementEnd(OutputExpressionInlinePreProcessorHandler.java:220) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:164) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.attoparser.HtmlElement.handleCloseElementEnd(HtmlElement.java:169) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.HtmlMarkupHandler.handleCloseElementEnd(HtmlMarkupHandler.java:412) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupEventProcessorHandler.handleCloseElementEnd(MarkupEventProcessorHandler.java:473) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.ParsingElementMarkupUtil.parseCloseElement(ParsingElementMarkupUtil.java:201) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:725) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]

2020-04-20 18:43:29.123  INFO 7632 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:43:29.126 DEBUG 7632 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:43:29.126 DEBUG 7632 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:43:29.127 DEBUG 7632 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:43:29.128 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 18:43:29.128 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 18:43:29.132 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 4
2020-04-20 18:43:29.134 DEBUG 7632 --- [http-nio-8080-exec-8] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:43:29.135 DEBUG 7632 --- [http-nio-8080-exec-8] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:43:29.136 DEBUG 7632 --- [http-nio-8080-exec-8] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:43:29.137 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:43:29.137 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:43:29.139 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:43:29.141 DEBUG 7632 --- [http-nio-8080-exec-8] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:43:29.142 DEBUG 7632 --- [http-nio-8080-exec-8] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:43:29.143 DEBUG 7632 --- [http-nio-8080-exec-8] c.q.m.B.getResentRecommendBlogs          : <==      Total: 1
2020-04-20 18:43:29.143  INFO 7632 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:43:51.482  INFO 7632 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:43:51.485 DEBUG 7632 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:43:51.486 DEBUG 7632 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:43:51.489 DEBUG 7632 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:43:51.489 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 18:43:51.490 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 18:43:51.501 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 4
2020-04-20 18:43:51.503 DEBUG 7632 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:43:51.503 DEBUG 7632 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:43:51.504 DEBUG 7632 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:43:51.505 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:43:51.505 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:43:51.507 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:43:51.508 DEBUG 7632 --- [http-nio-8080-exec-2] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:43:51.508 DEBUG 7632 --- [http-nio-8080-exec-2] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:43:51.509 DEBUG 7632 --- [http-nio-8080-exec-2] c.q.m.B.getResentRecommendBlogs          : <==      Total: 1
2020-04-20 18:43:51.510  INFO 7632 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:44:58.786  INFO 7632 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:44:58.792 DEBUG 7632 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:44:58.792 DEBUG 7632 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:44:58.793 DEBUG 7632 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:44:58.794 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 18:44:58.794 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 18:44:58.800 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 4
2020-04-20 18:44:58.804 DEBUG 7632 --- [http-nio-8080-exec-8] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:44:58.805 DEBUG 7632 --- [http-nio-8080-exec-8] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:44:58.806 DEBUG 7632 --- [http-nio-8080-exec-8] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:44:58.807 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:44:58.807 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:44:58.808 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:44:58.809 DEBUG 7632 --- [http-nio-8080-exec-8] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:44:58.809 DEBUG 7632 --- [http-nio-8080-exec-8] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:44:58.810 DEBUG 7632 --- [http-nio-8080-exec-8] c.q.m.B.getResentRecommendBlogs          : <==      Total: 1
2020-04-20 18:44:58.811  INFO 7632 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:46:06.264  INFO 7632 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:46:06.270 DEBUG 7632 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:46:06.270 DEBUG 7632 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:46:06.272 DEBUG 7632 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:46:06.272 DEBUG 7632 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 18:46:06.272 DEBUG 7632 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 18:46:06.283 DEBUG 7632 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 4
2020-04-20 18:46:06.287 DEBUG 7632 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:46:06.288 DEBUG 7632 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:46:06.289 DEBUG 7632 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:46:06.289 DEBUG 7632 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:46:06.290 DEBUG 7632 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:46:06.291 DEBUG 7632 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:46:06.292 DEBUG 7632 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:46:06.292 DEBUG 7632 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:46:06.293 DEBUG 7632 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : <==      Total: 1
2020-04-20 18:46:06.294  INFO 7632 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:46:26.038  INFO 7632 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 18:46:26.043  INFO 7632 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 18:46:30.078  INFO 7632 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@116b1498, {}]}
2020-04-20 18:46:30.079 DEBUG 7632 --- [http-nio-8080-exec-10] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 18:46:30.080 DEBUG 7632 --- [http-nio-8080-exec-10] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 18:46:30.081 DEBUG 7632 --- [http-nio-8080-exec-10] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 18:46:30.082  INFO 7632 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 18:46:31.067  INFO 7632 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@116b1498]}
2020-04-20 18:46:31.076 DEBUG 7632 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 18:46:31.076 DEBUG 7632 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 18:46:31.077 DEBUG 7632 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 18:46:31.093 DEBUG 7632 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 18:46:31.094 DEBUG 7632 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 18:46:31.095 DEBUG 7632 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 18:46:31.096 DEBUG 7632 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 18:46:31.097 DEBUG 7632 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 18:46:31.102 DEBUG 7632 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 4
2020-04-20 18:46:31.103  INFO 7632 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 18:46:32.496  INFO 7632 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 18:46:32.497 DEBUG 7632 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 18:46:32.498 DEBUG 7632 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 18:46:32.498 DEBUG 7632 --- [http-nio-8080-exec-6] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 18:46:32.499 DEBUG 7632 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 18:46:32.499 DEBUG 7632 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 18:46:32.500 DEBUG 7632 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 18:46:32.500  INFO 7632 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 18:46:41.988  INFO 7632 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.add', args=[Blog{id=null, title='ssss', content='sss', firstPicture='', flag='原创', views=null, appreciation=true, shareStatement=true, commentAble=true, published=true, recommend=true, creatTime=null, updateTime=null, typeId=43, userId=null, tagIds='6,7', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}, org.apache.catalina.session.StandardSessionFacade@116b1498]}
2020-04-20 18:46:41.989 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 18:46:41.989 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 43(Long)
2020-04-20 18:46:41.990 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 18:46:41.992 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 18:46:41.992 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 6(Long)
2020-04-20 18:46:41.992 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 18:46:41.993 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 18:46:41.993 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 7(Long)
2020-04-20 18:46:41.994 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 18:46:41.996 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.addBlog        : ==>  Preparing: insert into t_blog(title,content,firstPicture,flag,views,appreciation,shareStatement,commentAble,published,recommend,creatTime,updateTime,type_id,user_id) values (?,?,?,?,?,?, ?,?,?,?,?, ?,?,?) 
2020-04-20 18:46:41.997 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.addBlog        : ==> Parameters: ssss(String), sss(String), (String), 原创(String), 0(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2020-04-20 18:46:41.995(Timestamp), 2020-04-20 18:46:41.995(Timestamp), 43(Long), 1(Long)
2020-04-20 18:46:41.999 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.addBlog        : <==    Updates: 1
2020-04-20 18:46:42.004 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 18:46:42.004 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 19(Long), 6(Long)
2020-04-20 18:46:42.005 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 18:46:42.006 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 18:46:42.006 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 19(Long), 7(Long)
2020-04-20 18:46:42.007 DEBUG 7632 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 18:46:42.136  INFO 7632 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 18:46:42.149  INFO 7632 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@116b1498]}
2020-04-20 18:46:42.149 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 18:46:42.149 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 18:46:42.150 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 18:46:42.154 DEBUG 7632 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 18:46:42.154 DEBUG 7632 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 18:46:42.155 DEBUG 7632 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 18:46:42.155 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 18:46:42.156 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 18:46:42.160 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 18:46:42.161  INFO 7632 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 18:46:44.291  INFO 7632 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.toAddBlog', args=[{}]}
2020-04-20 18:46:44.292 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 18:46:44.292 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 18:46:44.294 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 18:46:44.295 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 18:46:44.296 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 18:46:44.298 DEBUG 7632 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 18:46:44.299  INFO 7632 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 18:46:51.833  INFO 7632 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.add', args=[Blog{id=null, title='d', content='ddd', firstPicture='', flag='原创', views=null, appreciation=false, shareStatement=true, commentAble=true, published=true, recommend=true, creatTime=null, updateTime=null, typeId=43, userId=null, tagIds='6,9', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}, org.apache.catalina.session.StandardSessionFacade@116b1498]}
2020-04-20 18:46:51.836 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 18:46:51.836 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 43(Long)
2020-04-20 18:46:51.839 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 18:46:51.841 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 18:46:51.841 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 6(Long)
2020-04-20 18:46:51.842 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 18:46:51.842 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 18:46:51.842 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 9(Long)
2020-04-20 18:46:51.843 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 18:46:51.844 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.addBlog        : ==>  Preparing: insert into t_blog(title,content,firstPicture,flag,views,appreciation,shareStatement,commentAble,published,recommend,creatTime,updateTime,type_id,user_id) values (?,?,?,?,?,?, ?,?,?,?,?, ?,?,?) 
2020-04-20 18:46:51.845 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.addBlog        : ==> Parameters: d(String), ddd(String), (String), 原创(String), 0(Integer), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2020-04-20 18:46:51.844(Timestamp), 2020-04-20 18:46:51.844(Timestamp), 43(Long), 1(Long)
2020-04-20 18:46:51.846 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.addBlog        : <==    Updates: 1
2020-04-20 18:46:51.848 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 18:46:51.849 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 20(Long), 6(Long)
2020-04-20 18:46:52.175 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 18:46:52.175 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 18:46:52.175 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 20(Long), 9(Long)
2020-04-20 18:46:52.413 DEBUG 7632 --- [http-nio-8080-exec-8] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 18:46:52.527  INFO 7632 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 18:46:52.532  INFO 7632 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@116b1498]}
2020-04-20 18:46:52.532 DEBUG 7632 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 18:46:52.533 DEBUG 7632 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 18:46:52.534 DEBUG 7632 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 18:46:52.536 DEBUG 7632 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 18:46:52.536 DEBUG 7632 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 18:46:52.537 DEBUG 7632 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 18:46:52.538 DEBUG 7632 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 18:46:52.538 DEBUG 7632 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 18:46:52.543 DEBUG 7632 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 18:46:52.544  INFO 7632 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 18:46:55.035  INFO 7632 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=2, pageSize=5}, Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=2, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@116b1498]}
2020-04-20 18:46:55.039 DEBUG 7632 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? AND b.title LIKE ? 
2020-04-20 18:46:55.040 DEBUG 7632 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %%(String)
2020-04-20 18:46:55.047 DEBUG 7632 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 18:46:55.047 DEBUG 7632 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? and b.title like ? order by bid LIMIT ?, ? 
2020-04-20 18:46:55.047 DEBUG 7632 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), %%(String), 5(Integer), 5(Integer)
2020-04-20 18:46:55.049 DEBUG 7632 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 1
2020-04-20 18:46:55.050  INFO 7632 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 18:46:55.790  INFO 7632 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.search', args=[PageRequest{pageNum=1, pageSize=5}, Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@116b1498]}
2020-04-20 18:46:55.792 DEBUG 7632 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? AND b.title LIKE ? 
2020-04-20 18:46:55.792 DEBUG 7632 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long), %%(String)
2020-04-20 18:46:55.793 DEBUG 7632 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 18:46:55.794 DEBUG 7632 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? and b.title like ? order by bid LIMIT ? 
2020-04-20 18:46:55.794 DEBUG 7632 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), %%(String), 5(Integer)
2020-04-20 18:46:55.798 DEBUG 7632 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 18:46:55.801  INFO 7632 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : admin/blogs :: blogList
2020-04-20 18:47:01.316  INFO 7632 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:47:01.319 DEBUG 7632 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:47:01.320 DEBUG 7632 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:47:01.324 DEBUG 7632 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:47:01.324 DEBUG 7632 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id 
2020-04-20 18:47:01.324 DEBUG 7632 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 
2020-04-20 18:47:01.344 DEBUG 7632 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 6
2020-04-20 18:47:01.349 DEBUG 7632 --- [http-nio-8080-exec-7] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:47:01.349 DEBUG 7632 --- [http-nio-8080-exec-7] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:47:01.351 DEBUG 7632 --- [http-nio-8080-exec-7] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:47:01.351 DEBUG 7632 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:47:01.351 DEBUG 7632 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:47:01.353 DEBUG 7632 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:47:01.354 DEBUG 7632 --- [http-nio-8080-exec-7] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:47:01.354 DEBUG 7632 --- [http-nio-8080-exec-7] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:47:01.355 DEBUG 7632 --- [http-nio-8080-exec-7] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 18:47:01.355  INFO 7632 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:48:22.464  INFO 14556 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 14556 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 18:48:22.467 DEBUG 14556 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 18:48:22.468  INFO 14556 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 18:48:22.533  INFO 14556 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 18:48:22.534  INFO 14556 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 18:48:24.499  INFO 14556 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 18:48:24.534  INFO 14556 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 29ms. Found 0 JDBC repository interfaces.
2020-04-20 18:48:25.480  INFO 14556 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 18:48:25.489  INFO 14556 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 18:48:25.491  INFO 14556 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 18:48:25.606  INFO 14556 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 18:48:25.609  INFO 14556 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3075 ms
2020-04-20 18:48:26.357  INFO 14556 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 18:48:26.441  INFO 14556 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 18:48:26.956  INFO 14556 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 18:48:27.000  INFO 14556 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 18:48:27.003  INFO 14556 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 5.184 seconds (JVM running for 6.873)
2020-04-20 18:48:27.146  INFO 14556 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 18:48:27.146  INFO 14556 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 18:48:27.159  INFO 14556 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 13 ms
2020-04-20 18:48:27.198  INFO 14556 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='127.0.0.1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:48:27.212  INFO 14556 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 18:48:27.773  INFO 14556 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 18:48:27.823 DEBUG 14556 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:48:27.841 DEBUG 14556 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:48:27.859 DEBUG 14556 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:48:27.862 DEBUG 14556 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 18:48:27.863 DEBUG 14556 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 18:48:27.880 DEBUG 14556 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 18:48:27.890 DEBUG 14556 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:48:27.891 DEBUG 14556 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:48:27.892 DEBUG 14556 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:48:27.896 DEBUG 14556 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:48:27.896 DEBUG 14556 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:48:27.899 DEBUG 14556 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:48:27.901 DEBUG 14556 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:48:27.902 DEBUG 14556 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:48:27.903 DEBUG 14556 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 18:48:27.905  INFO 14556 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:50:21.764  INFO 14556 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:50:21.776 DEBUG 14556 --- [http-nio-8080-exec-3] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:50:21.778 DEBUG 14556 --- [http-nio-8080-exec-3] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:50:21.780 DEBUG 14556 --- [http-nio-8080-exec-3] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:50:21.780 DEBUG 14556 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 18:50:21.781 DEBUG 14556 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 18:50:21.796 DEBUG 14556 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 18:50:21.798 DEBUG 14556 --- [http-nio-8080-exec-3] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:50:21.798 DEBUG 14556 --- [http-nio-8080-exec-3] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:50:21.799 DEBUG 14556 --- [http-nio-8080-exec-3] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:50:21.800 DEBUG 14556 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:50:21.800 DEBUG 14556 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:50:21.802 DEBUG 14556 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:50:21.803 DEBUG 14556 --- [http-nio-8080-exec-3] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:50:21.805 DEBUG 14556 --- [http-nio-8080-exec-3] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:50:21.809 DEBUG 14556 --- [http-nio-8080-exec-3] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 18:50:21.809  INFO 14556 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:50:27.056  INFO 14556 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:50:27.074 DEBUG 14556 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:50:27.074 DEBUG 14556 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:50:27.076 DEBUG 14556 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:50:27.077 DEBUG 14556 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 18:50:27.078 DEBUG 14556 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 18:50:27.086 DEBUG 14556 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 18:50:27.087 DEBUG 14556 --- [http-nio-8080-exec-7] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:50:27.088 DEBUG 14556 --- [http-nio-8080-exec-7] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:50:27.090 DEBUG 14556 --- [http-nio-8080-exec-7] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:50:27.090 DEBUG 14556 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:50:27.091 DEBUG 14556 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:50:27.093 DEBUG 14556 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:50:27.094 DEBUG 14556 --- [http-nio-8080-exec-7] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:50:27.094 DEBUG 14556 --- [http-nio-8080-exec-7] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:50:27.096 DEBUG 14556 --- [http-nio-8080-exec-7] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 18:50:27.096  INFO 14556 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:50:47.553  INFO 14556 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:50:47.556 DEBUG 14556 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:50:47.557 DEBUG 14556 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:50:47.562 DEBUG 14556 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:50:47.564 DEBUG 14556 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 18:50:47.564 DEBUG 14556 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 18:50:47.573 DEBUG 14556 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 18:50:47.578 DEBUG 14556 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:50:47.579 DEBUG 14556 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:50:47.580 DEBUG 14556 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:50:47.581 DEBUG 14556 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:50:47.581 DEBUG 14556 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:50:47.583 DEBUG 14556 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:50:47.584 DEBUG 14556 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:50:47.584 DEBUG 14556 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:50:47.586 DEBUG 14556 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 18:50:47.587  INFO 14556 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:54:18.100  INFO 14556 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:54:18.105 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:54:18.105 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:54:18.107 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:54:18.107 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 18:54:18.107 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 18:54:18.120 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 18:54:18.122 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:54:18.122 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:54:18.124 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:54:18.124 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:54:18.125 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:54:18.126 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:54:18.127 DEBUG 14556 --- [http-nio-8080-exec-4] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:54:18.127 DEBUG 14556 --- [http-nio-8080-exec-4] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:54:18.129 DEBUG 14556 --- [http-nio-8080-exec-4] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 18:54:18.129  INFO 14556 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:54:30.604  INFO 14556 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 18:54:30.606  INFO 14556 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 18:58:13.690  INFO 14556 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:58:13.697 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:58:13.698 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:58:13.699 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:58:13.700 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 18:58:13.700 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 18:58:13.705 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 18:58:13.711 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:58:13.712 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:58:13.713 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:58:13.714 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:58:13.714 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:58:13.715 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:58:13.716 DEBUG 14556 --- [http-nio-8080-exec-4] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:58:13.716 DEBUG 14556 --- [http-nio-8080-exec-4] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:58:13.717 DEBUG 14556 --- [http-nio-8080-exec-4] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 18:58:13.717  INFO 14556 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:58:15.974  INFO 14556 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=2, pageSize=10}, {pageRequest=PageRequest{pageNum=2, pageSize=10}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:58:15.977 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:58:15.977 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:58:15.978 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:58:15.979 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 18:58:15.979 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 10(Integer)
2020-04-20 18:58:15.984 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 6
2020-04-20 18:58:15.988 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:58:15.988 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:58:15.992 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:58:15.993 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:58:15.994 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:58:15.995 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:58:15.997 DEBUG 14556 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:58:15.998 DEBUG 14556 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:58:15.999 DEBUG 14556 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 18:58:15.999  INFO 14556 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:58:37.066  INFO 14556 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:58:37.071 DEBUG 14556 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:58:37.072 DEBUG 14556 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:58:37.073 DEBUG 14556 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:58:37.073 DEBUG 14556 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 18:58:37.074 DEBUG 14556 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 18:58:37.084 DEBUG 14556 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 18:58:37.086 DEBUG 14556 --- [http-nio-8080-exec-9] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:58:37.086 DEBUG 14556 --- [http-nio-8080-exec-9] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:58:37.087 DEBUG 14556 --- [http-nio-8080-exec-9] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:58:37.088 DEBUG 14556 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:58:37.088 DEBUG 14556 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:58:37.090 DEBUG 14556 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:58:37.090 DEBUG 14556 --- [http-nio-8080-exec-9] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:58:37.090 DEBUG 14556 --- [http-nio-8080-exec-9] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:58:37.091 DEBUG 14556 --- [http-nio-8080-exec-9] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 18:58:37.092  INFO 14556 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:58:39.920  INFO 14556 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=2, pageSize=5}, {pageRequest=PageRequest{pageNum=2, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:58:39.926 DEBUG 14556 --- [http-nio-8080-exec-3] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:58:39.926 DEBUG 14556 --- [http-nio-8080-exec-3] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:58:39.928 DEBUG 14556 --- [http-nio-8080-exec-3] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:58:39.929 DEBUG 14556 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ?, ? 
2020-04-20 18:58:39.930 DEBUG 14556 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer), 5(Integer)
2020-04-20 18:58:39.932 DEBUG 14556 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 1
2020-04-20 18:58:39.933 DEBUG 14556 --- [http-nio-8080-exec-3] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:58:39.934 DEBUG 14556 --- [http-nio-8080-exec-3] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:58:39.935 DEBUG 14556 --- [http-nio-8080-exec-3] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:58:39.935 DEBUG 14556 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:58:39.935 DEBUG 14556 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:58:39.936 DEBUG 14556 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:58:39.937 DEBUG 14556 --- [http-nio-8080-exec-3] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:58:39.937 DEBUG 14556 --- [http-nio-8080-exec-3] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:58:39.938 DEBUG 14556 --- [http-nio-8080-exec-3] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 18:58:39.938  INFO 14556 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:58:42.392  INFO 14556 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=1, pageSize=5}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:58:42.397 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:58:42.397 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:58:42.398 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:58:42.399 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 18:58:42.399 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 18:58:42.403 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 18:58:42.405 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:58:42.406 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:58:42.409 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:58:42.410 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:58:42.410 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:58:42.414 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:58:42.414 DEBUG 14556 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:58:42.415 DEBUG 14556 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:58:42.418 DEBUG 14556 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 18:58:42.418  INFO 14556 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:58:44.768  INFO 14556 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=2, pageSize=5}, {pageRequest=PageRequest{pageNum=2, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:58:44.773 DEBUG 14556 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:58:44.773 DEBUG 14556 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:58:44.774 DEBUG 14556 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:58:44.775 DEBUG 14556 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ?, ? 
2020-04-20 18:58:44.775 DEBUG 14556 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer), 5(Integer)
2020-04-20 18:58:44.777 DEBUG 14556 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 1
2020-04-20 18:58:44.783 DEBUG 14556 --- [http-nio-8080-exec-5] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:58:44.783 DEBUG 14556 --- [http-nio-8080-exec-5] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:58:44.784 DEBUG 14556 --- [http-nio-8080-exec-5] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:58:44.785 DEBUG 14556 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:58:44.785 DEBUG 14556 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:58:44.786 DEBUG 14556 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:58:44.787 DEBUG 14556 --- [http-nio-8080-exec-5] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:58:44.787 DEBUG 14556 --- [http-nio-8080-exec-5] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:58:44.790 DEBUG 14556 --- [http-nio-8080-exec-5] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 18:58:44.791  INFO 14556 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : index
2020-04-20 18:58:46.593  INFO 14556 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=1, pageSize=5}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 18:58:46.597 DEBUG 14556 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 18:58:46.597 DEBUG 14556 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 18:58:46.598 DEBUG 14556 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 18:58:46.598 DEBUG 14556 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 18:58:46.599 DEBUG 14556 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 18:58:46.603 DEBUG 14556 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 18:58:46.605 DEBUG 14556 --- [http-nio-8080-exec-7] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 18:58:46.607 DEBUG 14556 --- [http-nio-8080-exec-7] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 18:58:46.611 DEBUG 14556 --- [http-nio-8080-exec-7] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 18:58:46.612 DEBUG 14556 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 18:58:46.612 DEBUG 14556 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 18:58:46.614 DEBUG 14556 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 18:58:46.616 DEBUG 14556 --- [http-nio-8080-exec-7] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 18:58:46.617 DEBUG 14556 --- [http-nio-8080-exec-7] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 18:58:46.618 DEBUG 14556 --- [http-nio-8080-exec-7] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 18:58:46.618  INFO 14556 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : return : index
2020-04-20 19:00:50.842  INFO 14556 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=1, pageSize=5}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:00:50.845 DEBUG 14556 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 19:00:50.845 DEBUG 14556 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 19:00:50.849 DEBUG 14556 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 19:00:50.849 DEBUG 14556 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 19:00:50.850 DEBUG 14556 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 19:00:50.865 DEBUG 14556 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 19:00:50.961 DEBUG 14556 --- [http-nio-8080-exec-10] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 19:00:50.961 DEBUG 14556 --- [http-nio-8080-exec-10] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 19:00:50.963 DEBUG 14556 --- [http-nio-8080-exec-10] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 19:00:50.963 DEBUG 14556 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 19:00:50.963 DEBUG 14556 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 19:00:50.965 DEBUG 14556 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 19:00:50.965 DEBUG 14556 --- [http-nio-8080-exec-10] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 19:00:50.965 DEBUG 14556 --- [http-nio-8080-exec-10] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 19:00:50.966 DEBUG 14556 --- [http-nio-8080-exec-10] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 19:00:50.966  INFO 14556 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : index
2020-04-20 19:01:14.066  INFO 14556 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=1, pageSize=5}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:01:14.073 DEBUG 14556 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 19:01:14.073 DEBUG 14556 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 19:01:14.074 DEBUG 14556 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 19:01:14.075 DEBUG 14556 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 19:01:14.075 DEBUG 14556 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 19:01:14.080 DEBUG 14556 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 19:01:14.082 DEBUG 14556 --- [http-nio-8080-exec-10] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 19:01:14.082 DEBUG 14556 --- [http-nio-8080-exec-10] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 19:01:14.084 DEBUG 14556 --- [http-nio-8080-exec-10] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 19:01:14.084 DEBUG 14556 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 19:01:14.085 DEBUG 14556 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 19:01:14.086 DEBUG 14556 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 19:01:14.086 DEBUG 14556 --- [http-nio-8080-exec-10] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 19:01:14.087 DEBUG 14556 --- [http-nio-8080-exec-10] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 19:01:14.088 DEBUG 14556 --- [http-nio-8080-exec-10] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 19:01:14.088  INFO 14556 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : index
2020-04-20 19:01:37.659  INFO 14556 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=1, pageSize=5}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:01:37.662 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 19:01:37.663 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 19:01:37.667 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 19:01:37.667 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 19:01:37.667 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 19:01:37.672 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 19:01:37.674 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 19:01:37.674 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 19:01:37.675 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 19:01:37.676 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 19:01:37.676 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 19:01:37.678 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 19:01:37.678 DEBUG 14556 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 19:01:37.678 DEBUG 14556 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 19:01:37.679 DEBUG 14556 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 19:01:37.680  INFO 14556 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : index
2020-04-20 19:01:41.351  INFO 14556 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=2, pageSize=5}, {pageRequest=PageRequest{pageNum=2, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:01:41.354 DEBUG 14556 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 19:01:41.354 DEBUG 14556 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 19:01:41.355 DEBUG 14556 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 19:01:41.355 DEBUG 14556 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ?, ? 
2020-04-20 19:01:41.356 DEBUG 14556 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer), 5(Integer)
2020-04-20 19:01:41.357 DEBUG 14556 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 1
2020-04-20 19:01:41.360 DEBUG 14556 --- [http-nio-8080-exec-7] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 19:01:41.361 DEBUG 14556 --- [http-nio-8080-exec-7] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 19:01:41.365 DEBUG 14556 --- [http-nio-8080-exec-7] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 19:01:41.366 DEBUG 14556 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 19:01:41.366 DEBUG 14556 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 19:01:41.368 DEBUG 14556 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 19:01:41.370 DEBUG 14556 --- [http-nio-8080-exec-7] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 19:01:41.370 DEBUG 14556 --- [http-nio-8080-exec-7] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 19:01:41.371 DEBUG 14556 --- [http-nio-8080-exec-7] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 19:01:41.371  INFO 14556 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : return : index
2020-04-20 19:01:43.071  INFO 14556 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=1, pageSize=5}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:01:43.075 DEBUG 14556 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 19:01:43.075 DEBUG 14556 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 19:01:43.076 DEBUG 14556 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 19:01:43.076 DEBUG 14556 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 19:01:43.076 DEBUG 14556 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 19:01:43.080 DEBUG 14556 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 19:01:43.081 DEBUG 14556 --- [http-nio-8080-exec-9] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 19:01:43.082 DEBUG 14556 --- [http-nio-8080-exec-9] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 19:01:43.083 DEBUG 14556 --- [http-nio-8080-exec-9] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 19:01:43.083 DEBUG 14556 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 19:01:43.083 DEBUG 14556 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 19:01:43.084 DEBUG 14556 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 19:01:43.084 DEBUG 14556 --- [http-nio-8080-exec-9] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 19:01:43.084 DEBUG 14556 --- [http-nio-8080-exec-9] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 19:01:43.085 DEBUG 14556 --- [http-nio-8080-exec-9] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 19:01:43.085  INFO 14556 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : index
2020-04-20 19:03:07.005  INFO 14556 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=1, pageSize=5}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:03:07.012 DEBUG 14556 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 19:03:07.012 DEBUG 14556 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 19:03:07.014 DEBUG 14556 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 19:03:07.014 DEBUG 14556 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 19:03:07.014 DEBUG 14556 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 19:03:07.018 DEBUG 14556 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 19:03:07.020 DEBUG 14556 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 19:03:07.020 DEBUG 14556 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 19:03:07.022 DEBUG 14556 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 19:03:07.022 DEBUG 14556 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 19:03:07.022 DEBUG 14556 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 19:03:07.024 DEBUG 14556 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 19:03:07.025 DEBUG 14556 --- [http-nio-8080-exec-2] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 19:03:07.027 DEBUG 14556 --- [http-nio-8080-exec-2] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 19:03:07.029 DEBUG 14556 --- [http-nio-8080-exec-2] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 19:03:07.029  INFO 14556 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : index
2020-04-20 19:04:37.269  INFO 14556 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=1, pageSize=5}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:04:37.272 DEBUG 14556 --- [http-nio-8080-exec-3] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 19:04:37.272 DEBUG 14556 --- [http-nio-8080-exec-3] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 19:04:37.274 DEBUG 14556 --- [http-nio-8080-exec-3] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 19:04:37.274 DEBUG 14556 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 19:04:37.274 DEBUG 14556 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 19:04:37.279 DEBUG 14556 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 19:04:37.280 DEBUG 14556 --- [http-nio-8080-exec-3] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 19:04:37.281 DEBUG 14556 --- [http-nio-8080-exec-3] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 19:04:37.282 DEBUG 14556 --- [http-nio-8080-exec-3] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 19:04:37.282 DEBUG 14556 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 19:04:37.283 DEBUG 14556 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 19:04:37.288 DEBUG 14556 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 19:04:37.289 DEBUG 14556 --- [http-nio-8080-exec-3] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 19:04:37.289 DEBUG 14556 --- [http-nio-8080-exec-3] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 19:04:37.291 DEBUG 14556 --- [http-nio-8080-exec-3] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 19:04:37.291  INFO 14556 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : index
2020-04-20 19:04:37.306 ERROR 14556 --- [http-nio-8080-exec-3] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-3] Exception processing template "index": An error happened during template parsing (template: "class path resource [templates/index.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/index.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) [thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) [thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362) [thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189) [thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: org.attoparser.ParseException: Could not parse as expression: "type.getName()" (template: "index" - line 122, col 43)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	... 48 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Could not parse as expression: "type.getName()" (template: "index" - line 122, col 43)
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:131) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:62) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:44) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.EngineEventUtils.parseAttributeExpression(EngineEventUtils.java:220) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.EngineEventUtils.computeAttributeExpression(EngineEventUtils.java:207) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:125) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.OpenElementTag.beHandled(OpenElementTag.java:205) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.Model.process(Model.java:282) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.Model.process(Model.java:290) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.IteratedGatheringModelProcessable.processIterationModel(IteratedGatheringModelProcessable.java:367) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.IteratedGatheringModelProcessable.process(IteratedGatheringModelProcessable.java:221) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleCloseElement(ProcessorTemplateHandler.java:1640) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleCloseElementEnd(TemplateHandlerAdapterMarkupHandler.java:388) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:322) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleCloseElementEnd(OutputExpressionInlinePreProcessorHandler.java:220) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:164) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.attoparser.HtmlElement.handleCloseElementEnd(HtmlElement.java:169) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.HtmlMarkupHandler.handleCloseElementEnd(HtmlMarkupHandler.java:412) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupEventProcessorHandler.handleCloseElementEnd(MarkupEventProcessorHandler.java:473) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.ParsingElementMarkupUtil.parseCloseElement(ParsingElementMarkupUtil.java:201) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:725) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	... 50 common frames omitted

2020-04-20 19:04:37.310 ERROR 14556 --- [http-nio-8080-exec-3] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/index.html]")] with root cause

org.thymeleaf.exceptions.TemplateProcessingException: Could not parse as expression: "type.getName()" (template: "index" - line 122, col 43)
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:131) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:62) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:44) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.EngineEventUtils.parseAttributeExpression(EngineEventUtils.java:220) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.EngineEventUtils.computeAttributeExpression(EngineEventUtils.java:207) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:125) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.OpenElementTag.beHandled(OpenElementTag.java:205) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.Model.process(Model.java:282) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.Model.process(Model.java:290) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.IteratedGatheringModelProcessable.processIterationModel(IteratedGatheringModelProcessable.java:367) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.IteratedGatheringModelProcessable.process(IteratedGatheringModelProcessable.java:221) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleCloseElement(ProcessorTemplateHandler.java:1640) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleCloseElementEnd(TemplateHandlerAdapterMarkupHandler.java:388) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:322) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleCloseElementEnd(OutputExpressionInlinePreProcessorHandler.java:220) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:164) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.attoparser.HtmlElement.handleCloseElementEnd(HtmlElement.java:169) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.HtmlMarkupHandler.handleCloseElementEnd(HtmlMarkupHandler.java:412) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupEventProcessorHandler.handleCloseElementEnd(MarkupEventProcessorHandler.java:473) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.ParsingElementMarkupUtil.parseCloseElement(ParsingElementMarkupUtil.java:201) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:725) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]

2020-04-20 19:04:37.329 ERROR 14556 --- [http-nio-8080-exec-3] s.e.ErrorMvcAutoConfiguration$StaticView : Cannot render error page for request [/] and exception [An error happened during template parsing (template: "class path resource [templates/index.html]")] as the response has already been committed. As a result, the response may have the wrong status code.
2020-04-20 19:04:38.891  INFO 14556 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=1, pageSize=5}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:04:38.894 DEBUG 14556 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 19:04:38.895 DEBUG 14556 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 19:04:38.898 DEBUG 14556 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 19:04:38.898 DEBUG 14556 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 19:04:38.898 DEBUG 14556 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 19:04:38.904 DEBUG 14556 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 19:04:38.906 DEBUG 14556 --- [http-nio-8080-exec-5] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 19:04:38.906 DEBUG 14556 --- [http-nio-8080-exec-5] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 19:04:38.907 DEBUG 14556 --- [http-nio-8080-exec-5] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 19:04:38.908 DEBUG 14556 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 19:04:38.908 DEBUG 14556 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 19:04:38.909 DEBUG 14556 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 19:04:38.909 DEBUG 14556 --- [http-nio-8080-exec-5] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 19:04:38.910 DEBUG 14556 --- [http-nio-8080-exec-5] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 19:04:38.911 DEBUG 14556 --- [http-nio-8080-exec-5] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 19:04:38.911  INFO 14556 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : index
2020-04-20 19:04:38.922 ERROR 14556 --- [http-nio-8080-exec-5] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-5] Exception processing template "index": An error happened during template parsing (template: "class path resource [templates/index.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/index.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) [thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) [thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362) [thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189) [thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: org.attoparser.ParseException: Could not parse as expression: "type.getName()" (template: "index" - line 122, col 43)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	... 48 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Could not parse as expression: "type.getName()" (template: "index" - line 122, col 43)
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:131) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:62) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:44) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.EngineEventUtils.parseAttributeExpression(EngineEventUtils.java:220) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.EngineEventUtils.computeAttributeExpression(EngineEventUtils.java:207) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:125) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.OpenElementTag.beHandled(OpenElementTag.java:205) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.Model.process(Model.java:282) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.Model.process(Model.java:290) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.IteratedGatheringModelProcessable.processIterationModel(IteratedGatheringModelProcessable.java:367) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.IteratedGatheringModelProcessable.process(IteratedGatheringModelProcessable.java:221) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleCloseElement(ProcessorTemplateHandler.java:1640) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleCloseElementEnd(TemplateHandlerAdapterMarkupHandler.java:388) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:322) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleCloseElementEnd(OutputExpressionInlinePreProcessorHandler.java:220) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:164) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.attoparser.HtmlElement.handleCloseElementEnd(HtmlElement.java:169) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.HtmlMarkupHandler.handleCloseElementEnd(HtmlMarkupHandler.java:412) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupEventProcessorHandler.handleCloseElementEnd(MarkupEventProcessorHandler.java:473) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.ParsingElementMarkupUtil.parseCloseElement(ParsingElementMarkupUtil.java:201) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:725) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	... 50 common frames omitted

2020-04-20 19:04:38.924 ERROR 14556 --- [http-nio-8080-exec-5] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/index.html]")] with root cause

org.thymeleaf.exceptions.TemplateProcessingException: Could not parse as expression: "type.getName()" (template: "index" - line 122, col 43)
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:131) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:62) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:44) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.EngineEventUtils.parseAttributeExpression(EngineEventUtils.java:220) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.EngineEventUtils.computeAttributeExpression(EngineEventUtils.java:207) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:125) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.OpenElementTag.beHandled(OpenElementTag.java:205) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.Model.process(Model.java:282) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.Model.process(Model.java:290) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.IteratedGatheringModelProcessable.processIterationModel(IteratedGatheringModelProcessable.java:367) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.IteratedGatheringModelProcessable.process(IteratedGatheringModelProcessable.java:221) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleCloseElement(ProcessorTemplateHandler.java:1640) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleCloseElementEnd(TemplateHandlerAdapterMarkupHandler.java:388) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:322) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleCloseElementEnd(OutputExpressionInlinePreProcessorHandler.java:220) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:164) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.attoparser.HtmlElement.handleCloseElementEnd(HtmlElement.java:169) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.HtmlMarkupHandler.handleCloseElementEnd(HtmlMarkupHandler.java:412) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupEventProcessorHandler.handleCloseElementEnd(MarkupEventProcessorHandler.java:473) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.ParsingElementMarkupUtil.parseCloseElement(ParsingElementMarkupUtil.java:201) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:725) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]

2020-04-20 19:04:38.929 ERROR 14556 --- [http-nio-8080-exec-5] s.e.ErrorMvcAutoConfiguration$StaticView : Cannot render error page for request [/] and exception [An error happened during template parsing (template: "class path resource [templates/index.html]")] as the response has already been committed. As a result, the response may have the wrong status code.
2020-04-20 19:06:07.466  INFO 14556 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=1, pageSize=5}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:06:07.469 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 19:06:07.471 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 19:06:07.473 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 19:06:07.473 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 19:06:07.473 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 19:06:07.478 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 19:06:07.481 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 19:06:07.482 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 19:06:07.483 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 19:06:07.483 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 19:06:07.483 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 19:06:07.484 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 19:06:07.485 DEBUG 14556 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 19:06:07.485 DEBUG 14556 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 19:06:07.486 DEBUG 14556 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 19:06:07.487  INFO 14556 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : index
2020-04-20 19:09:16.810  INFO 14556 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=1, pageSize=5}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:09:16.818 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 19:09:16.819 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 19:09:16.822 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 19:09:16.822 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 19:09:16.822 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 19:09:16.831 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 19:09:16.834 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 19:09:16.835 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 19:09:16.836 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 19:09:16.836 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 19:09:16.836 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 19:09:16.837 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 19:09:16.838 DEBUG 14556 --- [http-nio-8080-exec-4] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 19:09:16.838 DEBUG 14556 --- [http-nio-8080-exec-4] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 19:09:16.839 DEBUG 14556 --- [http-nio-8080-exec-4] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 19:09:16.839  INFO 14556 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : index
2020-04-20 19:09:53.750  INFO 14556 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=1, pageSize=5}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:09:53.757 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 19:09:53.757 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 19:09:53.758 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 19:09:53.758 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 19:09:53.759 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 19:09:53.766 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 19:09:53.767 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 19:09:53.767 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 19:09:53.768 DEBUG 14556 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 19:09:53.769 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 19:09:53.769 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 19:09:53.770 DEBUG 14556 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 19:09:53.770 DEBUG 14556 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 19:09:53.770 DEBUG 14556 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 19:09:53.772 DEBUG 14556 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 19:09:53.772  INFO 14556 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : index
2020-04-20 19:11:26.409  INFO 14556 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=1, pageSize=5}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:11:26.412 DEBUG 14556 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 19:11:26.412 DEBUG 14556 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 19:11:26.414 DEBUG 14556 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 19:11:26.415 DEBUG 14556 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 19:11:26.416 DEBUG 14556 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 19:11:26.422 DEBUG 14556 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 19:11:26.424 DEBUG 14556 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 19:11:26.424 DEBUG 14556 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 19:11:26.425 DEBUG 14556 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 19:11:26.425 DEBUG 14556 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 19:11:26.425 DEBUG 14556 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 19:11:26.427 DEBUG 14556 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 19:11:26.427 DEBUG 14556 --- [http-nio-8080-exec-2] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 19:11:26.427 DEBUG 14556 --- [http-nio-8080-exec-2] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 19:11:26.429 DEBUG 14556 --- [http-nio-8080-exec-2] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 19:11:26.429  INFO 14556 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : index
2020-04-20 19:11:31.569  INFO 14556 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=2, pageSize=5}, {pageRequest=PageRequest{pageNum=2, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:11:31.572 DEBUG 14556 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 19:11:31.572 DEBUG 14556 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 19:11:31.573 DEBUG 14556 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 19:11:31.573 DEBUG 14556 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ?, ? 
2020-04-20 19:11:31.573 DEBUG 14556 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer), 5(Integer)
2020-04-20 19:11:31.574 DEBUG 14556 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 1
2020-04-20 19:11:31.575 DEBUG 14556 --- [http-nio-8080-exec-8] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 19:11:31.576 DEBUG 14556 --- [http-nio-8080-exec-8] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 19:11:31.576 DEBUG 14556 --- [http-nio-8080-exec-8] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 19:11:31.577 DEBUG 14556 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 19:11:31.577 DEBUG 14556 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 19:11:31.580 DEBUG 14556 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 19:11:31.581 DEBUG 14556 --- [http-nio-8080-exec-8] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 19:11:31.581 DEBUG 14556 --- [http-nio-8080-exec-8] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 19:11:31.585 DEBUG 14556 --- [http-nio-8080-exec-8] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 19:11:31.586  INFO 14556 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : index
2020-04-20 19:11:32.618  INFO 14556 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=1, pageSize=5}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:11:32.620 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 19:11:32.620 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 19:11:32.620 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 19:11:32.621 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 19:11:32.621 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 19:11:32.624 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 19:11:32.625 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 19:11:32.625 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 19:11:32.627 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 19:11:32.627 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 19:11:32.627 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 19:11:32.629 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 19:11:32.631 DEBUG 14556 --- [http-nio-8080-exec-4] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 19:11:32.631 DEBUG 14556 --- [http-nio-8080-exec-4] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 19:11:32.634 DEBUG 14556 --- [http-nio-8080-exec-4] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 19:11:32.635  INFO 14556 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : index
2020-04-20 19:12:44.568  INFO 14556 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=1, pageSize=5}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:12:44.574 DEBUG 14556 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 19:12:44.574 DEBUG 14556 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 19:12:44.575 DEBUG 14556 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 19:12:44.575 DEBUG 14556 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 19:12:44.575 DEBUG 14556 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 19:12:44.581 DEBUG 14556 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 19:12:44.582 DEBUG 14556 --- [http-nio-8080-exec-10] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 19:12:44.583 DEBUG 14556 --- [http-nio-8080-exec-10] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 19:12:44.586 DEBUG 14556 --- [http-nio-8080-exec-10] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 19:12:44.586 DEBUG 14556 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 19:12:44.586 DEBUG 14556 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 19:12:44.592 DEBUG 14556 --- [http-nio-8080-exec-10] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 19:12:44.592 DEBUG 14556 --- [http-nio-8080-exec-10] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 19:12:44.592 DEBUG 14556 --- [http-nio-8080-exec-10] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 19:12:44.593 DEBUG 14556 --- [http-nio-8080-exec-10] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 19:12:44.593  INFO 14556 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : index
2020-04-20 19:12:48.442  INFO 14556 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=1, pageSize=5}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:12:48.453 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 19:12:48.453 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 19:12:48.457 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 19:12:48.458 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 19:12:48.458 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 19:12:48.464 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 19:12:48.468 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 19:12:48.469 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 19:12:48.470 DEBUG 14556 --- [http-nio-8080-exec-4] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 19:12:48.471 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 19:12:48.471 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 19:12:48.472 DEBUG 14556 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 19:12:48.473 DEBUG 14556 --- [http-nio-8080-exec-4] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 19:12:48.473 DEBUG 14556 --- [http-nio-8080-exec-4] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 19:12:48.474 DEBUG 14556 --- [http-nio-8080-exec-4] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 19:12:48.474  INFO 14556 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : index
2020-04-20 19:13:19.332  INFO 14556 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:13:19.334 DEBUG 14556 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 19:13:19.335 DEBUG 14556 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 19:13:19.336 DEBUG 14556 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 19:13:19.337 DEBUG 14556 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 19:13:19.337 DEBUG 14556 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 19:13:19.344 DEBUG 14556 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 19:13:19.345 DEBUG 14556 --- [http-nio-8080-exec-8] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 19:13:19.346 DEBUG 14556 --- [http-nio-8080-exec-8] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 19:13:19.347 DEBUG 14556 --- [http-nio-8080-exec-8] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 19:13:19.347 DEBUG 14556 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 19:13:19.347 DEBUG 14556 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 19:13:19.349 DEBUG 14556 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 19:13:19.349 DEBUG 14556 --- [http-nio-8080-exec-8] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 19:13:19.349 DEBUG 14556 --- [http-nio-8080-exec-8] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 19:13:19.350 DEBUG 14556 --- [http-nio-8080-exec-8] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 19:13:19.350  INFO 14556 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : index
2020-04-20 19:56:32.647  INFO 12536 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 12536 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 19:56:32.666 DEBUG 12536 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 19:56:32.666  INFO 12536 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 19:56:32.796  INFO 12536 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 19:56:32.797  INFO 12536 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 19:56:34.268  INFO 12536 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 19:56:34.319  INFO 12536 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 47ms. Found 0 JDBC repository interfaces.
2020-04-20 19:56:35.126  INFO 12536 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 19:56:35.134  INFO 12536 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 19:56:35.135  INFO 12536 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 19:56:35.252  INFO 12536 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 19:56:35.253  INFO 12536 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2456 ms
2020-04-20 19:56:36.123  INFO 12536 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 19:56:36.227  INFO 12536 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 19:56:36.783  INFO 12536 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 19:56:36.840  INFO 12536 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 19:56:36.843  INFO 12536 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 5.055 seconds (JVM running for 6.37)
2020-04-20 19:56:39.066  INFO 12536 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 19:56:39.066  INFO 12536 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 19:56:39.080  INFO 12536 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 14 ms
2020-04-20 19:56:39.113  INFO 12536 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:56:39.122  INFO 12536 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 19:56:39.714  INFO 12536 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 19:56:39.800 DEBUG 12536 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 19:56:39.827 DEBUG 12536 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 19:56:39.848 DEBUG 12536 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 19:56:39.856 DEBUG 12536 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 19:56:39.856 DEBUG 12536 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 19:56:39.868 DEBUG 12536 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 19:56:39.877 DEBUG 12536 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 19:56:39.878 DEBUG 12536 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 19:56:39.879 DEBUG 12536 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 19:56:39.883 DEBUG 12536 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 19:56:39.883 DEBUG 12536 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 19:56:39.886 DEBUG 12536 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 19:56:39.889 DEBUG 12536 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 19:56:39.889 DEBUG 12536 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 19:56:39.891 DEBUG 12536 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 19:56:39.891  INFO 12536 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : index
2020-04-20 19:56:46.020 ERROR 12536 --- [http-nio-8080-exec-10] c.q.handler.ControllerExceptionHandler   : Request URL : http://localhost:8080/search, Exception : {}

org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:213) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:421) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:367) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:110) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:59) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:395) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1234) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1016) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]

2020-04-20 19:56:46.021  WARN 12536 --- [http-nio-8080-exec-10] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2020-04-20 19:57:25.274  INFO 12536 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:57:25.281 DEBUG 12536 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 19:57:25.282 DEBUG 12536 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 19:57:25.286 DEBUG 12536 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 19:57:25.287 DEBUG 12536 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 19:57:25.287 DEBUG 12536 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 19:57:25.299 DEBUG 12536 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 19:57:25.303 DEBUG 12536 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 19:57:25.305 DEBUG 12536 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 19:57:25.307 DEBUG 12536 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 19:57:25.307 DEBUG 12536 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 19:57:25.308 DEBUG 12536 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 19:57:25.310 DEBUG 12536 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 19:57:25.311 DEBUG 12536 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 19:57:25.311 DEBUG 12536 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 19:57:25.313 DEBUG 12536 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 19:57:25.314  INFO 12536 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : index
2020-04-20 19:57:28.020  INFO 12536 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.search', args=[PageRequest{pageNum=0, pageSize=0}, j, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:57:28.028 DEBUG 12536 --- [http-nio-8080-exec-9] .m.B.getBlogBySearchTitleOrContent_COUNT : ==>  Preparing: select count(0) from (select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and b.title like "%"?"%") tmp_count 
2020-04-20 19:57:28.028 DEBUG 12536 --- [http-nio-8080-exec-9] .m.B.getBlogBySearchTitleOrContent_COUNT : ==> Parameters: j(String)
2020-04-20 19:57:28.119 DEBUG 12536 --- [http-nio-8080-exec-9] .m.B.getBlogBySearchTitleOrContent_COUNT : <==      Total: 1
2020-04-20 19:57:28.120  INFO 12536 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : search
2020-04-20 19:57:28.137 ERROR 12536 --- [http-nio-8080-exec-9] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-9] Exception processing template "search": An error happened during template parsing (template: "class path resource [templates/search.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/search.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) [thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) [thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362) [thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189) [thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: org.attoparser.ParseException: Exception evaluating SpringEL expression: "page.getTotalPages()" (template: "search" - line 85, col 53)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	... 48 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "page.getTotalPages()" (template: "search" - line 85, col 53)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:290) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.GreaterThanExpression.executeGreaterThan(GreaterThanExpression.java:77) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.ComplexExpression.executeComplex(ComplexExpression.java:101) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:112) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:125) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.StandardIfTagProcessor.isVisible(StandardIfTagProcessor.java:59) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.AbstractStandardConditionalVisibilityTagProcessor.doProcess(AbstractStandardConditionalVisibilityTagProcessor.java:61) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	... 50 common frames omitted
Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1011E: Method call: Attempted to call method getTotalPages() on null context object
	at org.springframework.expression.spel.ast.MethodReference.throwIfNotNullSafe(MethodReference.java:154) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.MethodReference.getValueRef(MethodReference.java:83) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:70) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:91) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	... 75 common frames omitted

2020-04-20 19:57:28.142 ERROR 12536 --- [http-nio-8080-exec-9] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/search.html]")] with root cause

org.springframework.expression.spel.SpelEvaluationException: EL1011E: Method call: Attempted to call method getTotalPages() on null context object
	at org.springframework.expression.spel.ast.MethodReference.throwIfNotNullSafe(MethodReference.java:154) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.MethodReference.getValueRef(MethodReference.java:83) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:70) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:91) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.GreaterThanExpression.executeGreaterThan(GreaterThanExpression.java:77) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.ComplexExpression.executeComplex(ComplexExpression.java:101) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:112) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:125) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.StandardIfTagProcessor.isVisible(StandardIfTagProcessor.java:59) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.AbstractStandardConditionalVisibilityTagProcessor.doProcess(AbstractStandardConditionalVisibilityTagProcessor.java:61) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]

2020-04-20 19:58:38.686  INFO 10028 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 10028 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 19:58:38.690 DEBUG 10028 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 19:58:38.691  INFO 10028 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 19:58:38.836  INFO 10028 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 19:58:38.836  INFO 10028 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 19:58:40.023  INFO 10028 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 19:58:40.058  INFO 10028 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 23ms. Found 0 JDBC repository interfaces.
2020-04-20 19:58:40.957  INFO 10028 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 19:58:40.965  INFO 10028 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 19:58:40.966  INFO 10028 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 19:58:41.048  INFO 10028 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 19:58:41.048  INFO 10028 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2206 ms
2020-04-20 19:58:41.728  INFO 10028 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 19:58:41.807  INFO 10028 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 19:58:42.364  INFO 10028 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 19:58:42.416  INFO 10028 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 19:58:42.424  INFO 10028 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 4.296 seconds (JVM running for 5.179)
2020-04-20 19:58:42.527  INFO 10028 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 19:58:42.527  INFO 10028 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 19:58:42.539  INFO 10028 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 11 ms
2020-04-20 19:58:42.574  INFO 10028 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:58:42.594  INFO 10028 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 19:58:43.277  INFO 10028 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 19:58:43.338 DEBUG 10028 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 19:58:43.362 DEBUG 10028 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 19:58:43.379 DEBUG 10028 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 19:58:43.386 DEBUG 10028 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 19:58:43.386 DEBUG 10028 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 19:58:43.400 DEBUG 10028 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 19:58:43.409 DEBUG 10028 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 19:58:43.409 DEBUG 10028 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 19:58:43.411 DEBUG 10028 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 19:58:43.417 DEBUG 10028 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 19:58:43.417 DEBUG 10028 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 19:58:43.420 DEBUG 10028 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 19:58:43.422 DEBUG 10028 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 19:58:43.422 DEBUG 10028 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 19:58:43.424 DEBUG 10028 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 19:58:43.424  INFO 10028 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : index
2020-04-20 19:58:47.189  INFO 10028 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.search', args=[PageRequest{pageNum=0, pageSize=0}, j, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 19:58:47.199 DEBUG 10028 --- [http-nio-8080-exec-10] .m.B.getBlogBySearchTitleOrContent_COUNT : ==>  Preparing: select count(0) from (select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and b.title like "%"?"%") tmp_count 
2020-04-20 19:58:47.200 DEBUG 10028 --- [http-nio-8080-exec-10] .m.B.getBlogBySearchTitleOrContent_COUNT : ==> Parameters: j(String)
2020-04-20 19:58:47.202 DEBUG 10028 --- [http-nio-8080-exec-10] .m.B.getBlogBySearchTitleOrContent_COUNT : <==      Total: 1
2020-04-20 19:58:47.204 DEBUG 10028 --- [http-nio-8080-exec-10] .m.B.getBlogBySearchTitleOrContent_COUNT : ==>  Preparing: select count(0) from (select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and b.title like "%"?"%") tmp_count 
2020-04-20 19:58:47.205 DEBUG 10028 --- [http-nio-8080-exec-10] .m.B.getBlogBySearchTitleOrContent_COUNT : ==> Parameters: j(String)
2020-04-20 19:58:47.206 DEBUG 10028 --- [http-nio-8080-exec-10] .m.B.getBlogBySearchTitleOrContent_COUNT : <==      Total: 1
2020-04-20 19:58:47.207  INFO 10028 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : search
2020-04-20 19:58:47.225 ERROR 10028 --- [http-nio-8080-exec-10] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-10] Exception processing template "search": An error happened during template parsing (template: "class path resource [templates/search.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/search.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) [thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) [thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362) [thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189) [thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: org.attoparser.ParseException: Exception evaluating SpringEL expression: "page.getTotalPages()" (template: "search" - line 85, col 53)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	... 48 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "page.getTotalPages()" (template: "search" - line 85, col 53)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:290) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.GreaterThanExpression.executeGreaterThan(GreaterThanExpression.java:77) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.ComplexExpression.executeComplex(ComplexExpression.java:101) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:112) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:125) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.StandardIfTagProcessor.isVisible(StandardIfTagProcessor.java:59) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.AbstractStandardConditionalVisibilityTagProcessor.doProcess(AbstractStandardConditionalVisibilityTagProcessor.java:61) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	... 50 common frames omitted
Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1011E: Method call: Attempted to call method getTotalPages() on null context object
	at org.springframework.expression.spel.ast.MethodReference.throwIfNotNullSafe(MethodReference.java:154) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.MethodReference.getValueRef(MethodReference.java:83) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:70) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:91) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	... 75 common frames omitted

2020-04-20 19:58:47.229 ERROR 10028 --- [http-nio-8080-exec-10] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/search.html]")] with root cause

org.springframework.expression.spel.SpelEvaluationException: EL1011E: Method call: Attempted to call method getTotalPages() on null context object
	at org.springframework.expression.spel.ast.MethodReference.throwIfNotNullSafe(MethodReference.java:154) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.MethodReference.getValueRef(MethodReference.java:83) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:70) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:91) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.GreaterThanExpression.executeGreaterThan(GreaterThanExpression.java:77) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.ComplexExpression.executeComplex(ComplexExpression.java:101) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:112) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:125) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.StandardIfTagProcessor.isVisible(StandardIfTagProcessor.java:59) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.AbstractStandardConditionalVisibilityTagProcessor.doProcess(AbstractStandardConditionalVisibilityTagProcessor.java:61) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]

2020-04-20 20:04:43.783  INFO 4148 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 4148 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 20:04:43.786 DEBUG 4148 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 20:04:43.786  INFO 4148 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 20:04:43.852  INFO 4148 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 20:04:43.853  INFO 4148 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 20:04:44.554  INFO 4148 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 20:04:44.571  INFO 4148 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 12ms. Found 0 JDBC repository interfaces.
2020-04-20 20:04:45.332  INFO 4148 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 20:04:45.341  INFO 4148 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 20:04:45.341  INFO 4148 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 20:04:45.432  INFO 4148 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 20:04:45.432  INFO 4148 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1579 ms
2020-04-20 20:04:46.081  INFO 4148 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 20:04:46.166  INFO 4148 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 20:04:46.689  INFO 4148 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 20:04:46.733  INFO 4148 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 20:04:46.735  INFO 4148 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.416 seconds (JVM running for 5.187)
2020-04-20 20:04:57.122  INFO 4148 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 20:04:57.123  INFO 4148 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 20:04:57.130  INFO 4148 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms
2020-04-20 20:04:57.172  INFO 4148 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 20:04:57.180  INFO 4148 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 20:04:57.704  INFO 4148 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 20:04:57.765 DEBUG 4148 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 20:04:57.784 DEBUG 4148 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 20:04:57.801 DEBUG 4148 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 20:04:57.805 DEBUG 4148 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 20:04:57.806 DEBUG 4148 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 20:04:57.822 DEBUG 4148 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 20:04:57.830 DEBUG 4148 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 20:04:57.830 DEBUG 4148 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 20:04:57.834 DEBUG 4148 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 20:04:57.838 DEBUG 4148 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 20:04:57.839 DEBUG 4148 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 20:04:57.840 DEBUG 4148 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 20:04:57.842 DEBUG 4148 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 20:04:57.842 DEBUG 4148 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 20:04:57.843 DEBUG 4148 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 20:04:57.844  INFO 4148 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : index
2020-04-20 20:05:01.783  INFO 4148 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.search', args=[PageRequest{pageNum=0, pageSize=0}, j, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 20:05:01.793 DEBUG 4148 --- [http-nio-8080-exec-9] .m.B.getBlogBySearchTitleOrContent_COUNT : ==>  Preparing: select count(0) from (select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%")) tmp_count 
2020-04-20 20:05:01.794 DEBUG 4148 --- [http-nio-8080-exec-9] .m.B.getBlogBySearchTitleOrContent_COUNT : ==> Parameters: j(String), j(String)
2020-04-20 20:05:01.795 DEBUG 4148 --- [http-nio-8080-exec-9] .m.B.getBlogBySearchTitleOrContent_COUNT : <==      Total: 1
2020-04-20 20:05:01.796 DEBUG 4148 --- [http-nio-8080-exec-9] c.q.m.B.getBlogBySearchTitleOrContent    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%") LIMIT ? 
2020-04-20 20:05:01.797 DEBUG 4148 --- [http-nio-8080-exec-9] c.q.m.B.getBlogBySearchTitleOrContent    : ==> Parameters: j(String), j(String), 5(Integer)
2020-04-20 20:05:01.801 DEBUG 4148 --- [http-nio-8080-exec-9] c.q.m.B.getBlogBySearchTitleOrContent    : <==      Total: 1
2020-04-20 20:05:01.806 DEBUG 4148 --- [http-nio-8080-exec-9] .m.B.getBlogBySearchTitleOrContent_COUNT : ==>  Preparing: select count(0) from (select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%")) tmp_count 
2020-04-20 20:05:01.806 DEBUG 4148 --- [http-nio-8080-exec-9] .m.B.getBlogBySearchTitleOrContent_COUNT : ==> Parameters: j(String), j(String)
2020-04-20 20:05:01.807 DEBUG 4148 --- [http-nio-8080-exec-9] .m.B.getBlogBySearchTitleOrContent_COUNT : <==      Total: 1
2020-04-20 20:05:01.808 DEBUG 4148 --- [http-nio-8080-exec-9] c.q.m.B.getBlogBySearchTitleOrContent    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%") LIMIT ? 
2020-04-20 20:05:01.808 DEBUG 4148 --- [http-nio-8080-exec-9] c.q.m.B.getBlogBySearchTitleOrContent    : ==> Parameters: j(String), j(String), 5(Integer)
2020-04-20 20:05:01.812 DEBUG 4148 --- [http-nio-8080-exec-9] c.q.m.B.getBlogBySearchTitleOrContent    : <==      Total: 1
2020-04-20 20:05:01.812  INFO 4148 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : search
2020-04-20 20:05:01.830 ERROR 4148 --- [http-nio-8080-exec-9] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-9] Exception processing template "search": An error happened during template parsing (template: "class path resource [templates/search.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/search.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) [thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) [thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362) [thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189) [thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: org.attoparser.ParseException: Exception evaluating SpringEL expression: "page.getTotalPages()" (template: "search" - line 85, col 53)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	... 48 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "page.getTotalPages()" (template: "search" - line 85, col 53)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:290) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.GreaterThanExpression.executeGreaterThan(GreaterThanExpression.java:77) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.ComplexExpression.executeComplex(ComplexExpression.java:101) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:112) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:125) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.StandardIfTagProcessor.isVisible(StandardIfTagProcessor.java:59) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.AbstractStandardConditionalVisibilityTagProcessor.doProcess(AbstractStandardConditionalVisibilityTagProcessor.java:61) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	... 50 common frames omitted
Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1011E: Method call: Attempted to call method getTotalPages() on null context object
	at org.springframework.expression.spel.ast.MethodReference.throwIfNotNullSafe(MethodReference.java:154) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.MethodReference.getValueRef(MethodReference.java:83) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:70) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:91) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	... 75 common frames omitted

2020-04-20 20:05:01.833 ERROR 4148 --- [http-nio-8080-exec-9] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/search.html]")] with root cause

org.springframework.expression.spel.SpelEvaluationException: EL1011E: Method call: Attempted to call method getTotalPages() on null context object
	at org.springframework.expression.spel.ast.MethodReference.throwIfNotNullSafe(MethodReference.java:154) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.MethodReference.getValueRef(MethodReference.java:83) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:70) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:91) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.GreaterThanExpression.executeGreaterThan(GreaterThanExpression.java:77) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.ComplexExpression.executeComplex(ComplexExpression.java:101) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:112) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:125) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.StandardIfTagProcessor.isVisible(StandardIfTagProcessor.java:59) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.AbstractStandardConditionalVisibilityTagProcessor.doProcess(AbstractStandardConditionalVisibilityTagProcessor.java:61) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]

2020-04-20 20:07:04.447  INFO 1704 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 1704 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 20:07:04.463 DEBUG 1704 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 20:07:04.463  INFO 1704 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 20:07:04.537  INFO 1704 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 20:07:04.538  INFO 1704 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 20:07:05.335  INFO 1704 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 20:07:05.357  INFO 1704 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 16ms. Found 0 JDBC repository interfaces.
2020-04-20 20:07:06.076  INFO 1704 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 20:07:06.084  INFO 1704 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 20:07:06.085  INFO 1704 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 20:07:06.165  INFO 1704 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 20:07:06.166  INFO 1704 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1627 ms
2020-04-20 20:07:06.874  INFO 1704 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 20:07:06.957  INFO 1704 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 20:07:07.406  INFO 1704 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 20:07:07.454  INFO 1704 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 20:07:07.457  INFO 1704 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.608 seconds (JVM running for 4.551)
2020-04-20 20:07:16.975  INFO 1704 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 20:07:16.975  INFO 1704 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 20:07:16.983  INFO 1704 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms
2020-04-20 20:07:17.029  INFO 1704 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 20:07:17.039  INFO 1704 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 20:07:17.616  INFO 1704 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 20:07:17.667 DEBUG 1704 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 20:07:17.694 DEBUG 1704 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 20:07:17.713 DEBUG 1704 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 20:07:17.717 DEBUG 1704 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 20:07:17.717 DEBUG 1704 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 20:07:17.737 DEBUG 1704 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 20:07:17.745 DEBUG 1704 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 20:07:17.746 DEBUG 1704 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 20:07:17.752 DEBUG 1704 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 20:07:17.758 DEBUG 1704 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 20:07:17.758 DEBUG 1704 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 20:07:17.760 DEBUG 1704 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 20:07:17.762 DEBUG 1704 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 20:07:17.763 DEBUG 1704 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 20:07:17.764 DEBUG 1704 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 20:07:17.765  INFO 1704 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : index
2020-04-20 20:07:21.387  INFO 1704 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.search', args=[PageRequest{pageNum=0, pageSize=0}, j, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 20:07:21.397 DEBUG 1704 --- [http-nio-8080-exec-10] .m.B.getBlogBySearchTitleOrContent_COUNT : ==>  Preparing: select count(0) from (select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%")) tmp_count 
2020-04-20 20:07:21.397 DEBUG 1704 --- [http-nio-8080-exec-10] .m.B.getBlogBySearchTitleOrContent_COUNT : ==> Parameters: j(String), j(String)
2020-04-20 20:07:21.399 DEBUG 1704 --- [http-nio-8080-exec-10] .m.B.getBlogBySearchTitleOrContent_COUNT : <==      Total: 1
2020-04-20 20:07:21.399 DEBUG 1704 --- [http-nio-8080-exec-10] c.q.m.B.getBlogBySearchTitleOrContent    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%") LIMIT ? 
2020-04-20 20:07:21.400 DEBUG 1704 --- [http-nio-8080-exec-10] c.q.m.B.getBlogBySearchTitleOrContent    : ==> Parameters: j(String), j(String), 5(Integer)
2020-04-20 20:07:21.404 DEBUG 1704 --- [http-nio-8080-exec-10] c.q.m.B.getBlogBySearchTitleOrContent    : <==      Total: 1
2020-04-20 20:07:21.406 DEBUG 1704 --- [http-nio-8080-exec-10] .m.B.getBlogBySearchTitleOrContent_COUNT : ==>  Preparing: select count(0) from (select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%")) tmp_count 
2020-04-20 20:07:21.407 DEBUG 1704 --- [http-nio-8080-exec-10] .m.B.getBlogBySearchTitleOrContent_COUNT : ==> Parameters: j(String), j(String)
2020-04-20 20:07:21.408 DEBUG 1704 --- [http-nio-8080-exec-10] .m.B.getBlogBySearchTitleOrContent_COUNT : <==      Total: 1
2020-04-20 20:07:21.409 DEBUG 1704 --- [http-nio-8080-exec-10] c.q.m.B.getBlogBySearchTitleOrContent    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%") LIMIT ? 
2020-04-20 20:07:21.409 DEBUG 1704 --- [http-nio-8080-exec-10] c.q.m.B.getBlogBySearchTitleOrContent    : ==> Parameters: j(String), j(String), 5(Integer)
2020-04-20 20:07:21.413 DEBUG 1704 --- [http-nio-8080-exec-10] c.q.m.B.getBlogBySearchTitleOrContent    : <==      Total: 1
2020-04-20 20:07:21.413  INFO 1704 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : search
2020-04-20 20:07:21.432 ERROR 1704 --- [http-nio-8080-exec-10] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-10] Exception processing template "search": An error happened during template parsing (template: "class path resource [templates/search.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/search.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) [thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) [thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362) [thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189) [thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: org.attoparser.ParseException: Exception evaluating SpringEL expression: "page.getTotalPages()" (template: "search" - line 85, col 53)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	... 48 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "page.getTotalPages()" (template: "search" - line 85, col 53)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:290) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.GreaterThanExpression.executeGreaterThan(GreaterThanExpression.java:77) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.ComplexExpression.executeComplex(ComplexExpression.java:101) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:112) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:125) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.StandardIfTagProcessor.isVisible(StandardIfTagProcessor.java:59) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.AbstractStandardConditionalVisibilityTagProcessor.doProcess(AbstractStandardConditionalVisibilityTagProcessor.java:61) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	... 50 common frames omitted
Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1011E: Method call: Attempted to call method getTotalPages() on null context object
	at org.springframework.expression.spel.ast.MethodReference.throwIfNotNullSafe(MethodReference.java:154) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.MethodReference.getValueRef(MethodReference.java:83) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:70) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:91) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	... 75 common frames omitted

2020-04-20 20:07:21.435 ERROR 1704 --- [http-nio-8080-exec-10] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/search.html]")] with root cause

org.springframework.expression.spel.SpelEvaluationException: EL1011E: Method call: Attempted to call method getTotalPages() on null context object
	at org.springframework.expression.spel.ast.MethodReference.throwIfNotNullSafe(MethodReference.java:154) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.MethodReference.getValueRef(MethodReference.java:83) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:70) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:91) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.GreaterThanExpression.executeGreaterThan(GreaterThanExpression.java:77) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.ComplexExpression.executeComplex(ComplexExpression.java:101) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:112) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:125) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.StandardIfTagProcessor.isVisible(StandardIfTagProcessor.java:59) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.AbstractStandardConditionalVisibilityTagProcessor.doProcess(AbstractStandardConditionalVisibilityTagProcessor.java:61) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]

2020-04-20 20:09:04.177  INFO 1704 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 20:09:04.185 DEBUG 1704 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 20:09:04.185 DEBUG 1704 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 20:09:04.187 DEBUG 1704 --- [http-nio-8080-exec-9] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 20:09:04.187 DEBUG 1704 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 20:09:04.188 DEBUG 1704 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 20:09:04.201 DEBUG 1704 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 20:09:04.202 DEBUG 1704 --- [http-nio-8080-exec-9] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 20:09:04.203 DEBUG 1704 --- [http-nio-8080-exec-9] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 20:09:04.207 DEBUG 1704 --- [http-nio-8080-exec-9] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 20:09:04.208 DEBUG 1704 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 20:09:04.209 DEBUG 1704 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 20:09:04.212 DEBUG 1704 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 20:09:04.214 DEBUG 1704 --- [http-nio-8080-exec-9] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 20:09:04.214 DEBUG 1704 --- [http-nio-8080-exec-9] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 20:09:04.216 DEBUG 1704 --- [http-nio-8080-exec-9] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 20:09:04.217  INFO 1704 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : index
2020-04-20 20:09:06.590  INFO 1704 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.search', args=[PageRequest{pageNum=0, pageSize=0}, j, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 20:09:06.593 DEBUG 1704 --- [http-nio-8080-exec-8] .m.B.getBlogBySearchTitleOrContent_COUNT : ==>  Preparing: select count(0) from (select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%")) tmp_count 
2020-04-20 20:09:06.594 DEBUG 1704 --- [http-nio-8080-exec-8] .m.B.getBlogBySearchTitleOrContent_COUNT : ==> Parameters: j(String), j(String)
2020-04-20 20:09:06.595 DEBUG 1704 --- [http-nio-8080-exec-8] .m.B.getBlogBySearchTitleOrContent_COUNT : <==      Total: 1
2020-04-20 20:09:06.596 DEBUG 1704 --- [http-nio-8080-exec-8] c.q.m.B.getBlogBySearchTitleOrContent    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%") LIMIT ? 
2020-04-20 20:09:06.597 DEBUG 1704 --- [http-nio-8080-exec-8] c.q.m.B.getBlogBySearchTitleOrContent    : ==> Parameters: j(String), j(String), 5(Integer)
2020-04-20 20:09:06.604 DEBUG 1704 --- [http-nio-8080-exec-8] c.q.m.B.getBlogBySearchTitleOrContent    : <==      Total: 1
2020-04-20 20:09:06.606 DEBUG 1704 --- [http-nio-8080-exec-8] .m.B.getBlogBySearchTitleOrContent_COUNT : ==>  Preparing: select count(0) from (select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%")) tmp_count 
2020-04-20 20:09:06.607 DEBUG 1704 --- [http-nio-8080-exec-8] .m.B.getBlogBySearchTitleOrContent_COUNT : ==> Parameters: j(String), j(String)
2020-04-20 20:09:06.608 DEBUG 1704 --- [http-nio-8080-exec-8] .m.B.getBlogBySearchTitleOrContent_COUNT : <==      Total: 1
2020-04-20 20:09:06.609 DEBUG 1704 --- [http-nio-8080-exec-8] c.q.m.B.getBlogBySearchTitleOrContent    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%") LIMIT ? 
2020-04-20 20:09:06.610 DEBUG 1704 --- [http-nio-8080-exec-8] c.q.m.B.getBlogBySearchTitleOrContent    : ==> Parameters: j(String), j(String), 5(Integer)
2020-04-20 20:09:06.613 DEBUG 1704 --- [http-nio-8080-exec-8] c.q.m.B.getBlogBySearchTitleOrContent    : <==      Total: 1
2020-04-20 20:09:06.614  INFO 1704 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : search
2020-04-20 20:09:11.015  INFO 1704 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.search', args=[PageRequest{pageNum=0, pageSize=0}, m, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 20:09:11.028 DEBUG 1704 --- [http-nio-8080-exec-6] .m.B.getBlogBySearchTitleOrContent_COUNT : ==>  Preparing: select count(0) from (select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%")) tmp_count 
2020-04-20 20:09:11.029 DEBUG 1704 --- [http-nio-8080-exec-6] .m.B.getBlogBySearchTitleOrContent_COUNT : ==> Parameters: m(String), m(String)
2020-04-20 20:09:11.031 DEBUG 1704 --- [http-nio-8080-exec-6] .m.B.getBlogBySearchTitleOrContent_COUNT : <==      Total: 1
2020-04-20 20:09:11.031 DEBUG 1704 --- [http-nio-8080-exec-6] c.q.m.B.getBlogBySearchTitleOrContent    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%") LIMIT ? 
2020-04-20 20:09:11.031 DEBUG 1704 --- [http-nio-8080-exec-6] c.q.m.B.getBlogBySearchTitleOrContent    : ==> Parameters: m(String), m(String), 5(Integer)
2020-04-20 20:09:11.040 DEBUG 1704 --- [http-nio-8080-exec-6] c.q.m.B.getBlogBySearchTitleOrContent    : <==      Total: 2
2020-04-20 20:09:11.043 DEBUG 1704 --- [http-nio-8080-exec-6] .m.B.getBlogBySearchTitleOrContent_COUNT : ==>  Preparing: select count(0) from (select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%")) tmp_count 
2020-04-20 20:09:11.043 DEBUG 1704 --- [http-nio-8080-exec-6] .m.B.getBlogBySearchTitleOrContent_COUNT : ==> Parameters: m(String), m(String)
2020-04-20 20:09:11.044 DEBUG 1704 --- [http-nio-8080-exec-6] .m.B.getBlogBySearchTitleOrContent_COUNT : <==      Total: 1
2020-04-20 20:09:11.045 DEBUG 1704 --- [http-nio-8080-exec-6] c.q.m.B.getBlogBySearchTitleOrContent    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%") LIMIT ? 
2020-04-20 20:09:11.046 DEBUG 1704 --- [http-nio-8080-exec-6] c.q.m.B.getBlogBySearchTitleOrContent    : ==> Parameters: m(String), m(String), 5(Integer)
2020-04-20 20:09:11.050 DEBUG 1704 --- [http-nio-8080-exec-6] c.q.m.B.getBlogBySearchTitleOrContent    : <==      Total: 2
2020-04-20 20:09:11.050  INFO 1704 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : search
2020-04-20 20:09:20.839  INFO 1704 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.search', args=[PageRequest{pageNum=0, pageSize=0}, , {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 20:09:20.841 DEBUG 1704 --- [http-nio-8080-exec-8] .m.B.getBlogBySearchTitleOrContent_COUNT : ==>  Preparing: select count(0) from (select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%")) tmp_count 
2020-04-20 20:09:20.841 DEBUG 1704 --- [http-nio-8080-exec-8] .m.B.getBlogBySearchTitleOrContent_COUNT : ==> Parameters: (String), (String)
2020-04-20 20:09:20.842 DEBUG 1704 --- [http-nio-8080-exec-8] .m.B.getBlogBySearchTitleOrContent_COUNT : <==      Total: 1
2020-04-20 20:09:20.843 DEBUG 1704 --- [http-nio-8080-exec-8] c.q.m.B.getBlogBySearchTitleOrContent    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%") LIMIT ? 
2020-04-20 20:09:20.843 DEBUG 1704 --- [http-nio-8080-exec-8] c.q.m.B.getBlogBySearchTitleOrContent    : ==> Parameters: (String), (String), 5(Integer)
2020-04-20 20:09:20.848 DEBUG 1704 --- [http-nio-8080-exec-8] c.q.m.B.getBlogBySearchTitleOrContent    : <==      Total: 5
2020-04-20 20:09:20.850 DEBUG 1704 --- [http-nio-8080-exec-8] .m.B.getBlogBySearchTitleOrContent_COUNT : ==>  Preparing: select count(0) from (select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%")) tmp_count 
2020-04-20 20:09:20.851 DEBUG 1704 --- [http-nio-8080-exec-8] .m.B.getBlogBySearchTitleOrContent_COUNT : ==> Parameters: (String), (String)
2020-04-20 20:09:20.852 DEBUG 1704 --- [http-nio-8080-exec-8] .m.B.getBlogBySearchTitleOrContent_COUNT : <==      Total: 1
2020-04-20 20:09:20.853 DEBUG 1704 --- [http-nio-8080-exec-8] c.q.m.B.getBlogBySearchTitleOrContent    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%") LIMIT ? 
2020-04-20 20:09:20.853 DEBUG 1704 --- [http-nio-8080-exec-8] c.q.m.B.getBlogBySearchTitleOrContent    : ==> Parameters: (String), (String), 5(Integer)
2020-04-20 20:09:20.858 DEBUG 1704 --- [http-nio-8080-exec-8] c.q.m.B.getBlogBySearchTitleOrContent    : <==      Total: 5
2020-04-20 20:09:20.859  INFO 1704 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : search
2020-04-20 20:09:20.872 ERROR 1704 --- [http-nio-8080-exec-8] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-8] Exception processing template "search": An error happened during template parsing (template: "class path resource [templates/search.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/search.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) [thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) [thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362) [thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189) [thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: org.attoparser.ParseException: Exception evaluating SpringEL expression: "result.getTotalPages()!=0&&result.getPageNum() != page.getTotalPages()" (template: "search" - line 91, col 88)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	... 48 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "result.getTotalPages()!=0&&result.getPageNum() != page.getTotalPages()" (template: "search" - line 91, col 88)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:290) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:125) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.StandardIfTagProcessor.isVisible(StandardIfTagProcessor.java:59) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.AbstractStandardConditionalVisibilityTagProcessor.doProcess(AbstractStandardConditionalVisibilityTagProcessor.java:61) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	... 50 common frames omitted
Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1011E: Method call: Attempted to call method getTotalPages() on null context object
	at org.springframework.expression.spel.ast.MethodReference.throwIfNotNullSafe(MethodReference.java:154) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.MethodReference.getValueRef(MethodReference.java:83) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:70) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:91) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.OpNE.getValueInternal(OpNE.java:44) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.OpNE.getValueInternal(OpNE.java:33) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:188) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.OpAnd.getBooleanValue(OpAnd.java:57) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.OpAnd.getValueInternal(OpAnd.java:52) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	... 71 common frames omitted

2020-04-20 20:09:20.873 ERROR 1704 --- [http-nio-8080-exec-8] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/search.html]")] with root cause

org.springframework.expression.spel.SpelEvaluationException: EL1011E: Method call: Attempted to call method getTotalPages() on null context object
	at org.springframework.expression.spel.ast.MethodReference.throwIfNotNullSafe(MethodReference.java:154) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.MethodReference.getValueRef(MethodReference.java:83) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:70) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:91) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.OpNE.getValueInternal(OpNE.java:44) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.OpNE.getValueInternal(OpNE.java:33) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:188) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.OpAnd.getBooleanValue(OpAnd.java:57) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.OpAnd.getValueInternal(OpAnd.java:52) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337) ~[spring-expression-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:125) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.StandardIfTagProcessor.isVisible(StandardIfTagProcessor.java:59) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.processor.AbstractStandardConditionalVisibilityTagProcessor.doProcess(AbstractStandardConditionalVisibilityTagProcessor.java:61) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]

2020-04-20 20:09:20.886 ERROR 1704 --- [http-nio-8080-exec-8] s.e.ErrorMvcAutoConfiguration$StaticView : Cannot render error page for request [/search] and exception [An error happened during template parsing (template: "class path resource [templates/search.html]")] as the response has already been committed. As a result, the response may have the wrong status code.
2020-04-20 20:10:21.335  INFO 1704 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.search', args=[PageRequest{pageNum=0, pageSize=0}, , {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 20:10:21.339 DEBUG 1704 --- [http-nio-8080-exec-5] .m.B.getBlogBySearchTitleOrContent_COUNT : ==>  Preparing: select count(0) from (select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%")) tmp_count 
2020-04-20 20:10:21.339 DEBUG 1704 --- [http-nio-8080-exec-5] .m.B.getBlogBySearchTitleOrContent_COUNT : ==> Parameters: (String), (String)
2020-04-20 20:10:21.340 DEBUG 1704 --- [http-nio-8080-exec-5] .m.B.getBlogBySearchTitleOrContent_COUNT : <==      Total: 1
2020-04-20 20:10:21.341 DEBUG 1704 --- [http-nio-8080-exec-5] c.q.m.B.getBlogBySearchTitleOrContent    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%") LIMIT ? 
2020-04-20 20:10:21.341 DEBUG 1704 --- [http-nio-8080-exec-5] c.q.m.B.getBlogBySearchTitleOrContent    : ==> Parameters: (String), (String), 5(Integer)
2020-04-20 20:10:21.353 DEBUG 1704 --- [http-nio-8080-exec-5] c.q.m.B.getBlogBySearchTitleOrContent    : <==      Total: 5
2020-04-20 20:10:21.355 DEBUG 1704 --- [http-nio-8080-exec-5] .m.B.getBlogBySearchTitleOrContent_COUNT : ==>  Preparing: select count(0) from (select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%")) tmp_count 
2020-04-20 20:10:21.356 DEBUG 1704 --- [http-nio-8080-exec-5] .m.B.getBlogBySearchTitleOrContent_COUNT : ==> Parameters: (String), (String)
2020-04-20 20:10:21.358 DEBUG 1704 --- [http-nio-8080-exec-5] .m.B.getBlogBySearchTitleOrContent_COUNT : <==      Total: 1
2020-04-20 20:10:21.358 DEBUG 1704 --- [http-nio-8080-exec-5] c.q.m.B.getBlogBySearchTitleOrContent    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%") LIMIT ? 
2020-04-20 20:10:21.359 DEBUG 1704 --- [http-nio-8080-exec-5] c.q.m.B.getBlogBySearchTitleOrContent    : ==> Parameters: (String), (String), 5(Integer)
2020-04-20 20:10:21.364 DEBUG 1704 --- [http-nio-8080-exec-5] c.q.m.B.getBlogBySearchTitleOrContent    : <==      Total: 5
2020-04-20 20:10:21.364  INFO 1704 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : search
2020-04-20 20:10:23.225  INFO 1704 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=2, pageSize=5}, {pageRequest=PageRequest{pageNum=2, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 20:10:23.228 DEBUG 1704 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 20:10:23.229 DEBUG 1704 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 20:10:23.230 DEBUG 1704 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 20:10:23.230 DEBUG 1704 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ?, ? 
2020-04-20 20:10:23.231 DEBUG 1704 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer), 5(Integer)
2020-04-20 20:10:23.236 DEBUG 1704 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 1
2020-04-20 20:10:23.240 DEBUG 1704 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 20:10:23.241 DEBUG 1704 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 20:10:23.243 DEBUG 1704 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 20:10:23.245 DEBUG 1704 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 20:10:23.245 DEBUG 1704 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 20:10:23.246 DEBUG 1704 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 20:10:23.247 DEBUG 1704 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 20:10:23.247 DEBUG 1704 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 20:10:23.248 DEBUG 1704 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 20:10:23.248  INFO 1704 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : index
2020-04-20 20:10:24.872  INFO 1704 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=1, pageSize=5}, {pageRequest=PageRequest{pageNum=1, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 20:10:24.876 DEBUG 1704 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 20:10:24.877 DEBUG 1704 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 20:10:24.878 DEBUG 1704 --- [http-nio-8080-exec-4] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 20:10:24.878 DEBUG 1704 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 20:10:24.879 DEBUG 1704 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 20:10:24.888 DEBUG 1704 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 20:10:24.891 DEBUG 1704 --- [http-nio-8080-exec-4] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 20:10:24.891 DEBUG 1704 --- [http-nio-8080-exec-4] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 20:10:24.894 DEBUG 1704 --- [http-nio-8080-exec-4] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 20:10:24.894 DEBUG 1704 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 20:10:24.895 DEBUG 1704 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 20:10:24.896 DEBUG 1704 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 20:10:24.897 DEBUG 1704 --- [http-nio-8080-exec-4] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 20:10:24.897 DEBUG 1704 --- [http-nio-8080-exec-4] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 20:10:24.899 DEBUG 1704 --- [http-nio-8080-exec-4] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 20:10:24.899  INFO 1704 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : index
2020-04-20 20:11:05.483  INFO 1704 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=2, pageSize=5}, {pageRequest=PageRequest{pageNum=2, pageSize=5}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 20:11:05.488 DEBUG 1704 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 20:11:05.488 DEBUG 1704 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 20:11:05.489 DEBUG 1704 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 20:11:05.490 DEBUG 1704 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ?, ? 
2020-04-20 20:11:05.490 DEBUG 1704 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer), 5(Integer)
2020-04-20 20:11:05.491 DEBUG 1704 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 1
2020-04-20 20:11:05.493 DEBUG 1704 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 20:11:05.493 DEBUG 1704 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 20:11:05.494 DEBUG 1704 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 20:11:05.494 DEBUG 1704 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 20:11:05.495 DEBUG 1704 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 20:11:05.497 DEBUG 1704 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 20:11:05.499 DEBUG 1704 --- [http-nio-8080-exec-2] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 20:11:05.500 DEBUG 1704 --- [http-nio-8080-exec-2] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 20:11:05.501 DEBUG 1704 --- [http-nio-8080-exec-2] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 20:11:05.501  INFO 1704 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : index
2020-04-20 20:11:12.577  INFO 1704 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=1, pageSize=10}, {pageRequest=PageRequest{pageNum=1, pageSize=10}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 20:11:12.581 DEBUG 1704 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 20:11:12.582 DEBUG 1704 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 20:11:12.584 DEBUG 1704 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 20:11:12.587 DEBUG 1704 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 20:11:12.588 DEBUG 1704 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 10(Integer)
2020-04-20 20:11:12.593 DEBUG 1704 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 6
2020-04-20 20:11:12.595 DEBUG 1704 --- [http-nio-8080-exec-8] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 20:11:12.595 DEBUG 1704 --- [http-nio-8080-exec-8] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 20:11:12.597 DEBUG 1704 --- [http-nio-8080-exec-8] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 20:11:12.600 DEBUG 1704 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 20:11:12.600 DEBUG 1704 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 20:11:12.602 DEBUG 1704 --- [http-nio-8080-exec-8] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 20:11:12.602 DEBUG 1704 --- [http-nio-8080-exec-8] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 20:11:12.603 DEBUG 1704 --- [http-nio-8080-exec-8] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 20:11:12.606 DEBUG 1704 --- [http-nio-8080-exec-8] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 20:11:12.606  INFO 1704 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : index
2020-04-20 20:11:27.948  INFO 1704 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/search', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.search', args=[PageRequest{pageNum=0, pageSize=0}, 平时, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 20:11:27.953 DEBUG 1704 --- [http-nio-8080-exec-5] .m.B.getBlogBySearchTitleOrContent_COUNT : ==>  Preparing: select count(0) from (select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%")) tmp_count 
2020-04-20 20:11:27.953 DEBUG 1704 --- [http-nio-8080-exec-5] .m.B.getBlogBySearchTitleOrContent_COUNT : ==> Parameters: 平时(String), 平时(String)
2020-04-20 20:11:27.955 DEBUG 1704 --- [http-nio-8080-exec-5] .m.B.getBlogBySearchTitleOrContent_COUNT : <==      Total: 1
2020-04-20 20:11:27.956 DEBUG 1704 --- [http-nio-8080-exec-5] c.q.m.B.getBlogBySearchTitleOrContent    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%") LIMIT ? 
2020-04-20 20:11:27.957 DEBUG 1704 --- [http-nio-8080-exec-5] c.q.m.B.getBlogBySearchTitleOrContent    : ==> Parameters: 平时(String), 平时(String), 5(Integer)
2020-04-20 20:11:27.962 DEBUG 1704 --- [http-nio-8080-exec-5] c.q.m.B.getBlogBySearchTitleOrContent    : <==      Total: 1
2020-04-20 20:11:27.964 DEBUG 1704 --- [http-nio-8080-exec-5] .m.B.getBlogBySearchTitleOrContent_COUNT : ==>  Preparing: select count(0) from (select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%")) tmp_count 
2020-04-20 20:11:27.964 DEBUG 1704 --- [http-nio-8080-exec-5] .m.B.getBlogBySearchTitleOrContent_COUNT : ==> Parameters: 平时(String), 平时(String)
2020-04-20 20:11:27.966 DEBUG 1704 --- [http-nio-8080-exec-5] .m.B.getBlogBySearchTitleOrContent_COUNT : <==      Total: 1
2020-04-20 20:11:27.966 DEBUG 1704 --- [http-nio-8080-exec-5] c.q.m.B.getBlogBySearchTitleOrContent    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and (b.title like "%"?"%" or b.content like "%"?"%") LIMIT ? 
2020-04-20 20:11:27.967 DEBUG 1704 --- [http-nio-8080-exec-5] c.q.m.B.getBlogBySearchTitleOrContent    : ==> Parameters: 平时(String), 平时(String), 5(Integer)
2020-04-20 20:11:27.970 DEBUG 1704 --- [http-nio-8080-exec-5] c.q.m.B.getBlogBySearchTitleOrContent    : <==      Total: 1
2020-04-20 20:11:27.971  INFO 1704 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : search
2020-04-20 20:21:27.310  INFO 1704 --- [Thread-12] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-20 20:21:27.311  INFO 1704 --- [Thread-12] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-04-20 20:21:27.328  INFO 1704 --- [Thread-12] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-04-20 20:21:28.099  INFO 1704 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 1704 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 20:21:28.099 DEBUG 1704 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 20:21:28.100  INFO 1704 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 20:21:28.416  INFO 1704 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 20:21:28.425  INFO 1704 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 9ms. Found 0 JDBC repository interfaces.
2020-04-20 20:21:28.673  INFO 1704 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 20:21:28.673  INFO 1704 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 20:21:28.674  INFO 1704 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 20:21:28.703  INFO 1704 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 20:21:28.703  INFO 1704 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 600 ms
2020-04-20 20:21:29.043  INFO 1704 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 20:21:29.078  INFO 1704 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 20:21:29.479  INFO 1704 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 20:21:29.496  INFO 1704 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 20:21:29.497  INFO 1704 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 1.452 seconds (JVM running for 866.59)
2020-04-20 20:21:29.500  INFO 1704 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-20 20:21:33.336  INFO 1704 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 20:21:33.337  INFO 1704 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 20:21:33.354  INFO 1704 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 17 ms
2020-04-20 20:21:33.360  INFO 1704 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 20:21:33.365  INFO 1704 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
2020-04-20 20:21:33.397  INFO 1704 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
2020-04-20 20:21:33.401 DEBUG 1704 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 20:21:33.402 DEBUG 1704 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 20:21:33.404 DEBUG 1704 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 20:21:33.405 DEBUG 1704 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, b.description bdescription, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 20:21:33.406 DEBUG 1704 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 20:21:33.411 DEBUG 1704 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 20:21:33.415 DEBUG 1704 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 20:21:33.415 DEBUG 1704 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 20:21:33.416 DEBUG 1704 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 20:21:33.418 DEBUG 1704 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 20:21:33.419 DEBUG 1704 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 20:21:33.420 DEBUG 1704 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 20:21:33.421 DEBUG 1704 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 20:21:33.421 DEBUG 1704 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 20:21:33.423 DEBUG 1704 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 20:21:33.424  INFO 1704 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : index
2020-04-20 20:21:35.381  INFO 1704 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 20:21:35.383  INFO 1704 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 20:21:39.329  INFO 1704 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@490dc6b7, {}]}
2020-04-20 20:21:39.333 DEBUG 1704 --- [http-nio-8080-exec-8] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 20:21:39.333 DEBUG 1704 --- [http-nio-8080-exec-8] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 20:21:39.334 DEBUG 1704 --- [http-nio-8080-exec-8] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 20:21:39.335  INFO 1704 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 20:21:40.507  INFO 1704 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@490dc6b7]}
2020-04-20 20:21:40.511 DEBUG 1704 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 20:21:40.511 DEBUG 1704 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 20:21:40.512 DEBUG 1704 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 20:21:40.646 DEBUG 1704 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 20:21:40.646 DEBUG 1704 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 20:21:40.647 DEBUG 1704 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 20:21:40.648 DEBUG 1704 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, b.description bdescription, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 20:21:40.648 DEBUG 1704 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 20:21:40.653 DEBUG 1704 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 20:21:40.655  INFO 1704 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 20:21:42.305  INFO 1704 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 20:21:42.306 DEBUG 1704 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 20:21:42.306 DEBUG 1704 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 20:21:42.309 DEBUG 1704 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 20:21:42.310 DEBUG 1704 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 20:21:42.310 DEBUG 1704 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 20:21:42.311 DEBUG 1704 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 20:21:42.312 DEBUG 1704 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, b.description bdescription, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 20:21:42.313 DEBUG 1704 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 20:21:42.323 DEBUG 1704 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 20:21:42.327  INFO 1704 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 20:22:49.957  INFO 1704 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 20:22:49.958 DEBUG 1704 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 20:22:49.958 DEBUG 1704 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 20:22:49.959 DEBUG 1704 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 20:22:49.960 DEBUG 1704 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 20:22:49.961 DEBUG 1704 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 20:22:49.963 DEBUG 1704 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 20:22:49.964 DEBUG 1704 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, b.description bdescription, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 20:22:49.965 DEBUG 1704 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 20:22:49.970 DEBUG 1704 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 20:22:49.975  INFO 1704 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 20:23:02.075  INFO 1704 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[Blog{id=12, title='平时日记', content='# Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync', firstPicture='https://i.picsum.photos/id/1005/800/450.jpg', flag='原创', views=null, appreciation=true, shareStatement=true, commentAble=true, published=true, recommend=true, creatTime=null, updateTime=null, typeId=42, userId=null, tagIds='9,6', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, 12, {}, org.apache.catalina.session.StandardSessionFacade@490dc6b7]}
2020-04-20 20:23:02.079 DEBUG 1704 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 20:23:02.079 DEBUG 1704 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 9(Long)
2020-04-20 20:23:02.080 DEBUG 1704 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 20:23:02.081 DEBUG 1704 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 20:23:02.081 DEBUG 1704 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 6(Long)
2020-04-20 20:23:02.083 DEBUG 1704 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 20:23:02.084 DEBUG 1704 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 20:23:02.085 DEBUG 1704 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 42(Long)
2020-04-20 20:23:02.085 DEBUG 1704 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 20:23:02.087 DEBUG 1704 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, b.description bdescription, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 20:23:02.087 DEBUG 1704 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 20:23:02.093 DEBUG 1704 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 20:23:02.094 DEBUG 1704 --- [http-nio-8080-exec-7] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==>  Preparing: delete from t_blog_tag where blog_id = ? 
2020-04-20 20:23:02.094 DEBUG 1704 --- [http-nio-8080-exec-7] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==> Parameters: 12(Long)
2020-04-20 20:23:02.115 DEBUG 1704 --- [http-nio-8080-exec-7] c.q.m.BlogTagMapper.delBlogTagByBlogId   : <==    Updates: 2
2020-04-20 20:23:02.116 DEBUG 1704 --- [http-nio-8080-exec-7] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 20:23:02.116 DEBUG 1704 --- [http-nio-8080-exec-7] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 9(Long)
2020-04-20 20:23:02.322 DEBUG 1704 --- [http-nio-8080-exec-7] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 20:23:02.323 DEBUG 1704 --- [http-nio-8080-exec-7] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 20:23:02.323 DEBUG 1704 --- [http-nio-8080-exec-7] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 6(Long)
2020-04-20 20:23:02.324 DEBUG 1704 --- [http-nio-8080-exec-7] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 20:23:02.325 DEBUG 1704 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.updateBlog     : ==>  Preparing: update t_blog set title = ?, content=?, firstPicture=?, flag=?, appreciation=?, shareStatement=?, commentAble=?, published=?, recommend=?, updateTime=?, type_id=?, user_id=? description=? where id = ?; 
2020-04-20 20:23:02.476 ERROR 1704 --- [http-nio-8080-exec-7] c.q.handler.ControllerExceptionHandler   : Request URL : http://localhost:8080/admin/blogs/12, Exception : {}

org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.binding.BindingException: Parameter 'description' not found. Available parameters are [id, blog, param1, param2]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at com.sun.proxy.$Proxy83.update(Unknown Source) ~[na:na]
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:287) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:144) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85) ~[mybatis-3.5.4.jar:3.5.4]
	at com.sun.proxy.$Proxy123.updateBlog(Unknown Source) ~[na:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.sun.proxy.$Proxy124.updateBlog(Unknown Source) ~[na:na]
	at com.qin.service.BlogServiceImpl.updateBlog(BlogServiceImpl.java:71) ~[classes/:na]
	at com.qin.service.BlogServiceImpl$$FastClassBySpringCGLIB$$cb930495.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:99) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.qin.service.BlogServiceImpl$$EnhancerBySpringCGLIB$$d1d65290.updateBlog(<generated>) ~[classes/:na]
	at com.qin.controller.AdminBlogController.update(AdminBlogController.java:132) ~[classes/:na]
	at com.qin.controller.AdminBlogController$$FastClassBySpringCGLIB$$dfdcc7c0.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.qin.controller.AdminBlogController$$EnhancerBySpringCGLIB$$3e92304.update(<generated>) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: org.apache.ibatis.binding.BindingException: Parameter 'description' not found. Available parameters are [id, blog, param1, param2]
	at org.apache.ibatis.binding.MapperMethod$ParamMap.get(MapperMethod.java:212) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.reflection.wrapper.MapWrapper.get(MapWrapper.java:45) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.scripting.defaults.DefaultParameterHandler.setParameters(DefaultParameterHandler.java:79) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.parameterize(PreparedStatementHandler.java:94) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.parameterize(RoutingStatementHandler.java:64) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:88) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:49) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76) ~[mybatis-3.5.4.jar:3.5.4]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63) ~[mybatis-3.5.4.jar:3.5.4]
	at com.sun.proxy.$Proxy114.update(Unknown Source) ~[na:na]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197) ~[mybatis-3.5.4.jar:3.5.4]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.4.jar:2.0.4]
	... 96 common frames omitted

2020-04-20 20:23:02.476  WARN 1704 --- [http-nio-8080-exec-7] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.binding.BindingException: Parameter 'description' not found. Available parameters are [id, blog, param1, param2]]
2020-04-20 20:24:22.850  INFO 14456 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 14456 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 20:24:22.882 DEBUG 14456 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 20:24:22.882  INFO 14456 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 20:24:22.935  INFO 14456 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 20:24:22.936  INFO 14456 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 20:24:23.679  INFO 14456 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 20:24:23.697  INFO 14456 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 12ms. Found 0 JDBC repository interfaces.
2020-04-20 20:24:24.418  INFO 14456 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 20:24:24.426  INFO 14456 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 20:24:24.426  INFO 14456 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 20:24:24.520  INFO 14456 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 20:24:24.520  INFO 14456 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1584 ms
2020-04-20 20:24:25.176  INFO 14456 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 20:24:25.257  INFO 14456 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 20:24:25.715  INFO 14456 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 20:24:25.758  INFO 14456 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 20:24:25.761  INFO 14456 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 3.7 seconds (JVM running for 4.558)
2020-04-20 20:24:28.217  INFO 14456 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 20:24:28.217  INFO 14456 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 20:24:28.225  INFO 14456 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-04-20 20:24:28.245 ERROR 14456 --- [http-nio-8080-exec-1] c.q.handler.ControllerExceptionHandler   : Request URL : http://localhost:8080/admin/blogs/12, Exception : {}

org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:213) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:421) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:367) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:110) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:59) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:395) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1234) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1016) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]

2020-04-20 20:24:28.248  WARN 14456 --- [http-nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2020-04-20 20:24:32.207  INFO 14456 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 20:24:32.222  INFO 14456 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 20:24:32.778  INFO 14456 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 20:24:32.837 DEBUG 14456 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 20:24:32.860 DEBUG 14456 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 20:24:32.881 DEBUG 14456 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 20:24:32.887 DEBUG 14456 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, b.description bdescription, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 20:24:32.888 DEBUG 14456 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 20:24:32.904 DEBUG 14456 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 20:24:32.914 DEBUG 14456 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 20:24:32.915 DEBUG 14456 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 20:24:32.916 DEBUG 14456 --- [http-nio-8080-exec-2] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 20:24:32.920 DEBUG 14456 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 20:24:32.920 DEBUG 14456 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 20:24:32.923 DEBUG 14456 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 20:24:32.927 DEBUG 14456 --- [http-nio-8080-exec-2] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 20:24:32.927 DEBUG 14456 --- [http-nio-8080-exec-2] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 20:24:32.929 DEBUG 14456 --- [http-nio-8080-exec-2] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 20:24:32.929  INFO 14456 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : index
2020-04-20 20:24:35.935  INFO 14456 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 20:24:35.942  INFO 14456 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 20:24:47.460  INFO 14456 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@29083e51, {}]}
2020-04-20 20:24:47.463 DEBUG 14456 --- [http-nio-8080-exec-1] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 20:24:47.464 DEBUG 14456 --- [http-nio-8080-exec-1] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 20:24:47.466 DEBUG 14456 --- [http-nio-8080-exec-1] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 20:24:47.467  INFO 14456 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 20:24:48.504  INFO 14456 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@29083e51]}
2020-04-20 20:24:48.510 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 20:24:48.511 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 20:24:48.512 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 20:24:48.533 DEBUG 14456 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 20:24:48.534 DEBUG 14456 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 20:24:48.536 DEBUG 14456 --- [http-nio-8080-exec-7] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 20:24:48.538 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, b.description bdescription, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 20:24:48.539 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 20:24:48.549 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 20:24:48.550  INFO 14456 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 20:24:50.876  INFO 14456 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 20:24:50.877 DEBUG 14456 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 20:24:50.877 DEBUG 14456 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 20:24:50.879 DEBUG 14456 --- [http-nio-8080-exec-4] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 20:24:50.882 DEBUG 14456 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 20:24:50.883 DEBUG 14456 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 20:24:50.886 DEBUG 14456 --- [http-nio-8080-exec-4] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 20:24:50.888 DEBUG 14456 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, b.description bdescription, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 20:24:50.889 DEBUG 14456 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 20:24:50.897 DEBUG 14456 --- [http-nio-8080-exec-4] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 20:24:50.900  INFO 14456 --- [http-nio-8080-exec-4] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 20:24:58.387  INFO 14456 --- [http-nio-8080-exec-7] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[Blog{id=12, title='平时日记', content='# Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync', firstPicture='https://i.picsum.photos/id/1005/800/450.jpg', flag='原创', views=null, appreciation=true, shareStatement=true, commentAble=true, published=true, recommend=true, creatTime=null, updateTime=null, typeId=42, userId=null, tagIds='9,6', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, 12, {}, org.apache.catalina.session.StandardSessionFacade@29083e51]}
2020-04-20 20:24:58.390 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 20:24:58.391 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 9(Long)
2020-04-20 20:24:58.392 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 20:24:58.393 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 20:24:58.395 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 6(Long)
2020-04-20 20:24:58.396 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 20:24:58.399 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 20:24:58.400 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 42(Long)
2020-04-20 20:24:58.401 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 20:24:58.403 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, b.description bdescription, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 20:24:58.404 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 20:24:58.410 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 20:24:58.412 DEBUG 14456 --- [http-nio-8080-exec-7] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==>  Preparing: delete from t_blog_tag where blog_id = ? 
2020-04-20 20:24:58.412 DEBUG 14456 --- [http-nio-8080-exec-7] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==> Parameters: 12(Long)
2020-04-20 20:24:58.415 DEBUG 14456 --- [http-nio-8080-exec-7] c.q.m.BlogTagMapper.delBlogTagByBlogId   : <==    Updates: 2
2020-04-20 20:24:58.416 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 20:24:58.416 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 9(Long)
2020-04-20 20:24:58.754 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 20:24:58.754 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 20:24:58.755 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 6(Long)
2020-04-20 20:24:58.756 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 20:24:58.756 DEBUG 14456 --- [http-nio-8080-exec-7] com.qin.mapper.BlogMapper.updateBlog     : ==>  Preparing: update t_blog set title = ?, content=?, firstPicture=?, flag=?, appreciation=?, shareStatement=?, commentAble=?, published=?, recommend=?, updateTime=?, type_id=?, user_id=?, description=? where id = ?; 
2020-04-20 20:24:58.894 ERROR 14456 --- [http-nio-8080-exec-7] c.q.handler.ControllerExceptionHandler   : Request URL : http://localhost:8080/admin/blogs/12, Exception : {}

org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.binding.BindingException: Parameter 'description' not found. Available parameters are [id, blog, param1, param2]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at com.sun.proxy.$Proxy83.update(Unknown Source) ~[na:na]
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:287) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:144) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85) ~[mybatis-3.5.4.jar:3.5.4]
	at com.sun.proxy.$Proxy84.updateBlog(Unknown Source) ~[na:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.sun.proxy.$Proxy85.updateBlog(Unknown Source) ~[na:na]
	at com.qin.service.BlogServiceImpl.updateBlog(BlogServiceImpl.java:71) ~[classes/:na]
	at com.qin.service.BlogServiceImpl$$FastClassBySpringCGLIB$$cb930495.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:99) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.qin.service.BlogServiceImpl$$EnhancerBySpringCGLIB$$8abed954.updateBlog(<generated>) ~[classes/:na]
	at com.qin.controller.AdminBlogController.update(AdminBlogController.java:132) ~[classes/:na]
	at com.qin.controller.AdminBlogController$$FastClassBySpringCGLIB$$dfdcc7c0.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.qin.controller.AdminBlogController$$EnhancerBySpringCGLIB$$34476290.update(<generated>) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: org.apache.ibatis.binding.BindingException: Parameter 'description' not found. Available parameters are [id, blog, param1, param2]
	at org.apache.ibatis.binding.MapperMethod$ParamMap.get(MapperMethod.java:212) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.reflection.wrapper.MapWrapper.get(MapWrapper.java:45) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.scripting.defaults.DefaultParameterHandler.setParameters(DefaultParameterHandler.java:79) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.parameterize(PreparedStatementHandler.java:94) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.parameterize(RoutingStatementHandler.java:64) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:88) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:49) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76) ~[mybatis-3.5.4.jar:3.5.4]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63) ~[mybatis-3.5.4.jar:3.5.4]
	at com.sun.proxy.$Proxy114.update(Unknown Source) ~[na:na]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197) ~[mybatis-3.5.4.jar:3.5.4]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.4.jar:2.0.4]
	... 96 common frames omitted

2020-04-20 20:24:58.896  WARN 14456 --- [http-nio-8080-exec-7] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.binding.BindingException: Parameter 'description' not found. Available parameters are [id, blog, param1, param2]]
2020-04-20 20:26:25.974  INFO 1316 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 1316 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 20:26:25.977 DEBUG 1316 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 20:26:25.977  INFO 1316 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 20:26:26.084  INFO 1316 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 20:26:26.091  INFO 1316 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 20:26:27.980  INFO 1316 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 20:26:28.028  INFO 1316 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 41ms. Found 0 JDBC repository interfaces.
2020-04-20 20:26:29.917  INFO 1316 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 20:26:29.926  INFO 1316 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 20:26:29.926  INFO 1316 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 20:26:30.014  INFO 1316 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 20:26:30.015  INFO 1316 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3918 ms
2020-04-20 20:26:30.909  INFO 1316 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 20:26:31.020  INFO 1316 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 20:26:31.713  INFO 1316 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 20:26:31.772  INFO 1316 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 20:26:31.776  INFO 1316 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 6.851 seconds (JVM running for 8.414)
2020-04-20 20:26:49.058  INFO 1316 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 20:26:49.059  INFO 1316 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 20:26:49.074  INFO 1316 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 15 ms
2020-04-20 20:26:49.102  INFO 1316 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 20:26:49.107  INFO 1316 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 20:26:53.479  INFO 1316 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@4f3101a5, {}]}
2020-04-20 20:26:53.537  INFO 1316 --- [http-nio-8080-exec-10] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 20:26:54.105  INFO 1316 --- [http-nio-8080-exec-10] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 20:26:54.115 DEBUG 1316 --- [http-nio-8080-exec-10] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 20:26:54.138 DEBUG 1316 --- [http-nio-8080-exec-10] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 20:26:54.160 DEBUG 1316 --- [http-nio-8080-exec-10] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 20:26:54.167  INFO 1316 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 20:26:55.804  INFO 1316 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@4f3101a5]}
2020-04-20 20:26:55.813 DEBUG 1316 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 20:26:55.814 DEBUG 1316 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 20:26:55.815 DEBUG 1316 --- [http-nio-8080-exec-10] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 20:26:55.874 DEBUG 1316 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 20:26:55.874 DEBUG 1316 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 20:26:55.876 DEBUG 1316 --- [http-nio-8080-exec-10] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 20:26:55.880 DEBUG 1316 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, b.description bdescription, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 20:26:55.880 DEBUG 1316 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 20:26:55.893 DEBUG 1316 --- [http-nio-8080-exec-10] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 20:26:55.897  INFO 1316 --- [http-nio-8080-exec-10] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 20:26:57.423  INFO 1316 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 20:26:57.426 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 20:26:57.426 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 20:26:57.428 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 20:26:57.432 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 20:26:57.432 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 20:26:57.433 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 20:26:57.436 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, b.description bdescription, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 20:26:57.436 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 20:26:57.447 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 20:26:57.452  INFO 1316 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 20:27:01.974  INFO 1316 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[Blog{id=12, title='平时日记', content='# Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync', firstPicture='https://i.picsum.photos/id/1005/800/450.jpg', flag='原创', views=null, appreciation=true, shareStatement=true, commentAble=true, published=true, recommend=true, creatTime=null, updateTime=null, typeId=42, userId=null, tagIds='9,6', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, 12, {}, org.apache.catalina.session.StandardSessionFacade@4f3101a5]}
2020-04-20 20:27:21.889 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 20:27:21.890 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 9(Long)
2020-04-20 20:27:21.899 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 20:27:21.903 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 20:27:21.905 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 6(Long)
2020-04-20 20:27:21.913 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 20:27:22.402 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 20:27:22.404 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 42(Long)
2020-04-20 20:27:22.412 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 20:27:26.006 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, b.description bdescription, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 20:27:26.008 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 20:27:26.320 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 20:27:26.324 DEBUG 1316 --- [http-nio-8080-exec-9] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==>  Preparing: delete from t_blog_tag where blog_id = ? 
2020-04-20 20:27:26.326 DEBUG 1316 --- [http-nio-8080-exec-9] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==> Parameters: 12(Long)
2020-04-20 20:27:26.339 DEBUG 1316 --- [http-nio-8080-exec-9] c.q.m.BlogTagMapper.delBlogTagByBlogId   : <==    Updates: 2
2020-04-20 20:27:26.342 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 20:27:26.345 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 9(Long)
2020-04-20 20:27:26.909 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 20:27:26.910 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 20:27:26.913 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 6(Long)
2020-04-20 20:27:26.927 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 20:27:26.932 DEBUG 1316 --- [http-nio-8080-exec-9] com.qin.mapper.BlogMapper.updateBlog     : ==>  Preparing: update t_blog set title = ?, content=?, firstPicture=?, flag=?, appreciation=?, shareStatement=?, commentAble=?, published=?, recommend=?, updateTime=?, type_id=?, user_id=?, description=? where id = ?; 
2020-04-20 20:28:14.752 ERROR 1316 --- [http-nio-8080-exec-9] c.q.handler.ControllerExceptionHandler   : Request URL : http://localhost:8080/admin/blogs/12, Exception : {}

org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.binding.BindingException: Parameter 'description' not found. Available parameters are [id, blog, param1, param2]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at com.sun.proxy.$Proxy83.update(Unknown Source) ~[na:na]
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:287) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:144) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85) ~[mybatis-3.5.4.jar:3.5.4]
	at com.sun.proxy.$Proxy84.updateBlog(Unknown Source) ~[na:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.sun.proxy.$Proxy85.updateBlog(Unknown Source) ~[na:na]
	at com.qin.service.BlogServiceImpl.updateBlog(BlogServiceImpl.java:71) ~[classes/:na]
	at com.qin.service.BlogServiceImpl$$FastClassBySpringCGLIB$$cb930495.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:99) ~[spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.qin.service.BlogServiceImpl$$EnhancerBySpringCGLIB$$7320fb7b.updateBlog(<generated>) ~[classes/:na]
	at com.qin.controller.AdminBlogController.update(AdminBlogController.java:132) ~[classes/:na]
	at com.qin.controller.AdminBlogController$$FastClassBySpringCGLIB$$dfdcc7c0.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at com.qin.controller.AdminBlogController$$EnhancerBySpringCGLIB$$ec264172.update(<generated>) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: org.apache.ibatis.binding.BindingException: Parameter 'description' not found. Available parameters are [id, blog, param1, param2]
	at org.apache.ibatis.binding.MapperMethod$ParamMap.get(MapperMethod.java:212) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.reflection.wrapper.MapWrapper.get(MapWrapper.java:45) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.scripting.defaults.DefaultParameterHandler.setParameters(DefaultParameterHandler.java:79) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.parameterize(PreparedStatementHandler.java:94) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.parameterize(RoutingStatementHandler.java:64) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:88) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:49) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76) ~[mybatis-3.5.4.jar:3.5.4]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63) ~[mybatis-3.5.4.jar:3.5.4]
	at com.sun.proxy.$Proxy116.update(Unknown Source) ~[na:na]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197) ~[mybatis-3.5.4.jar:3.5.4]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.4.jar:2.0.4]
	... 96 common frames omitted

2020-04-20 20:28:14.753  WARN 1316 --- [http-nio-8080-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.binding.BindingException: Parameter 'description' not found. Available parameters are [id, blog, param1, param2]]
2020-04-20 20:28:59.261  INFO 1316 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-20 20:28:59.261  INFO 1316 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-04-20 20:28:59.268  INFO 1316 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-04-20 20:29:04.488  INFO 12464 --- [restartedMain] com.qin.MyBlogApplication                : Starting MyBlogApplication on LAPTOP-J73SDI41 with PID 12464 (D:\IdeaProject\my-blog\target\classes started by qin in D:\IdeaProject\my-blog)
2020-04-20 20:29:04.491 DEBUG 12464 --- [restartedMain] com.qin.MyBlogApplication                : Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-20 20:29:04.492  INFO 12464 --- [restartedMain] com.qin.MyBlogApplication                : The following profiles are active: dev
2020-04-20 20:29:04.546  INFO 12464 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-20 20:29:04.546  INFO 12464 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-20 20:29:06.344  INFO 12464 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-04-20 20:29:06.367  INFO 12464 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 17ms. Found 0 JDBC repository interfaces.
2020-04-20 20:29:07.573  INFO 12464 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-20 20:29:07.583  INFO 12464 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-20 20:29:07.584  INFO 12464 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-20 20:29:07.689  INFO 12464 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-20 20:29:07.689  INFO 12464 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3143 ms
2020-04-20 20:29:08.368  INFO 12464 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-20 20:29:08.457  INFO 12464 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-20 20:29:08.922  INFO 12464 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-20 20:29:08.967  INFO 12464 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 20:29:08.970  INFO 12464 --- [restartedMain] com.qin.MyBlogApplication                : Started MyBlogApplication in 5.176 seconds (JVM running for 6.809)
2020-04-20 20:29:25.322  INFO 12464 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 20:29:25.322  INFO 12464 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-20 20:29:25.338  INFO 12464 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 15 ms
2020-04-20 20:29:25.372  INFO 12464 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 20:29:25.382  INFO 12464 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-04-20 20:29:25.916  INFO 12464 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-04-20 20:29:25.972 DEBUG 12464 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 20:29:25.992 DEBUG 12464 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 20:29:26.017 DEBUG 12464 --- [http-nio-8080-exec-1] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 20:29:26.023 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, b.description bdescription, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 20:29:26.024 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 20:29:26.040 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 20:29:26.050 DEBUG 12464 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 20:29:26.051 DEBUG 12464 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 20:29:26.052 DEBUG 12464 --- [http-nio-8080-exec-1] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 20:29:26.056 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 20:29:26.056 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 20:29:26.059 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 20:29:26.061 DEBUG 12464 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 20:29:26.061 DEBUG 12464 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 20:29:26.064 DEBUG 12464 --- [http-nio-8080-exec-1] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 20:29:26.064  INFO 12464 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : index
2020-04-20 20:29:31.888  INFO 12464 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.toLoginPage', args=[]}
2020-04-20 20:29:31.894  INFO 12464 --- [http-nio-8080-exec-9] com.qin.aspect.LogAspect                 : return : admin/login
2020-04-20 20:29:36.761  INFO 12464 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.adminController.login', args=[admin, 123456, org.apache.catalina.session.StandardSessionFacade@309f1898, {}]}
2020-04-20 20:29:36.765 DEBUG 12464 --- [http-nio-8080-exec-8] com.qin.mapper.UserMapper.checkUser      : ==>  Preparing: select * from t_user where username = ? and password = ? 
2020-04-20 20:29:36.766 DEBUG 12464 --- [http-nio-8080-exec-8] com.qin.mapper.UserMapper.checkUser      : ==> Parameters: admin(String), e10adc3949ba59ab(String)
2020-04-20 20:29:36.768 DEBUG 12464 --- [http-nio-8080-exec-8] com.qin.mapper.UserMapper.checkUser      : <==      Total: 1
2020-04-20 20:29:36.769  INFO 12464 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/index
2020-04-20 20:29:39.473  INFO 12464 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@309f1898]}
2020-04-20 20:29:39.480 DEBUG 12464 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 20:29:39.480 DEBUG 12464 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 20:29:39.481 DEBUG 12464 --- [http-nio-8080-exec-8] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 20:29:39.502 DEBUG 12464 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 20:29:39.502 DEBUG 12464 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 20:29:39.504 DEBUG 12464 --- [http-nio-8080-exec-8] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 20:29:39.505 DEBUG 12464 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, b.description bdescription, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 20:29:39.506 DEBUG 12464 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 20:29:39.514 DEBUG 12464 --- [http-nio-8080-exec-8] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 20:29:39.516  INFO 12464 --- [http-nio-8080-exec-8] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 20:29:40.945  INFO 12464 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 20:29:40.946 DEBUG 12464 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 20:29:40.946 DEBUG 12464 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 20:29:40.947 DEBUG 12464 --- [http-nio-8080-exec-3] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 20:29:40.948 DEBUG 12464 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 20:29:40.948 DEBUG 12464 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 20:29:40.949 DEBUG 12464 --- [http-nio-8080-exec-3] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 20:29:40.953 DEBUG 12464 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, b.description bdescription, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 20:29:40.953 DEBUG 12464 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 20:29:40.963 DEBUG 12464 --- [http-nio-8080-exec-3] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 20:29:40.967  INFO 12464 --- [http-nio-8080-exec-3] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 20:29:45.129  INFO 12464 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[Blog{id=12, title='平时日记', content='# Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync', firstPicture='https://i.picsum.photos/id/1005/800/450.jpg', flag='原创', views=null, appreciation=true, shareStatement=true, commentAble=true, published=true, recommend=true, creatTime=null, updateTime=null, typeId=42, userId=null, tagIds='9,6', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BeanPropertyBindingResult: 0 errors, 12, {}, org.apache.catalina.session.StandardSessionFacade@309f1898]}
2020-04-20 20:29:45.132 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 20:29:45.133 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 9(Long)
2020-04-20 20:29:45.134 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 20:29:45.135 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTag          : ==>  Preparing: select * from t_tag where id = ? 
2020-04-20 20:29:45.135 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTag          : ==> Parameters: 6(Long)
2020-04-20 20:29:45.137 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.TagMapper.getTag          : <==      Total: 1
2020-04-20 20:29:45.140 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getType        : ==>  Preparing: select * from t_type where id = ? 
2020-04-20 20:29:45.141 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getType        : ==> Parameters: 42(Long)
2020-04-20 20:29:45.142 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.TypeMapper.getType        : <==      Total: 1
2020-04-20 20:29:45.144 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, b.description bdescription, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 20:29:45.145 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 20:29:45.153 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 20:29:45.155 DEBUG 12464 --- [http-nio-8080-exec-1] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==>  Preparing: delete from t_blog_tag where blog_id = ? 
2020-04-20 20:29:45.155 DEBUG 12464 --- [http-nio-8080-exec-1] c.q.m.BlogTagMapper.delBlogTagByBlogId   : ==> Parameters: 12(Long)
2020-04-20 20:29:45.157 DEBUG 12464 --- [http-nio-8080-exec-1] c.q.m.BlogTagMapper.delBlogTagByBlogId   : <==    Updates: 2
2020-04-20 20:29:45.158 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 20:29:45.158 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 9(Long)
2020-04-20 20:29:45.473 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 20:29:45.473 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.BlogTagMapper.addBlogTag  : ==>  Preparing: insert into t_blog_tag(blog_id,tag_id) values (?,?) 
2020-04-20 20:29:45.474 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.BlogTagMapper.addBlogTag  : ==> Parameters: 12(Long), 6(Long)
2020-04-20 20:29:45.475 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.BlogTagMapper.addBlogTag  : <==    Updates: 1
2020-04-20 20:29:45.476 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.updateBlog     : ==>  Preparing: update t_blog set title = ?, content=?, firstPicture=?, flag=?, appreciation=?, shareStatement=?, commentAble=?, published=?, recommend=?, updateTime=?, type_id=?, user_id=?, description=? where id = ?; 
2020-04-20 20:29:45.479 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.updateBlog     : ==> Parameters: 平时日记(String), # Maven pom.xml文件

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.qin</groupId>
  <artifactId>MyWebApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>MyWebApp Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.19</version>
    </dependency>

    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.4</version>
    </dependency>


  </dependencies>

  <build>
    <finalName>MyWebApp</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--在build中配置resources，来防止我们资源导出失败的问题-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
      
      
  </build>
</project>

```



# 编写Mybatis工具类

```java
package com.qin.Utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class MybatisUtils
{
	private static SqlSessionFactory sqlSessionFactory = null;

	static
	{
		InputStream inputStream = null;
		String resource = "config/mybatis-config.xml";
		try
		{
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}

	public static SqlSession getSqlSession()
    {
        return sqlSessionFactory.openSession();
    }
}

```



# 工具类对应用法

```java
package com.qin.Dao;

import com.qin.Pojo.Book;
import com.qin.Utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class BookDaoTest
{
    @Test
    public void addBook()
    {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        BookDao mapper = sqlSession.getMapper(BookDao.class);

        mapper.addBook(new Book("00001","西游记","北京出版社","章承恩"));

        sqlSession.commit();
        sqlSession.close();
    }
}

```



# Mybatis配置文件

## 1. mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--  引入外部db.properties文件   -->
    <properties resource="config/db.properties"/>
    
    <!--  给实体类起别名，type是实体类的位置，alias是别名 -->
    <typeAliases>
        <typeAlias type="com.qin.Pojo.User" alias="user"/>
        
        <!--  可以是包扫描    -->
        <!--
        <package name="com.qin.Pojo"/>
        -->
    </typeAliases>
    
    <!--  环境配置  -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- property 引用 db.properties 中的项 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!-- 写入映射文件 -->
        <mapper resource="config/UserMapper.xml"/>
        <mapper resource="config/BookMapper.xml"/>
    </mappers>
</configuration>
```



## 2. db.properties

```properties
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&useUnicode=true
username=root
password=123456
```



## 3. 接口xml文件

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.Dao.UserDao">
    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- column 数据库字段名   property 实体类中属性名-->
        <result column="username" property="name"/>
    </resultMap>
    
    <select id="getUserList" resultMap="UserMap">
        select * from users
    </select>
    
    <!-- resultType是返回值类型，但是可以写别名，在 mybatis-config.xml 中配置 -->
    <select id="getUserList" resultType="com.qin.Pojo.User">
        select * from users
    </select>

    <insert id="insertUser" parameterType="com.qin.Pojo.User">
        insert into users values (#{id},#{username},#{pwd})
    </insert>

    <update id="updateUser" parameterType="com.qin.Pojo.User">
        update users set username = #{username}, pwd=#{pwd}  where id=#{id};
    </update>

    <delete id="delUser" parameterType="int">
        delete from users where id=#{id}
    </delete>
</mapper>
```

* 当数据库列名与实体类的属性名不一致时，使用resultMap结果集映射







# Maven常用包

```xml
<!-- spring -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>

<!-- lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
</dependency>

<!-- junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>


<!-- mysql -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>


<!-- mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.4</version>
</dependency>

<!-- spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.4.RELEASE</version>
</dependency>


<!-- AOP 织入 -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.5</version>
</dependency>


<!-- mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.0.4</version>
</dependency>

<!-- c3p0连接池-->
<dependency>
    <groupId>com.mchange</groupId>
    <artifactId>c3p0</artifactId>
    <version>0.9.5.5</version>
</dependency>

```









# Spring

#### @Autowired自动装配

通过类型、名字，如果Autowired不能唯一自动装配，则需要通过@Qualifier(value = "xxx")

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>
```



#### @Nullable

可以为null值。



#### @Resource

自动装配通过名字、类型。



#### @Component

组件，放在类上，说明这个类被Spring管理了，就是bean，等价于：

```xml
<bean id="person" class="com.qin.pojo.Person"/>
```

记得：

```xml
<context:component-scan base-package="com.qin.pojo"/>
```



#### @Component衍生注解

* dao 【@Repository】
* service 【@Service】
* controller 【@Controller】



#### @Value()

属性注入，相当于：

```xml
<bean id="person" class="com.qin.pojo.Person">    <property name="name" value="qin"/></bean>
```



## Spring AOP

底层为动态代理。

1.导包

2.约束：

```xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
```

3.配置织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>
<bean id="AfterLog" class="com.qin.log.AfterLog"/>
<bean id="al" class="com.qin.log.cout"/>

<bean id="diy" class="com.qin.log.diy"/>   
<aop:config>
    <!-- 切入点，expression为表达式，表明在哪里运行-->
    <aop:pointcut id="pointcut" expression="execution(* com.qin.service.UserService.*(..))"/>
    <!-- advice-ref的类必须实现AOP的接口 -->
    <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>

    <aop:advisor advice-ref="al" pointcut-ref="pointcut"/>
    
    <!-- 自定义切面-->
    <aop:aspect ref="diy">
        <aop:after method="a" pointcut-ref="pointcut"/>
        <aop:before method="b" pointcut-ref="pointcut"/>
    </aop:aspect>
</aop:config>
```

AfterLog:

```java
import org.springframework.aop.MethodBeforeAdvice;

import java.lang.reflect.Method;
//重写before函数
public class AfterLog implements MethodBeforeAdvice 
{

    public void before(Method method, Object[] args, Object target) throws Throwable 	 {
        System.out.println(target.getClass().getName()+method.getName());
    }
}

```

注解织入：

记得配置激活注解织入

```xml
<bean id="userservice" class="com.qin.service.UserServiceImpl"/>

<bean id="diy" class="com.qin.log.diy"/>

<aop:aspectj-autoproxy/>
```

diy:

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class diy {

    @Before("execution(* com.qin.service.UserService.*(..))")
    public void b()
    {
        System.out.println("b");
    }

    @After("execution(* com.qin.service.UserService.*(..))")
    public void a()
    {
        System.out.println("a");
    }
}
```

## Spring-Mybatis整合

1.导包

2.spring接管mybatis的数据源

```xml
<!--    数据源-->
<bean id="Datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/login?&amp;characterEncoding=utf-8&amp;useUnicode=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>

</bean>
```

3.之前的MybatisUtils工具类（用来获取sqlSession）

```java
String resource = "mybatis-config.xml";
InputStream in = Resources.getResourceAsStream(resource);
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);
SqlSession sqlSession = sessionFactory.openSession();
```

​	现在由spring接管：

​	配置sqlSessionFactory

```xml
<!--    sqlSessionFactory-->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    
    <!-- 数据源  -->
    <property name="dataSource" ref="Datasource"/>
    
    <!-- 绑定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
    <!-- mappers  -->
    <property name="mapperLocations" value="classpath:com/qin/mapper/*.xml"/>
    
</bean>
```

​	配置sqlSession bean

```xml
<!--    sqlSession,使用SqlSessionTemplate-->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- 使用构造方法注册      -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
```



4.使用

​	与原来不一样，需要一个UserMapper的实现类，之前用sqlSession，现在用sqlSessionTemplate。

​	编写UserMapperImpl类

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.mybatis.spring.SqlSessionTemplate;

import java.util.List;

public class UserMapperImpl implements UserMapper 
{

    //之前用sqlSession，现在用sqlSessionTemplate。
    private SqlSessionTemplate sqlSession;

    public void setSqlSession(SqlSessionTemplate sqlSession) 
    {
        this.sqlSession = sqlSession;
    }

    public List<User> getUsers() 
    {
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        return mapper.getUsers();
    }
}
```

​	在spring中注册bean

```xml
<bean id="userMapper" class="com.qin.mapper.UserMapperImpl">
    <property name="sqlSession" ref="sqlSession"/>
</bean>
```



​	测试类:

```java
ApplicationContext context = new ClassPathXmlApplicationContext("spring-dao.xml");
UserMapper userMapper = context.getBean("userMapper", UserMapper.class);
for (User user : userMapper.getUsers()) {

    System.out.println(user);
}
```



# SpringMVC

## 1.导包

```xml
<dependencies>
    <!-- spring webmvc-->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.2.4.RELEASE</version>
    </dependency>


    <!-- junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
    </dependency>

    <!-- servlet-api -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
    </dependency>

    <!-- jsp-api -->
    <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>4.0.1</version>
    </dependency>

    <!-- jstl -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>

</dependencies>
```

## 2.spring-mvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    处理器映射器-->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>


<!--    处理器适配器-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
<!--        前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>

    </bean>
<!--BeanNameUrlHandlerMapping:bean-->
    <bean id="/hello" class="com.qin.controller.HelloController"/>
</beans>
```

## 3.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--DispatcherServlet绑定springmvc配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
```

## 4.controller

```java
package com.qin.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloController implements Controller 
{
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception 
    {

        ModelAndView mv = new ModelAndView();
        //业务代码
        String res = "hello world";
        mv.addObject("msg",res);
        //视图跳转
        mv.setViewName("test");
        return mv;
    }
}

```

## 5.过滤器(web.xml)

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```





# SSM整合

## 1.导包(pom.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ssm</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>


        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>

        <!-- spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


        <!-- AOP 织入 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>


        <!-- mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.66</version>
        </dependency>
		<!-- servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        
    </dependencies>
    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
```





## 2.web.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--编码过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- session超时时间-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
```



## 3.配置Mybatis(mybatis-config.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <typeAliases>
        <package name="com.qin.pojo"/>
    </typeAliases>

    <mappers>
        <!-- 写入映射文件 -->
        <mapper class="com.qin.mapper.UserMapper"/>
    </mappers>

</configuration>
```

## 4.db.properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/test?&characterEncoding=utf-8&useUnicode=true
jdbc.username=root
jdbc.password=123456
```



## 5.spring-mybatis整合(spring-mybatis.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
<!--    读取外部properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>
<!--sqlsessionfactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

<!--    扫描DAO接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.qin.mapper"/>
     </bean>
</beans>
```





## 6.spring-service整合(spring-service.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    包扫描-->
    <context:component-scan base-package="com.qin.service"/>
<!--    bean注入-->
    <bean id="userService" class="com.qin.service.UserServiceImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>
<!--    声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
```





## 7.spring-mvc整合(spring-mvx.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--   注解驱动-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes"  value="text/html;charset=utf-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    静态资源过滤-->
    <mvc:default-servlet-handler/>
<!--    包扫描-->
    <context:component-scan base-package="com.qin.controller"/>
<!--    视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


</beans>
```



## 8.整合(applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="spring-mybatis.xml"/>
    <import resource="spring-service.xml"/>
    <import resource="spring-mvc.xml"/>

</beans>
```



# Spring-boot、Mybatis整合



## 1.pom.xml

```xml
<!-- mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.19</version>
</dependency>

<!-- mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.2</version>
</dependency>
```

## 2.application.yaml

```yaml
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/login?characterEncoding=utf-8&useUnicode=true
    driver-class-name: com.mysql.cj.jdbc.Driver
mybatis:
  type-aliases-package: com.qin.pojo
  mapper-locations: classpath:mybatis/config/*.xml

```



## 3.UserMapper

```java
package com.qin.mapper;

import com.qin.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserMapper
{

    List<User> getUserList();

}

```



## 4.UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qin.mapper.UserMapper">

    <select id="getUserList" resultType="User">
        select * from user
    </select>
</mapper>
```



# SpringSecurity

## 1.pom.xml

```xml
<dependency>-->
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```





## 2.SecurityConfig

```java
package com.qin.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll()
                .antMatchers("/level1/**").hasRole("vip1")
                .antMatchers("/level2/**").hasRole("vip2")
                .antMatchers("/level3/**").hasRole("vip3");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("qin").password("123").roles("vip1")
                .and()
                .withUser("qinqin").password("123").roles("vip1","vip2");
    }
}

```

# Shiro

## 1.pom.xml

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.5.2</version>
</dependency>
```

## 2.UserRealm	自定义Realm

```java
package com.qin.config;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        return null;
    }
}

```

## 3.配置类    ShiroConfig

```java
package com.qin.config;

import org.apache.shiro.realm.Realm;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig
{

    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier("securityManager") DefaultWebSecurityManager securityManager)
    {
        //设置安全管理器
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        Map<String,String> map = new LinkedHashMap<String, String>();
        map.put("/user/add","authc");
        map.put("/user/update","authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);

        return shiroFilterFactoryBean;
    }

    @Bean
    public DefaultWebSecurityManager securityManager(@Qualifier("realm") Realm realm)
    {
        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
        defaultWebSecurityManager.setRealm(realm);
        return defaultWebSecurityManager;
    }

    @Bean
    public Realm realm()
    {
        return new UserRealm();
    }
}

```

![1585843229470](C:\Users\秦\AppData\Roaming\Typora\typora-user-images\1585843229470.png)

## 4.设置用户登陆认证

```java

@RequestMapping("/user/login")
    public String login(@RequestParam("username") String name,@RequestParam("password") String password)
    {
        Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken(name,password);

        subject.login(token);
        return "";
    }
```

设置令牌登陆，当执行login时，会跳转到UserRealm

```java
public class UserRealm extends AuthorizingRealm {

    //授权
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        return null;
    }

    //认证
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

        return null;
    }
}
```

在下面这个函数中验证用户是否存在即可









# Swagger

1.导入swagger包

```xml
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
```



2.编写配置类：

```java
package com.qin.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.RequestHandler;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;

@Configuration
@EnableSwagger2
public class Swagger {

    @Bean
    public Docket docket()
    {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                //扫描全部
                .apis(RequestHandlerSelectors.any())
                //指定路径扫描
                .paths(PathSelectors.ant("/hello"))
                .build();
    }

    public ApiInfo apiInfo()
    {
        return new ApiInfo(
                "文档",
                "Api Documentation",
                "1.0",
                "urn:tos",
                new Contact("秦达", "", ""),
                "Apache 2.0",
                "http://www.apache.org/licenses/LICENSE-2.0",
                new ArrayList());

    }

}

```







# Springboot 异步任务

1.在方法上注解@Async

2.在main上开启：@EnableAsync(String), https://i.picsum.photos/id/1005/800/450.jpg(String), 原创(String), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2020-04-20 20:29:45.154(Timestamp), 42(Long), 1(Long), kkk(String), 12(Long)
2020-04-20 20:29:45.486 DEBUG 12464 --- [http-nio-8080-exec-1] com.qin.mapper.BlogMapper.updateBlog     : <==    Updates: 1
2020-04-20 20:29:45.621  INFO 12464 --- [http-nio-8080-exec-1] com.qin.aspect.LogAspect                 : return : redirect:/admin/blogs
2020-04-20 20:29:45.795  INFO 12464 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.blogs', args=[PageRequest{pageNum=0, pageSize=0}, Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, {message=操作成功, pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors, blog=Blog{id=null, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentAble=false, published=false, recommend=false, creatTime=null, updateTime=null, typeId=null, userId=null, tagIds='null', type=null, tags=[], user=null, comments=[]}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, org.apache.catalina.session.StandardSessionFacade@309f1898]}
2020-04-20 20:29:45.796 DEBUG 12464 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 20:29:45.796 DEBUG 12464 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 20:29:45.797 DEBUG 12464 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 20:29:45.800 DEBUG 12464 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND b.user_id = ? 
2020-04-20 20:29:45.800 DEBUG 12464 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.listBlog_COUNT   : ==> Parameters: 1(Long)
2020-04-20 20:29:45.801 DEBUG 12464 --- [http-nio-8080-exec-2] c.qin.mapper.BlogMapper.listBlog_COUNT   : <==      Total: 1
2020-04-20 20:29:45.802 DEBUG 12464 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.listBlog       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, b.description bdescription, t.name tname, t.id tid, u.id uid from t_blog b,t_type t,t_user u WHERE b.type_id = t.id and b.user_id = ? order by bid LIMIT ? 
2020-04-20 20:29:45.803 DEBUG 12464 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.listBlog       : ==> Parameters: 1(Long), 5(Integer)
2020-04-20 20:29:45.811 DEBUG 12464 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.listBlog       : <==      Total: 5
2020-04-20 20:29:45.812  INFO 12464 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : admin/blogs
2020-04-20 20:29:48.460  INFO 12464 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/admin/blogs/12/input', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.AdminBlogController.update', args=[12, {}]}
2020-04-20 20:29:48.462 DEBUG 12464 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==>  Preparing: select * from t_type 
2020-04-20 20:29:48.463 DEBUG 12464 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : ==> Parameters: 
2020-04-20 20:29:48.467 DEBUG 12464 --- [http-nio-8080-exec-2] com.qin.mapper.TypeMapper.getAllTypes    : <==      Total: 2
2020-04-20 20:29:48.467 DEBUG 12464 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getAllTags      : ==>  Preparing: select * from t_tag 
2020-04-20 20:29:48.468 DEBUG 12464 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getAllTags      : ==> Parameters: 
2020-04-20 20:29:48.471 DEBUG 12464 --- [http-nio-8080-exec-2] com.qin.mapper.TagMapper.getAllTags      : <==      Total: 4
2020-04-20 20:29:48.473 DEBUG 12464 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogById    : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, b.description bdescription, t.name tname, t.id tid, tbtag.tag_id tagid, ttag.name tagname from t_blog b,t_type t, t_blog_tag tbtag, t_tag ttag where b.id = ? and b.type_id = t.id and tbtag.blog_id = b.id and ttag.id = tbtag.tag_id 
2020-04-20 20:29:48.473 DEBUG 12464 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogById    : ==> Parameters: 12(Long)
2020-04-20 20:29:48.478 DEBUG 12464 --- [http-nio-8080-exec-2] com.qin.mapper.BlogMapper.getBlogById    : <==      Total: 2
2020-04-20 20:29:48.481  INFO 12464 --- [http-nio-8080-exec-2] com.qin.aspect.LogAspect                 : return : admin/blogs-input
2020-04-20 20:30:55.783  INFO 12464 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 20:30:55.790 DEBUG 12464 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 20:30:55.791 DEBUG 12464 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 20:30:55.792 DEBUG 12464 --- [http-nio-8080-exec-5] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 20:30:55.793 DEBUG 12464 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, b.description bdescription, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 20:30:55.793 DEBUG 12464 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 20:30:55.799 DEBUG 12464 --- [http-nio-8080-exec-5] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 20:30:55.802 DEBUG 12464 --- [http-nio-8080-exec-5] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 20:30:55.803 DEBUG 12464 --- [http-nio-8080-exec-5] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 20:30:55.804 DEBUG 12464 --- [http-nio-8080-exec-5] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 20:30:55.809 DEBUG 12464 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 20:30:55.810 DEBUG 12464 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 20:30:55.811 DEBUG 12464 --- [http-nio-8080-exec-5] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 20:30:55.812 DEBUG 12464 --- [http-nio-8080-exec-5] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 20:30:55.812 DEBUG 12464 --- [http-nio-8080-exec-5] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 20:30:55.813 DEBUG 12464 --- [http-nio-8080-exec-5] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 20:30:55.814  INFO 12464 --- [http-nio-8080-exec-5] com.qin.aspect.LogAspect                 : return : index
2020-04-20 20:31:35.728  INFO 12464 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.qin.controller.IndexController.index', args=[PageRequest{pageNum=0, pageSize=0}, {pageRequest=PageRequest{pageNum=0, pageSize=0}, org.springframework.validation.BindingResult.pageRequest=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-04-20 20:31:35.732 DEBUG 12464 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id 
2020-04-20 20:31:35.733 DEBUG 12464 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : ==> Parameters: 
2020-04-20 20:31:35.737 DEBUG 12464 --- [http-nio-8080-exec-6] c.qin.mapper.BlogMapper.getBlogs_COUNT   : <==      Total: 1
2020-04-20 20:31:35.738 DEBUG 12464 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : ==>  Preparing: select b.id bid, b.title btitle, b.content bcontent, b.firstPicture bfirstPicture, b.flag bflag, b.views bviews, b.appreciation bappreciation, b.shareStatement bshareStatement, b.commentAble bcommentAble, b.published bpublished, b.recommend brecommend, b.creatTime bcreatTime, b.updateTime bupdateTime, b.type_id btype_id, b.user_id buser_id, b.description bdescription, t.name tname, t.id tid, u.id uid, u.nickname unickname, u.avatar uavatar from t_blog b,t_type t, t_user u where b.type_id = t.id and u.id = b.user_id LIMIT ? 
2020-04-20 20:31:35.739 DEBUG 12464 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : ==> Parameters: 5(Integer)
2020-04-20 20:31:35.745 DEBUG 12464 --- [http-nio-8080-exec-6] com.qin.mapper.BlogMapper.getBlogs       : <==      Total: 5
2020-04-20 20:31:35.747 DEBUG 12464 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : ==>  Preparing: select t.id tid,t.name tname, count(t.id) nums from t_type t left join t_blog b on b.type_id = t.id GROUP BY t.id order by count(t.id) desc limit ?; 
2020-04-20 20:31:35.747 DEBUG 12464 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : ==> Parameters: 6(Integer)
2020-04-20 20:31:35.748 DEBUG 12464 --- [http-nio-8080-exec-6] c.qin.mapper.TypeMapper.getTypeTopList   : <==      Total: 2
2020-04-20 20:31:35.749 DEBUG 12464 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : ==>  Preparing: select bt.tag_id bttagid,t.name tname,count(bt.tag_id) nums from t_blog_tag bt, t_tag t where bt.tag_id = t.id group by bt.tag_id order by nums desc limit ? 
2020-04-20 20:31:35.749 DEBUG 12464 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : ==> Parameters: 8(Integer)
2020-04-20 20:31:35.750 DEBUG 12464 --- [http-nio-8080-exec-6] com.qin.mapper.TagMapper.getTagTopList   : <==      Total: 4
2020-04-20 20:31:35.751 DEBUG 12464 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : ==>  Preparing: select b.id bid,b.title btitle ,b.updateTime bupdateTime from t_blog b where recommend = true order by updateTime desc limit ? 
2020-04-20 20:31:35.751 DEBUG 12464 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : ==> Parameters: 5(Integer)
2020-04-20 20:31:35.752 DEBUG 12464 --- [http-nio-8080-exec-6] c.q.m.B.getResentRecommendBlogs          : <==      Total: 3
2020-04-20 20:31:35.753  INFO 12464 --- [http-nio-8080-exec-6] com.qin.aspect.LogAspect                 : return : index
